public final class kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2 extends java.lang.Object implements kotlinx.coroutines.flow.FlowCollector
{
    final kotlin.jvm.functions.Function3 $action;
    private int index;

    public void <init>(kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2 r0;
        kotlin.jvm.functions.Function3 $r1;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2;

        $r1 := @parameter0: kotlin.jvm.functions.Function3;

        r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: kotlin.jvm.functions.Function3 $action> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2 r0;
        kotlin.jvm.functions.Function3 $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r5;
        kotlin.coroutines.Continuation $r3;
        java.lang.Integer $r4;
        java.lang.ArithmeticException $r6;
        kotlin.Unit r7;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: kotlin.jvm.functions.Function3 $action>;

        $i1 = r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: int index>;

        $i0 = $i1 + 1;

        r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: int index> = $i0;

        if $i1 < 0 goto label2;

        $r4 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r2, $r3);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r5 goto label1;

        return $r2;

     label1:
        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r7;

     label2:
        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Index overflow has happened");

        throw $r6;
    }

    public java.lang.Object emit$$forInline(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2 r0;
        int $i0, $i1;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1 $r4;
        kotlin.jvm.functions.Function3 $r5;
        java.lang.ArithmeticException $r6;
        kotlin.Unit r7;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(4);

        $r4 = new kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1;

        specialinvoke $r4.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1: void <init>(kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2,kotlin.coroutines.Continuation)>(r0, $r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(5);

        $r5 = r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: kotlin.jvm.functions.Function3 $action>;

        $i1 = r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: int index>;

        $i0 = $i1 + 1;

        r0.<kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2: int index> = $i0;

        if $i1 < 0 goto label1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r5.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r7;

     label1:
        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Index overflow has happened");

        throw $r6;
    }
}
