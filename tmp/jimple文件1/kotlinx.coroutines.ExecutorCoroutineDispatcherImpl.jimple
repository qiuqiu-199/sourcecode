public final class kotlinx.coroutines.ExecutorCoroutineDispatcherImpl extends kotlinx.coroutines.ExecutorCoroutineDispatcher implements kotlinx.coroutines.Delay
{
    private final java.util.concurrent.Executor executor;

    public void <init>(java.util.concurrent.Executor)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>();

        r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor executor> = $r1;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        staticinvoke <kotlinx.coroutines.internal.ConcurrentKt: boolean removeFutureOnCancel(java.util.concurrent.Executor)>($r1);

        return;
    }

    private final void cancelJobOnRejection(kotlin.coroutines.CoroutineContext, java.util.concurrent.RejectedExecutionException)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.util.concurrent.CancellationException $r2;
        java.util.concurrent.RejectedExecutionException $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter1: java.util.concurrent.RejectedExecutionException;

        $r4 = (java.lang.Throwable) $r3;

        $r2 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>("The task was rejected", $r4);

        staticinvoke <kotlinx.coroutines.JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r1, $r2);

        return;
    }

    private final java.util.concurrent.ScheduledFuture scheduleBlock(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, kotlin.coroutines.CoroutineContext, long)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        kotlin.coroutines.CoroutineContext $r1;
        long $l0;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ScheduledFuture $r3;
        java.util.concurrent.ScheduledExecutorService $r4;
        java.lang.Runnable $r5;
        java.util.concurrent.RejectedExecutionException $r6;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r4 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        $r5 := @parameter1: java.lang.Runnable;

        $r1 := @parameter2: kotlin.coroutines.CoroutineContext;

        $l0 := @parameter3: long;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label1:
        $r3 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r5, $l0, $r2);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: void cancelJobOnRejection(kotlin.coroutines.CoroutineContext,java.util.concurrent.RejectedExecutionException)>($r1, $r6);

        return null;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public void close()
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        boolean $z0;
        java.util.concurrent.Executor $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $z0 = $r1 instanceof java.util.concurrent.ExecutorService;

        if $z0 == 0 goto label1;

        $r2 = (java.util.concurrent.ExecutorService) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 != null goto label3;

        return;

     label3:
        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void shutdown()>();

        return;
    }

    public java.lang.Object delay(long, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        long $l0;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.Delay$DefaultImpls: java.lang.Object delay(kotlinx.coroutines.Delay,long,kotlin.coroutines.Continuation)>(r0, $l0, $r1);

        return $r2;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2, $r5;
        java.util.concurrent.Executor $r3;
        kotlinx.coroutines.AbstractTimeSource $r4;
        java.util.concurrent.RejectedExecutionException $r6;
        kotlinx.coroutines.CoroutineDispatcher $r7;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

     label1:
        $r3 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $r4 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

     label2:
        if $r4 != null goto label3;

        $r5 = $r2;

        goto label4;

     label3:
        $r5 = virtualinvoke $r4.<kotlinx.coroutines.AbstractTimeSource: java.lang.Runnable wrapTask(java.lang.Runnable)>($r2);

     label4:
        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        $r4 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r4 != null goto label7;

        goto label8;

     label7:
        virtualinvoke $r4.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

     label8:
        specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: void cancelJobOnRejection(kotlin.coroutines.CoroutineContext,java.util.concurrent.RejectedExecutionException)>($r1, $r6);

        $r7 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()>();

        virtualinvoke $r7.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label6;
        catch java.util.concurrent.RejectedExecutionException from label3 to label4 with label6;
        catch java.util.concurrent.RejectedExecutionException from label4 to label5 with label6;
    }

    public boolean equals(java.lang.Object)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        java.util.concurrent.Executor $r3, $r4;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) $r1;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $r4 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        if $r3 != $r4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        java.util.concurrent.Executor r1;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        r1 = r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor executor>;

        return r1;
    }

    public int hashCode()
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        java.util.concurrent.Executor $r1;
        int $i0;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1);

        return $i0;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        boolean $z0;
        long $l0;
        java.util.concurrent.Executor $r3;
        java.util.concurrent.ScheduledFuture $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        kotlinx.coroutines.DisposableFutureHandle $r6;
        java.util.concurrent.Future $r7;
        kotlinx.coroutines.DisposableHandle $r8;
        kotlinx.coroutines.DefaultExecutor $r9;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $z0 = $r3 instanceof java.util.concurrent.ScheduledExecutorService;

        $r4 = null;

        if $z0 == 0 goto label1;

        $r5 = (java.util.concurrent.ScheduledExecutorService) $r3;

        goto label2;

     label1:
        $r5 = null;

     label2:
        if $r5 != null goto label3;

        goto label4;

     label3:
        $r4 = specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.ScheduledFuture scheduleBlock(java.util.concurrent.ScheduledExecutorService,java.lang.Runnable,kotlin.coroutines.CoroutineContext,long)>($r5, $r1, $r2, $l0);

     label4:
        if $r4 == null goto label5;

        $r6 = new kotlinx.coroutines.DisposableFutureHandle;

        $r7 = (java.util.concurrent.Future) $r4;

        specialinvoke $r6.<kotlinx.coroutines.DisposableFutureHandle: void <init>(java.util.concurrent.Future)>($r7);

        $r8 = (kotlinx.coroutines.DisposableHandle) $r6;

        return $r8;

     label5:
        $r9 = <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>;

        $r8 = virtualinvoke $r9.<kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DisposableHandle invokeOnTimeout(long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>($l0, $r1, $r2);

        return $r8;
    }

    public void scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        long $l0;
        kotlinx.coroutines.CancellableContinuation $r1;
        java.util.concurrent.Executor $r2;
        boolean $z0;
        java.util.concurrent.ScheduledFuture $r3;
        java.util.concurrent.ScheduledExecutorService $r4;
        kotlinx.coroutines.ResumeUndispatchedRunnable $r5;
        kotlinx.coroutines.CoroutineDispatcher $r6;
        java.lang.Runnable $r7;
        kotlin.coroutines.CoroutineContext $r8;
        java.util.concurrent.Future $r9;
        kotlinx.coroutines.DefaultExecutor $r10;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $z0 = $r2 instanceof java.util.concurrent.ScheduledExecutorService;

        $r3 = null;

        if $z0 == 0 goto label1;

        $r4 = (java.util.concurrent.ScheduledExecutorService) $r2;

        goto label2;

     label1:
        $r4 = null;

     label2:
        if $r4 != null goto label3;

        goto label4;

     label3:
        $r5 = new kotlinx.coroutines.ResumeUndispatchedRunnable;

        $r6 = (kotlinx.coroutines.CoroutineDispatcher) r0;

        specialinvoke $r5.<kotlinx.coroutines.ResumeUndispatchedRunnable: void <init>(kotlinx.coroutines.CoroutineDispatcher,kotlinx.coroutines.CancellableContinuation)>($r6, $r1);

        $r7 = (java.lang.Runnable) $r5;

        $r8 = interfaceinvoke $r1.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.ScheduledFuture scheduleBlock(java.util.concurrent.ScheduledExecutorService,java.lang.Runnable,kotlin.coroutines.CoroutineContext,long)>($r4, $r7, $r8, $l0);

     label4:
        if $r3 == null goto label5;

        $r9 = (java.util.concurrent.Future) $r3;

        staticinvoke <kotlinx.coroutines.JobKt: void cancelFutureOnCancellation(kotlinx.coroutines.CancellableContinuation,java.util.concurrent.Future)>($r1, $r9);

        return;

     label5:
        $r10 = <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>;

        virtualinvoke $r10.<kotlinx.coroutines.DefaultExecutor: void scheduleResumeAfterDelay(long,kotlinx.coroutines.CancellableContinuation)>($l0, $r1);

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcherImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
