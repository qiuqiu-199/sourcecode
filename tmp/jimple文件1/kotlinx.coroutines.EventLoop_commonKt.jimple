public final class kotlinx.coroutines.EventLoop_commonKt extends java.lang.Object
{
    private static final kotlinx.coroutines.internal.Symbol CLOSED_EMPTY;
    private static final kotlinx.coroutines.internal.Symbol DISPOSED_TASK;
    private static final long MAX_DELAY_NS;
    private static final long MAX_MS;
    private static final long MS_TO_NS;
    private static final int SCHEDULE_COMPLETED;
    private static final int SCHEDULE_DISPOSED;
    private static final int SCHEDULE_OK;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        <kotlinx.coroutines.EventLoop_commonKt: int SCHEDULE_DISPOSED> = 2;

        <kotlinx.coroutines.EventLoop_commonKt: int SCHEDULE_COMPLETED> = 1;

        <kotlinx.coroutines.EventLoop_commonKt: long MS_TO_NS> = 1000000L;

        <kotlinx.coroutines.EventLoop_commonKt: long MAX_MS> = 9223372036854L;

        <kotlinx.coroutines.EventLoop_commonKt: long MAX_DELAY_NS> = 4611686018427387903L;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("REMOVED_TASK");

        <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol DISPOSED_TASK> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("CLOSED_EMPTY");

        <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol CLOSED_EMPTY> = $r0;

        return;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol CLOSED_EMPTY>;

        return r0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getDISPOSED_TASK$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol DISPOSED_TASK>;

        return r0;
    }

    public static final long delayNanosToMillis(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = $l0 / 1000000L;

        return $l0;
    }

    public static final long delayToNanos(long)
    {
        long $l0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        return 0L;

     label1:
        $b1 = $l0 cmp 9223372036854L;

        if $b1 < 0 goto label2;

        return 9223372036854775807L;

     label2:
        $l0 = 1000000L * $l0;

        return $l0;
    }

    private static void getCLOSED_EMPTY$annotations()
    {
        return;
    }

    private static void getDISPOSED_TASK$annotations()
    {
        return;
    }
}
