final class kotlinx.coroutines.sync.MutexImpl$TryLockDesc extends kotlinx.coroutines.internal.AtomicDesc
{
    public final kotlinx.coroutines.sync.MutexImpl mutex;
    public final java.lang.Object owner;

    public void <init>(kotlinx.coroutines.sync.MutexImpl, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$TryLockDesc;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<kotlinx.coroutines.internal.AtomicDesc: void <init>()>();

        r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: kotlinx.coroutines.sync.MutexImpl mutex> = $r1;

        r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: java.lang.Object owner> = $r2;

        return;
    }

    public void complete(kotlinx.coroutines.internal.AtomicOp, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc r0;
        kotlinx.coroutines.internal.AtomicOp $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.sync.Empty $r4;
        kotlinx.coroutines.sync.MutexImpl $r5;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$TryLockDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.AtomicOp;

        $r3 := @parameter1: java.lang.Object;

        if $r3 == null goto label1;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_UNLOCKED$p()>();

        goto label3;

     label1:
        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: java.lang.Object owner>;

        if $r3 != null goto label2;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_LOCKED$p()>();

        goto label3;

     label2:
        $r4 = new kotlinx.coroutines.sync.Empty;

        specialinvoke $r4.<kotlinx.coroutines.sync.Empty: void <init>(java.lang.Object)>($r3);

     label3:
        $r5 = r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: kotlinx.coroutines.sync.MutexImpl mutex>;

        $r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r5, $r1, $r4);

        return;
    }

    public java.lang.Object prepare(kotlinx.coroutines.internal.AtomicOp)
    {
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc r0;
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        kotlinx.coroutines.internal.AtomicOp $r3;
        kotlinx.coroutines.sync.MutexImpl $r4;
        kotlinx.coroutines.sync.Empty $r5;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r6;
        java.lang.Object $r7;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$TryLockDesc;

        $r3 := @parameter0: kotlinx.coroutines.internal.AtomicOp;

        $r1 = new kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp;

        specialinvoke $r1.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: void <init>(kotlinx.coroutines.sync.MutexImpl$TryLockDesc,kotlinx.coroutines.internal.AtomicOp)>(r0, $r3);

        $r4 = r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: kotlinx.coroutines.sync.MutexImpl mutex>;

        $r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_UNLOCKED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r4, $r5, $r1);

        if $z0 != 0 goto label1;

        $r6 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getLOCK_FAIL$p()>();

        return $r6;

     label1:
        $r4 = r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: kotlinx.coroutines.sync.MutexImpl mutex>;

        $r7 = virtualinvoke $r1.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: java.lang.Object perform(java.lang.Object)>($r4);

        return $r7;
    }
}
