final class kotlinx.coroutines.flow.FlowKt__DistinctKt extends java.lang.Object
{
    private static final kotlin.jvm.functions.Function2 defaultAreEquivalent;
    private static final kotlin.jvm.functions.Function1 defaultKeySelector;

    static void <clinit>()
    {
        kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultKeySelector$1 $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultAreEquivalent$1 $r2;
        kotlin.jvm.functions.Function2 $r3;

        $r0 = <kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultKeySelector$1: kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultKeySelector$1 INSTANCE>;

        $r1 = (kotlin.jvm.functions.Function1) $r0;

        <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlin.jvm.functions.Function1 defaultKeySelector> = $r1;

        $r2 = <kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultAreEquivalent$1: kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultAreEquivalent$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlin.jvm.functions.Function2 defaultAreEquivalent> = $r3;

        return;
    }

    public static final kotlinx.coroutines.flow.Flow distinctUntilChanged(kotlinx.coroutines.flow.Flow)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlinx.coroutines.flow.Flow $r1;
        boolean $z0;
        kotlin.jvm.functions.Function1 $r2;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $z0 = $r1 instanceof kotlinx.coroutines.flow.StateFlow;

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r2 = <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlin.jvm.functions.Function1 defaultKeySelector>;

        $r0 = <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlin.jvm.functions.Function2 defaultAreEquivalent>;

        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlinx.coroutines.flow.Flow distinctUntilChangedBy$FlowKt__DistinctKt(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2)>($r1, $r2, $r0);

        return $r1;
    }

    public static final kotlinx.coroutines.flow.Flow distinctUntilChanged(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        $r1 = <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlin.jvm.functions.Function1 defaultKeySelector>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlinx.coroutines.flow.Flow distinctUntilChangedBy$FlowKt__DistinctKt(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2)>($r2, $r1, $r0);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow distinctUntilChangedBy(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        $r1 = <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlin.jvm.functions.Function2 defaultAreEquivalent>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DistinctKt: kotlinx.coroutines.flow.Flow distinctUntilChangedBy$FlowKt__DistinctKt(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2)>($r2, $r0, $r1);

        return $r2;
    }

    private static final kotlinx.coroutines.flow.Flow distinctUntilChangedBy$FlowKt__DistinctKt(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function1 $r0, $r2;
        kotlin.jvm.functions.Function2 $r1, $r5;
        kotlinx.coroutines.flow.Flow $r3;
        boolean $z0;
        kotlinx.coroutines.flow.DistinctFlowImpl $r4;

        $r3 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        $z0 = $r3 instanceof kotlinx.coroutines.flow.DistinctFlowImpl;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.flow.DistinctFlowImpl) $r3;

        $r2 = $r4.<kotlinx.coroutines.flow.DistinctFlowImpl: kotlin.jvm.functions.Function1 keySelector>;

        if $r2 != $r0 goto label1;

        $r5 = $r4.<kotlinx.coroutines.flow.DistinctFlowImpl: kotlin.jvm.functions.Function2 areEquivalent>;

        if $r5 != $r1 goto label1;

        return $r3;

     label1:
        $r4 = new kotlinx.coroutines.flow.DistinctFlowImpl;

        specialinvoke $r4.<kotlinx.coroutines.flow.DistinctFlowImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2)>($r3, $r0, $r1);

        $r3 = (kotlinx.coroutines.flow.Flow) $r4;

        return $r3;
    }

    private static void getDefaultAreEquivalent$annotations$FlowKt__DistinctKt()
    {
        return;
    }

    private static void getDefaultKeySelector$annotations$FlowKt__DistinctKt()
    {
        return;
    }
}
