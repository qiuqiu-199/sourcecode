public final class kotlinx.coroutines.flow.internal.FlowCoroutineKt extends java.lang.Object
{

    public static final kotlinx.coroutines.channels.ReceiveChannel flowProduce(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.CoroutineContext $r2;
        int $i0;
        kotlinx.coroutines.channels.Channel $r3;
        kotlinx.coroutines.flow.internal.FlowProduceCoroutine $r4;
        kotlinx.coroutines.CoroutineStart $r5;
        kotlinx.coroutines.channels.ReceiveChannel $r6;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r0 := @parameter3: kotlin.jvm.functions.Function2;

        $r3 = staticinvoke <kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel$default(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1,int,java.lang.Object)>($i0, null, null, 6, null);

        $r2 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>($r1, $r2);

        $r4 = new kotlinx.coroutines.flow.internal.FlowProduceCoroutine;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.FlowProduceCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlinx.coroutines.channels.Channel)>($r2, $r3);

        $r5 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>;

        virtualinvoke $r4.<kotlinx.coroutines.flow.internal.FlowProduceCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>($r5, $r4, $r0);

        $r6 = (kotlinx.coroutines.channels.ReceiveChannel) $r4;

        return $r6;
    }

    public static kotlinx.coroutines.channels.ReceiveChannel flowProduce$default(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.ReceiveChannel $r3;
        kotlinx.coroutines.CoroutineScope $r4;
        int $i0, $i1;

        $r4 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r0 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r1 := @parameter3: kotlin.jvm.functions.Function2;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: kotlinx.coroutines.channels.ReceiveChannel flowProduce(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlin.jvm.functions.Function2)>($r4, $r0, $i0, $r1);

        return $r3;
    }

    public static final java.lang.Object flowScope(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.internal.FlowCoroutine $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.internal.ScopeCoroutine $r4;
        java.lang.Object $r5, $r6;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = new kotlinx.coroutines.flow.internal.FlowCoroutine;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r2.<kotlinx.coroutines.flow.internal.FlowCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r3, $r0);

        $r4 = (kotlinx.coroutines.internal.ScopeCoroutine) $r2;

        $r5 = staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: java.lang.Object startUndispatchedOrReturn(kotlinx.coroutines.internal.ScopeCoroutine,java.lang.Object,kotlin.jvm.functions.Function2)>($r4, $r2, $r1);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r0);

     label1:
        return $r5;
    }

    public static final kotlinx.coroutines.flow.Flow scopedFlow(kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function3;

        $r1 = new kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1: void <init>(kotlin.jvm.functions.Function3)>($r0);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }
}
