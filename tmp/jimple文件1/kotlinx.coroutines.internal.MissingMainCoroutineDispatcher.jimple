final class kotlinx.coroutines.internal.MissingMainCoroutineDispatcher extends kotlinx.coroutines.MainCoroutineDispatcher implements kotlinx.coroutines.Delay
{
    private final java.lang.Throwable cause;
    private final java.lang.String errorHint;

    public void <init>(java.lang.Throwable, java.lang.String)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<kotlinx.coroutines.MainCoroutineDispatcher: void <init>()>();

        r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Throwable cause> = $r1;

        r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.String errorHint> = $r2;

        return;
    }

    public void <init>(java.lang.Throwable, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        java.lang.Throwable $r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 := @parameter0: java.lang.Throwable;

        $r3 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = null;

     label1:
        specialinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: void <init>(java.lang.Throwable,java.lang.String)>($r1, $r3);

        return;
    }

    private final java.lang.Void missing()
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        java.lang.Throwable $r1;
        java.lang.String $r2, $r3;
        java.lang.IllegalStateException $r4;
        kotlin.KotlinNothingValueException $r5;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 = r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Throwable cause>;

        if $r1 == null goto label3;

        $r2 = r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.String errorHint>;

        $r3 = "";

        if $r2 == null goto label2;

        $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(". ", $r2);

        if $r2 != null goto label1;

        goto label2;

     label1:
        $r3 = $r2;

     label2:
        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Module with the Main dispatcher had failed to initialize", $r3);

        $r4 = new java.lang.IllegalStateException;

        $r1 = r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Throwable cause>;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1);

        throw $r4;

     label3:
        staticinvoke <kotlinx.coroutines.internal.MainDispatchersKt: java.lang.Void throwMissingMainDispatcherException()>();

        $r5 = new kotlin.KotlinNothingValueException;

        specialinvoke $r5.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r5;
    }

    public java.lang.Object delay(long, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        kotlin.coroutines.Continuation $r1;
        long $l0;
        kotlin.KotlinNothingValueException $r2;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public java.lang.Void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public volatile void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        virtualinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;
    }

    public kotlinx.coroutines.MainCoroutineDispatcher getImmediate()
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        kotlinx.coroutines.MainCoroutineDispatcher $r1;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 = (kotlinx.coroutines.MainCoroutineDispatcher) r0;

        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        long $l0;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        specialinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.KotlinNothingValueException $r2;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        specialinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public java.lang.Void scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        long $l0;
        kotlin.KotlinNothingValueException $r2;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        specialinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public volatile void scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        long $l0;
        kotlinx.coroutines.CancellableContinuation $r1;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        virtualinvoke r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void scheduleResumeAfterDelay(long,kotlinx.coroutines.CancellableContinuation)>($l0, $r1);

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.internal.MissingMainCoroutineDispatcher r0;
        java.lang.StringBuilder $r1;
        java.lang.Throwable $r2;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dispatchers.Main[missing");

        $r2 = r0.<kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Throwable cause>;

        if $r2 == null goto label1;

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(", cause=", $r2);

        goto label2;

     label1:
        $r3 = "";

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
