public final class kotlinx.coroutines.DebugKt extends java.lang.Object
{
    private static final boolean ASSERTIONS_ENABLED;
    private static final java.util.concurrent.atomic.AtomicLong COROUTINE_ID;
    private static final boolean DEBUG;
    public static final java.lang.String DEBUG_PROPERTY_NAME;
    public static final java.lang.String DEBUG_PROPERTY_VALUE_AUTO;
    public static final java.lang.String DEBUG_PROPERTY_VALUE_OFF;
    public static final java.lang.String DEBUG_PROPERTY_VALUE_ON;
    private static final boolean RECOVER_STACK_TRACES;
    public static final java.lang.String STACKTRACE_RECOVERY_PROPERTY_NAME;

    static void <clinit>()
    {
        boolean $z0, $z1;
        java.lang.String $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        java.util.concurrent.atomic.AtomicLong $r4;

        <kotlinx.coroutines.DebugKt: java.lang.String STACKTRACE_RECOVERY_PROPERTY_NAME> = "kotlinx.coroutines.stacktrace.recovery";

        <kotlinx.coroutines.DebugKt: java.lang.String DEBUG_PROPERTY_VALUE_ON> = "on";

        <kotlinx.coroutines.DebugKt: java.lang.String DEBUG_PROPERTY_VALUE_OFF> = "off";

        <kotlinx.coroutines.DebugKt: java.lang.String DEBUG_PROPERTY_VALUE_AUTO> = "auto";

        <kotlinx.coroutines.DebugKt: java.lang.String DEBUG_PROPERTY_NAME> = "kotlinx.coroutines.debug";

        <kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED> = 0;

        $z0 = 0;

        <kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED> = 0;

        $r0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>("kotlinx.coroutines.debug");

        if $r0 == null goto label6;

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        if $i0 == 0 goto label3;

        if $i0 == 3551 goto label2;

        if $i0 == 109935 goto label1;

        if $i0 != 3005871 goto label5;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z1 == 0 goto label5;

        goto label6;

     label1:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z1 == 0 goto label5;

        $z1 = 0;

        goto label7;

     label2:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z1 == 0 goto label5;

        goto label4;

     label3:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label5;

     label4:
        $z1 = 1;

        goto label7;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System property \'kotlinx.coroutines.debug\' has unrecognized value \'");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.IllegalStateException;

        $r0 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;

     label6:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label7:
        <kotlinx.coroutines.DebugKt: boolean DEBUG> = $z1;

        if $z1 == 0 goto label8;

        $z1 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: boolean systemProp(java.lang.String,boolean)>("kotlinx.coroutines.stacktrace.recovery", 1);

        if $z1 == 0 goto label8;

        $z0 = 1;

     label8:
        <kotlinx.coroutines.DebugKt: boolean RECOVER_STACK_TRACES> = $z0;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        <kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID> = $r4;

        return;
    }

    private static final void assert(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        java.lang.AssertionError $r3;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        return;
    }

    public static final boolean getASSERTIONS_ENABLED()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED>;

        return z0;
    }

    public static final java.util.concurrent.atomic.AtomicLong getCOROUTINE_ID()
    {
        java.util.concurrent.atomic.AtomicLong r0;

        r0 = <kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID>;

        return r0;
    }

    public static final boolean getDEBUG()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.DebugKt: boolean DEBUG>;

        return z0;
    }

    public static final boolean getRECOVER_STACK_TRACES()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.DebugKt: boolean RECOVER_STACK_TRACES>;

        return z0;
    }

    public static final void resetCoroutineId()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = <kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        return;
    }
}
