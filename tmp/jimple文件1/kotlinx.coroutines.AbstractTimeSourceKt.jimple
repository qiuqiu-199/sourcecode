public final class kotlinx.coroutines.AbstractTimeSourceKt extends java.lang.Object
{
    private static kotlinx.coroutines.AbstractTimeSource timeSource;

    static void <clinit>()
    {
        return;
    }

    private static final long currentTimeMillis()
    {
        kotlinx.coroutines.AbstractTimeSource $r0;
        long $l0;

        $r0 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r0 != null goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;

     label1:
        $l0 = virtualinvoke $r0.<kotlinx.coroutines.AbstractTimeSource: long currentTimeMillis()>();

        return $l0;
    }

    public static final kotlinx.coroutines.AbstractTimeSource getTimeSource()
    {
        kotlinx.coroutines.AbstractTimeSource r0;

        r0 = <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource timeSource>;

        return r0;
    }

    private static final long nanoTime()
    {
        kotlinx.coroutines.AbstractTimeSource $r0;
        long $l0;

        $r0 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r0 != null goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        return $l0;

     label1:
        $l0 = virtualinvoke $r0.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

        return $l0;
    }

    private static final void parkNanos(java.lang.Object, long)
    {
        java.lang.Object $r0;
        long $l0;
        kotlinx.coroutines.AbstractTimeSource $r1;

        $r0 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 != null goto label1;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>($r0, $l0);

        return;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: void parkNanos(java.lang.Object,long)>($r0, $l0);

        return;
    }

    private static final void registerTimeLoopThread()
    {
        kotlinx.coroutines.AbstractTimeSource $r0;

        $r0 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r0 != null goto label1;

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.AbstractTimeSource: void registerTimeLoopThread()>();

        return;
    }

    public static final void setTimeSource(kotlinx.coroutines.AbstractTimeSource)
    {
        kotlinx.coroutines.AbstractTimeSource $r0;

        $r0 := @parameter0: kotlinx.coroutines.AbstractTimeSource;

        <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource timeSource> = $r0;

        return;
    }

    private static final void trackTask()
    {
        kotlinx.coroutines.AbstractTimeSource $r0;

        $r0 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r0 != null goto label1;

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.AbstractTimeSource: void trackTask()>();

        return;
    }

    private static final void unTrackTask()
    {
        kotlinx.coroutines.AbstractTimeSource $r0;

        $r0 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r0 != null goto label1;

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

        return;
    }

    private static final void unpark(java.lang.Thread)
    {
        java.lang.Thread $r0;
        kotlinx.coroutines.AbstractTimeSource $r1;

        $r0 := @parameter0: java.lang.Thread;

        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 != null goto label1;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r0);

        return;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: void unpark(java.lang.Thread)>($r0);

        return;
    }

    private static final void unregisterTimeLoopThread()
    {
        kotlinx.coroutines.AbstractTimeSource $r0;

        $r0 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r0 != null goto label1;

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

        return;
    }

    private static final java.lang.Runnable wrapTask(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        kotlinx.coroutines.AbstractTimeSource $r1;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 != null goto label1;

        return $r0;

     label1:
        $r0 = virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: java.lang.Runnable wrapTask(java.lang.Runnable)>($r0);

        return $r0;
    }
}
