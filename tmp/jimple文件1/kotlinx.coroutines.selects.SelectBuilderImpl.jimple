public final class kotlinx.coroutines.selects.SelectBuilderImpl extends kotlinx.coroutines.internal.LockFreeLinkedListHead implements kotlinx.coroutines.selects.SelectBuilder, kotlinx.coroutines.selects.SelectInstance, kotlin.coroutines.Continuation, kotlin.coroutines.jvm.internal.CoroutineStackFrame
{
    static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU;
    static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU;
    private volatile java.lang.Object _parentHandle;
    volatile java.lang.Object _result;
    volatile java.lang.Object _state;
    private final kotlin.coroutines.Continuation uCont;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/selects/SelectBuilderImpl;", class "Ljava/lang/Object;", "_state");

        <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/selects/SelectBuilderImpl;", class "Ljava/lang/Object;", "_result");

        <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU> = $r0;

        return;
    }

    public void <init>(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: void <init>()>();

        r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont> = $r1;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getNOT_SELECTED()>();

        r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _state> = $r2;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result> = $r2;

        r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _parentHandle> = null;

        return;
    }

    public static final void access$doAfterSelect(kotlinx.coroutines.selects.SelectBuilderImpl)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectBuilderImpl;

        specialinvoke $r0.<kotlinx.coroutines.selects.SelectBuilderImpl: void doAfterSelect()>();

        return;
    }

    private final void doAfterSelect()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r4;
        boolean $z0;
        kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode $r5;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 = specialinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlinx.coroutines.DisposableHandle getParentHandle()>();

        if $r1 != null goto label1;

        goto label2;

     label1:
        interfaceinvoke $r1.<kotlinx.coroutines.DisposableHandle: void dispose()>();

     label2:
        $r2 = (kotlinx.coroutines.internal.LockFreeLinkedListHead) r0;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Object getNext()>();

        $r4 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

     label3:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r2);

        if $z0 != 0 goto label5;

        $z0 = $r4 instanceof kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode;

        if $z0 == 0 goto label4;

        $r5 = (kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode) $r4;

        $r1 = $r5.<kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode: kotlinx.coroutines.DisposableHandle handle>;

        interfaceinvoke $r1.<kotlinx.coroutines.DisposableHandle: void dispose()>();

     label4:
        $r4 = virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>();

        goto label3;

     label5:
        return;
    }

    private final void doResume(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function0)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlin.jvm.functions.Function0 $r1, $r2;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.Object $r4, $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r4 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result>;

        $r5 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        if $r4 != $r5 goto label3;

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r6 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r5 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r0, $r5, $r4);

        if $z0 == 0 goto label2;

        return;

     label3:
        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label4;

        $r6 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r5 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getRESUMED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r0, $r4, $r5);

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;

     label4:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already resumed");

        throw $r7;
    }

    private final kotlinx.coroutines.DisposableHandle getParentHandle()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.Object $r1;
        kotlinx.coroutines.DisposableHandle $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _parentHandle>;

        $r2 = (kotlinx.coroutines.DisposableHandle) $r1;

        return $r2;
    }

    private final void initCancellability()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Job$Key $r2;
        kotlin.coroutines.CoroutineContext$Key $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.Job $r5;
        kotlinx.coroutines.selects.SelectBuilderImpl$SelectOnCancelling $r6;
        kotlinx.coroutines.CompletionHandlerBase $r7;
        kotlin.jvm.functions.Function1 $r8;
        kotlinx.coroutines.DisposableHandle $r9;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) $r2;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        $r5 = (kotlinx.coroutines.Job) $r4;

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = new kotlinx.coroutines.selects.SelectBuilderImpl$SelectOnCancelling;

        specialinvoke $r6.<kotlinx.coroutines.selects.SelectBuilderImpl$SelectOnCancelling: void <init>(kotlinx.coroutines.selects.SelectBuilderImpl)>(r0);

        $r7 = (kotlinx.coroutines.CompletionHandlerBase) $r6;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r5, 1, 0, $r8, 2, null);

        specialinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: void setParentHandle(kotlinx.coroutines.DisposableHandle)>($r9);

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r9.<kotlinx.coroutines.DisposableHandle: void dispose()>();

     label2:
        return;
    }

    private final void setParentHandle(kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.DisposableHandle $r1;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.DisposableHandle;

        r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _parentHandle> = $r1;

        return;
    }

    public void disposeOnSelect(kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode $r2;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.DisposableHandle;

        $r2 = new kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode;

        specialinvoke $r2.<kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode: void <init>(kotlinx.coroutines.DisposableHandle)>($r1);

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 != 0 goto label1;

        $r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

        virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: void addLast(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r3);

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        interfaceinvoke $r1.<kotlinx.coroutines.DisposableHandle: void dispose()>();

        return;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.Continuation getCompletion()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 = (kotlin.coroutines.Continuation) r0;

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r2 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont>;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public final java.lang.Object getResult()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        boolean $z0;
        java.lang.Object $r1, $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.CompletedExceptionally $r4;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: void initCancellability()>();

     label1:
        $r1 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result>;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        if $r1 != $r2 goto label3;

        $r3 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r1, $r2);

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r1;

     label2:
        $r1 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result>;

     label3:
        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getRESUMED$p()>();

        if $r1 == $r2 goto label5;

        $z0 = $r1 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 != 0 goto label4;

        return $r1;

     label4:
        $r4 = (kotlinx.coroutines.CompletedExceptionally) $r1;

        $r5 = $r4.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        throw $r5;

     label5:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already resumed");

        throw $r6;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        return null;
    }

    public final void handleBuilderException(java.lang.Throwable)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.Throwable $r1, $r6, $r7;
        boolean $z0;
        kotlin.coroutines.Continuation $r2;
        kotlin.Result$Companion $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.CompletedExceptionally $r5;
        kotlin.coroutines.CoroutineContext $r8;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean trySelect()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r4 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r1);

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r4);

        return;

     label1:
        $z0 = $r1 instanceof java.util.concurrent.CancellationException;

        if $z0 != 0 goto label7;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object getResult()>();

        $z0 = $r4 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label6;

        $r5 = (kotlinx.coroutines.CompletedExceptionally) $r4;

        $r6 = $r5.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r6 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable unwrapImpl(java.lang.Throwable)>($r6);

     label3:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 != 0 goto label4;

        $r7 = $r1;

        goto label5;

     label4:
        $r7 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable unwrapImpl(java.lang.Throwable)>($r1);

     label5:
        if $r6 == $r7 goto label7;

     label6:
        $r8 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r8, $r1);

     label7:
        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause0, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.selects.SelectClause0 $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.selects.SelectInstance $r3;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause0;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = (kotlinx.coroutines.selects.SelectInstance) r0;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause0: void registerSelectClause0(kotlinx.coroutines.selects.SelectInstance,kotlin.jvm.functions.Function1)>($r3, $r2);

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause1, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.selects.SelectClause1 $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.selects.SelectInstance $r3;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause1;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 = (kotlinx.coroutines.selects.SelectInstance) r0;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause1: void registerSelectClause1(kotlinx.coroutines.selects.SelectInstance,kotlin.jvm.functions.Function2)>($r3, $r2);

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause2, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.selects.SelectClause2 $r1;
        java.lang.Object $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.selects.SelectInstance $r4;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause2;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        $r4 = (kotlinx.coroutines.selects.SelectInstance) r0;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause2: void registerSelectClause2(kotlinx.coroutines.selects.SelectInstance,java.lang.Object,kotlin.jvm.functions.Function2)>($r4, $r2, $r3);

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause2, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.selects.SelectClause2 $r1;
        kotlin.jvm.functions.Function2 $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause2;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlinx.coroutines.selects.SelectBuilder$DefaultImpls: void invoke(kotlinx.coroutines.selects.SelectBuilder,kotlinx.coroutines.selects.SelectClause2,kotlin.jvm.functions.Function2)>(r0, $r1, $r2);

        return;
    }

    public boolean isSelected()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        kotlinx.coroutines.internal.OpDescriptor $r3;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

     label1:
        $r2 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _state>;

        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getNOT_SELECTED()>();

        if $r2 != $r1 goto label2;

        return 0;

     label2:
        $z0 = $r2 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label3;

        $r3 = (kotlinx.coroutines.internal.OpDescriptor) $r2;

        virtualinvoke $r3.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label1;

     label3:
        return 1;
    }

    public void onTimeout(long, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        byte $b1;
        boolean $z0;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.selects.SelectBuilderImpl$onTimeout$$inlined$Runnable$1 $r3;
        java.lang.Runnable $r4;
        kotlin.coroutines.CoroutineContext $r5;
        kotlinx.coroutines.Delay $r6;
        kotlinx.coroutines.DisposableHandle $r7;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean trySelect()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation getCompletion()>();

        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUnintercepted(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r1, $r2);

        return;

     label1:
        $r3 = new kotlinx.coroutines.selects.SelectBuilderImpl$onTimeout$$inlined$Runnable$1;

        specialinvoke $r3.<kotlinx.coroutines.selects.SelectBuilderImpl$onTimeout$$inlined$Runnable$1: void <init>(kotlinx.coroutines.selects.SelectBuilderImpl,kotlin.jvm.functions.Function1)>(r0, $r1);

        $r4 = (java.lang.Runnable) $r3;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r6 = staticinvoke <kotlinx.coroutines.DelayKt: kotlinx.coroutines.Delay getDelay(kotlin.coroutines.CoroutineContext)>($r5);

        $r5 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r7 = interfaceinvoke $r6.<kotlinx.coroutines.Delay: kotlinx.coroutines.DisposableHandle invokeOnTimeout(long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>($l0, $r4, $r5);

        virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: void disposeOnSelect(kotlinx.coroutines.DisposableHandle)>($r7);

     label2:
        return;
    }

    public java.lang.Object performAtomicTrySelect(kotlinx.coroutines.internal.AtomicDesc)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.AtomicDesc $r3;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r3 := @parameter0: kotlinx.coroutines.internal.AtomicDesc;

        $r1 = new kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp;

        specialinvoke $r1.<kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp: void <init>(kotlinx.coroutines.selects.SelectBuilderImpl,kotlinx.coroutines.internal.AtomicDesc)>(r0, $r3);

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp: java.lang.Object perform(java.lang.Object)>(null);

        return $r2;
    }

    public void resumeSelectWithException(java.lang.Throwable)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.Throwable $r1, $r8;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.CompletedExceptionally $r5;
        kotlin.coroutines.Continuation $r6;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9;
        kotlin.Result$Companion $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r3 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result>;

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        if $r3 != $r4 goto label6;

        $r5 = new kotlinx.coroutines.CompletedExceptionally;

        $r6 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label4;

        $z0 = $r6 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r7 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r6;

        $r8 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r1, $r7);

        goto label5;

     label4:
        $r8 = $r1;

     label5:
        specialinvoke $r5.<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r8, 0, 2, null);

        $r9 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r9, r0, $r3, $r5);

        if $z0 == 0 goto label2;

        return;

     label6:
        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label7;

        $r9 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getRESUMED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r9, r0, $r3, $r4);

        if $z0 == 0 goto label2;

        $r6 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r6);

        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r1);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r3);

        interfaceinvoke $r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r3);

        return;

     label7:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already resumed");

        throw $r11;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.Object $r1, $r3, $r4;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5;
        kotlin.coroutines.Continuation $r6;
        java.lang.Throwable $r7, $r8;
        kotlin.Result$Companion $r9;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: boolean isSelected()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r3 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result>;

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        if $r3 != $r4 goto label3;

        $r3 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState$default(java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, null, 1, null);

        $r5 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getUNDECIDED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r0, $r4, $r3);

        if $z0 == 0 goto label2;

        return;

     label3:
        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label7;

        $r5 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _result$FU>;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object access$getRESUMED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r0, $r3, $r4);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r1);

        if $z0 == 0 goto label6;

        $r6 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont>;

        $r7 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r1);

        $r8 = $r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        $r9 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label5;

        $z0 = $r6 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label4;

        goto label5;

     label4:
        $r10 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r6;

        $r8 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r7, $r10);

     label5:
        $r1 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        interfaceinvoke $r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;

     label6:
        $r6 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: kotlin.coroutines.Continuation uCont>;

        interfaceinvoke $r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;

     label7:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already resumed");

        throw $r11;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SelectInstance(state=");

        $r3 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _state>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", result=");

        $r3 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _result>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public boolean trySelect()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.String $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object trySelectOther(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(null);

        $r2 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Unexpected trySelectIdempotent result ", $r1);

        $r4 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        $r5 = (java.lang.Throwable) $r4;

        throw $r5;
    }

    public java.lang.Object trySelectOther(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl r0, $r8;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        java.lang.Object $r2, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        boolean $z0;
        kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp $r5;
        kotlinx.coroutines.internal.AtomicOp $r6;
        kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp $r7;
        java.lang.IllegalStateException $r9;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        kotlinx.coroutines.internal.OpDescriptor $r12;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r13;
        kotlinx.coroutines.internal.Symbol r14;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

     label01:
        $r2 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl: java.lang.Object _state>;

        $r3 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getNOT_SELECTED()>();

        if $r2 != $r3 goto label05;

        if $r1 != null goto label02;

        $r4 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getNOT_SELECTED()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, null);

        if $z0 != 0 goto label04;

        goto label01;

     label02:
        $r5 = new kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp;

        specialinvoke $r5.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>($r1);

        $r4 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getNOT_SELECTED()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, $r5);

        if $z0 != 0 goto label03;

        goto label01;

     label03:
        $r2 = virtualinvoke $r5.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: java.lang.Object perform(java.lang.Object)>(r0);

        if $r2 == null goto label04;

        return $r2;

     label04:
        specialinvoke r0.<kotlinx.coroutines.selects.SelectBuilderImpl: void doAfterSelect()>();

        r14 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return r14;

     label05:
        $z0 = $r2 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label09;

        if $r1 == null goto label08;

        $r6 = virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        $z0 = $r6 instanceof kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp;

        if $z0 == 0 goto label07;

        $r7 = (kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) $r6;

        $r8 = $r7.<kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp: kotlinx.coroutines.selects.SelectBuilderImpl impl>;

        if $r8 == r0 goto label06;

        goto label07;

     label06:
        $r9 = new java.lang.IllegalStateException;

        $r10 = "Cannot use matching select clauses on the same object";

        $r10 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        $r11 = (java.lang.Throwable) $r9;

        throw $r11;

     label07:
        $r12 = (kotlinx.coroutines.internal.OpDescriptor) $r2;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.internal.AtomicOp: boolean isEarlierThan(kotlinx.coroutines.internal.OpDescriptor)>($r12);

        if $z0 == 0 goto label08;

        $r2 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

        return $r2;

     label08:
        $r12 = (kotlinx.coroutines.internal.OpDescriptor) $r2;

        virtualinvoke $r12.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label01;

     label09:
        if $r1 != null goto label10;

        return null;

     label10:
        $r13 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        if $r2 != $r13 goto label11;

        r14 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return r14;

     label11:
        return null;
    }
}
