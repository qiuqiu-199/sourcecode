public final class kotlinx.coroutines.DispatchedTaskKt extends java.lang.Object
{
    public static final int MODE_ATOMIC;
    public static final int MODE_CANCELLABLE;
    public static final int MODE_CANCELLABLE_REUSABLE;
    public static final int MODE_UNDISPATCHED;
    public static final int MODE_UNINITIALIZED;

    public static final void dispatch(kotlinx.coroutines.DispatchedTask, int)
    {
        kotlinx.coroutines.DispatchedTask $r0;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.internal.DispatchedContinuation $r3;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        kotlin.coroutines.CoroutineContext $r5;
        java.lang.Runnable $r6;

        $r0 := @parameter0: kotlinx.coroutines.DispatchedTask;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label4;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label4:
        $r2 = virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()>();

        if $i0 != 4 goto label5;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 != 0 goto label8;

        $z0 = $r2 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if $z0 == 0 goto label8;

        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>($i0);

        $i0 = $r0.<kotlinx.coroutines.DispatchedTask: int resumeMode>;

        $z2 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>($i0);

        if $z0 != $z2 goto label8;

        $r3 = (kotlinx.coroutines.internal.DispatchedContinuation) $r2;

        $r4 = $r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r5 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $z1 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>($r5);

        if $z1 == 0 goto label7;

        $r6 = (java.lang.Runnable) $r0;

        virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r5, $r6);

        return;

     label7:
        staticinvoke <kotlinx.coroutines.DispatchedTaskKt: void resumeUnconfined(kotlinx.coroutines.DispatchedTask)>($r0);

        return;

     label8:
        staticinvoke <kotlinx.coroutines.DispatchedTaskKt: void resume(kotlinx.coroutines.DispatchedTask,kotlin.coroutines.Continuation,boolean)>($r0, $r2, $z1);

        return;
    }

    public static void getMODE_CANCELLABLE$annotations()
    {
        return;
    }

    public static final boolean isCancellableMode(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 == 1 goto label2;

        if $i0 != 2 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static final boolean isReusableMode(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 != 2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final void resume(kotlinx.coroutines.DispatchedTask, kotlin.coroutines.Continuation, boolean)
    {
        kotlinx.coroutines.DispatchedTask $r0;
        kotlin.coroutines.Continuation $r1;
        boolean $z0;
        java.lang.Object $r2, $r6;
        java.lang.Throwable $r3;
        kotlin.Result$Companion $r4;
        kotlinx.coroutines.internal.DispatchedContinuation $r5;
        kotlin.coroutines.CoroutineContext $r7;
        kotlinx.coroutines.internal.Symbol $r8;
        kotlinx.coroutines.UndispatchedCoroutine $r9;
        kotlin.Unit $r10;

        $r0 := @parameter0: kotlinx.coroutines.DispatchedTask;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 := @parameter2: boolean;

        $r2 = virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: java.lang.Object takeState$kotlinx_coroutines_core()>();

        $r3 = virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult$kotlinx_coroutines_core(java.lang.Object)>($r2);

        if $r3 == null goto label01;

        $r4 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r3);

        goto label02;

     label01:
        $r4 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)>($r2);

     label02:
        $r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        $r5 = (kotlinx.coroutines.internal.DispatchedContinuation) $r1;

        $r1 = $r5.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r6 = $r5.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r7 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r6 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r7, $r6);

        $r8 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

        if $r6 == $r8 goto label03;

        $r9 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r7, $r6);

        goto label04;

     label03:
        $r9 = null;

     label04:
        $r1 = $r5.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        if $r9 == null goto label06;

        $z0 = virtualinvoke $r9.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if $z0 == 0 goto label11;

     label06:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r7, $r6);

        return;

     label07:
        $r3 := @caughtexception;

        if $r9 == null goto label08;

        $z0 = virtualinvoke $r9.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if $z0 == 0 goto label09;

     label08:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r7, $r6);

     label09:
        throw $r3;

     label10:
        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

     label11:
        return;

        catch java.lang.Throwable from label04 to label05 with label07;
    }

    private static final void resumeUnconfined(kotlinx.coroutines.DispatchedTask)
    {
        kotlinx.coroutines.DispatchedTask $r0;
        kotlinx.coroutines.ThreadLocalEventLoop $r1;
        kotlinx.coroutines.EventLoop $r2;
        boolean $z0;
        kotlin.coroutines.Continuation $r3;
        java.lang.Throwable $r4, $r5;

        $r0 := @parameter0: kotlinx.coroutines.DispatchedTask;

        $r1 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r0);

        return;

     label1:
        virtualinvoke $r2.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label2:
        $r3 = virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()>();

        staticinvoke <kotlinx.coroutines.DispatchedTaskKt: void resume(kotlinx.coroutines.DispatchedTask,kotlin.coroutines.Continuation,boolean)>($r0, $r3, 1);

     label3:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label4:
        if $z0 != 0 goto label3;

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        virtualinvoke $r0.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r4, null);

     label7:
        virtualinvoke $r2.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        return;

     label8:
        $r5 := @caughtexception;

        virtualinvoke $r2.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        throw $r5;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public static final void resumeWithStackTrace(kotlin.coroutines.Continuation, java.lang.Throwable)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Throwable $r1;
        kotlin.Result$Companion $r2;
        boolean $z0;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label2;

        $z0 = $r0 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r3 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r0;

        $r1 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r1, $r3);

     label2:
        $r4 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r1);

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        interfaceinvoke $r0.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r4);

        return;
    }

    public static final void runUnconfinedEventLoop(kotlinx.coroutines.DispatchedTask, kotlinx.coroutines.EventLoop, kotlin.jvm.functions.Function0)
    {
        kotlinx.coroutines.EventLoop $r0;
        boolean $z0;
        kotlinx.coroutines.DispatchedTask $r1;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Throwable $r3, $r4;

        $r1 := @parameter0: kotlinx.coroutines.DispatchedTask;

        $r0 := @parameter1: kotlinx.coroutines.EventLoop;

        $r2 := @parameter2: kotlin.jvm.functions.Function0;

        virtualinvoke $r0.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label1:
        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label3:
        if $z0 != 0 goto label2;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        virtualinvoke $r1.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r3, null);

     label6:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label7:
        virtualinvoke $r0.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label8:
        $r4 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r0.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public static void <clinit>()
    {
        <kotlinx.coroutines.DispatchedTaskKt: int MODE_UNINITIALIZED> = -1;

        <kotlinx.coroutines.DispatchedTaskKt: int MODE_UNDISPATCHED> = 4;

        <kotlinx.coroutines.DispatchedTaskKt: int MODE_CANCELLABLE_REUSABLE> = 2;

        <kotlinx.coroutines.DispatchedTaskKt: int MODE_CANCELLABLE> = 1;

        <kotlinx.coroutines.DispatchedTaskKt: int MODE_ATOMIC> = 0;

        return;
    }
}
