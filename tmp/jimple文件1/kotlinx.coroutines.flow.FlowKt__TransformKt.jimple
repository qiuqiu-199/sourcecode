final class kotlinx.coroutines.flow.FlowKt__TransformKt extends java.lang.Object
{

    public static final kotlinx.coroutines.flow.Flow filter(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow filterIsInstance(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void needClassReification()>();

        $r1 = new kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1: void <init>(kotlinx.coroutines.flow.Flow)>($r0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow filterNot(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__TransformKt$filterNot$$inlined$unsafeTransform$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__TransformKt$filterNot$$inlined$unsafeTransform$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__TransformKt$filterNot$$inlined$unsafeTransform$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow filterNotNull(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 = new kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1: void <init>(kotlinx.coroutines.flow.Flow)>($r0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow map(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__TransformKt$map$$inlined$unsafeTransform$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow mapNotNull(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow onEach(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__TransformKt$onEach$$inlined$unsafeTransform$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__TransformKt$onEach$$inlined$unsafeTransform$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__TransformKt$onEach$$inlined$unsafeTransform$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow runningFold(kotlinx.coroutines.flow.Flow, java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.flow.Flow $r0;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function3 $r2;
        kotlinx.coroutines.flow.FlowKt__TransformKt$runningFold$$inlined$unsafeFlow$1 $r3;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        $r3 = new kotlinx.coroutines.flow.FlowKt__TransformKt$runningFold$$inlined$unsafeFlow$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__TransformKt$runningFold$$inlined$unsafeFlow$1: void <init>(java.lang.Object,kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r1, $r0, $r2);

        $r0 = (kotlinx.coroutines.flow.Flow) $r3;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow runningReduce(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.FlowKt__TransformKt$runningReduce$$inlined$unsafeFlow$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        $r2 = new kotlinx.coroutines.flow.FlowKt__TransformKt$runningReduce$$inlined$unsafeFlow$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__TransformKt$runningReduce$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow scan(kotlinx.coroutines.flow.Flow, java.lang.Object, kotlin.jvm.functions.Function3)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function3;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow runningFold(kotlinx.coroutines.flow.Flow,java.lang.Object,kotlin.jvm.functions.Function3)>($r2, $r0, $r1);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow withIndex(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__TransformKt$withIndex$$inlined$unsafeFlow$1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 = new kotlinx.coroutines.flow.FlowKt__TransformKt$withIndex$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__TransformKt$withIndex$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow)>($r0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;
    }
}
