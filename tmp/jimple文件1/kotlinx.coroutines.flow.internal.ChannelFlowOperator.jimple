public abstract class kotlinx.coroutines.flow.internal.ChannelFlowOperator extends kotlinx.coroutines.flow.internal.ChannelFlow
{
    protected final kotlinx.coroutines.flow.Flow flow;

    public void <init>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperator r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlin.coroutines.CoroutineContext $r2;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: void <init>(kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r2, $i0, $r3);

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: kotlinx.coroutines.flow.Flow flow> = $r1;

        return;
    }

    public static final java.lang.Object access$collectWithContextUndispatched(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.flow.internal.ChannelFlowOperator $r4;

        $r4 := @parameter0: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r0 := @parameter1: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: java.lang.Object collectWithContextUndispatched(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r0, $r1, $r2);

        return $r3;
    }

    static java.lang.Object collect$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlinx.coroutines.flow.internal.ChannelFlowOperator $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        int $i0;
        kotlin.coroutines.CoroutineContext $r3, $r4;
        boolean $z0;
        java.lang.Object $r5, $r6;
        kotlin.coroutines.ContinuationInterceptor$Key $r7;
        kotlin.coroutines.CoroutineContext$Key $r8;
        kotlin.coroutines.CoroutineContext$Element $r9, $r10;
        kotlin.Unit r11;

        $r1 := @parameter0: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r2 := @parameter1: kotlinx.coroutines.flow.FlowCollector;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $i0 = $r1.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: int capacity>;

        if $i0 != -3 goto label4;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = $r1.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: kotlin.coroutines.CoroutineContext context>;

        $r4 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r4);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: java.lang.Object flowCollect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r2, $r0);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label1;

        return $r5;

     label1:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;

     label2:
        $r7 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r8 = (kotlin.coroutines.CoroutineContext$Key) $r7;

        $r9 = interfaceinvoke $r4.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r8);

        $r7 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r8 = (kotlin.coroutines.CoroutineContext$Key) $r7;

        $r10 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r8);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r9, $r10);

        if $z0 == 0 goto label4;

        $r5 = specialinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: java.lang.Object collectWithContextUndispatched(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r2, $r4, $r0);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label3;

        return $r5;

     label3:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;

     label4:
        $r5 = specialinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r2, $r0);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label5;

        return $r5;

     label5:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;
    }

    static java.lang.Object collectTo$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlinx.coroutines.flow.internal.ChannelFlowOperator $r1;
        kotlinx.coroutines.channels.ProducerScope $r2;
        kotlinx.coroutines.flow.internal.SendingCollector $r3;
        kotlinx.coroutines.channels.SendChannel $r4;
        kotlinx.coroutines.flow.FlowCollector $r5;
        java.lang.Object $r6, $r7;
        kotlin.Unit r8;

        $r1 := @parameter0: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r2 := @parameter1: kotlinx.coroutines.channels.ProducerScope;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = new kotlinx.coroutines.flow.internal.SendingCollector;

        $r4 = (kotlinx.coroutines.channels.SendChannel) $r2;

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.SendingCollector: void <init>(kotlinx.coroutines.channels.SendChannel)>($r4);

        $r5 = (kotlinx.coroutines.flow.FlowCollector) $r3;

        $r6 = virtualinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: java.lang.Object flowCollect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r5, $r0);

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label1;

        return $r6;

     label1:
        r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r8;
    }

    private final java.lang.Object collectWithContextUndispatched(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperator r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        kotlin.coroutines.CoroutineContext $r3, $r4;
        kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2 $r5;
        kotlin.jvm.functions.Function2 $r6;
        java.lang.Object $r7, $r8;
        kotlin.Unit r9;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r2 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r3 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: kotlinx.coroutines.flow.FlowCollector access$withUndispatchedContextCollector(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)>($r2, $r4);

        $r5 = new kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2;

        specialinvoke $r5.<kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2: void <init>(kotlinx.coroutines.flow.internal.ChannelFlowOperator,kotlin.coroutines.Continuation)>(r0, null);

        $r6 = (kotlin.jvm.functions.Function2) $r5;

        $r7 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: java.lang.Object withContextUndispatched$default(kotlin.coroutines.CoroutineContext,java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation,int,java.lang.Object)>($r3, $r2, null, $r6, $r1, 4, null);

        $r8 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r7 != $r8 goto label1;

        return $r7;

     label1:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperator r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.flow.FlowCollector $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r3 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowOperator: java.lang.Object collect$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator,kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r0, $r3, $r1);

        return $r2;
    }

    protected java.lang.Object collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperator r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.ProducerScope $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r3 := @parameter0: kotlinx.coroutines.channels.ProducerScope;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowOperator: java.lang.Object collectTo$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator,kotlinx.coroutines.channels.ProducerScope,kotlin.coroutines.Continuation)>(r0, $r3, $r1);

        return $r2;
    }

    protected abstract java.lang.Object flowCollect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation);

    public java.lang.String toString()
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperator r0;
        java.lang.StringBuilder $r1;
        kotlinx.coroutines.flow.Flow $r2;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperator;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: kotlinx.coroutines.flow.Flow flow>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r3 = specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
