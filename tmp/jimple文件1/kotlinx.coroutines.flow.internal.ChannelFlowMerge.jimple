public final class kotlinx.coroutines.flow.internal.ChannelFlowMerge extends kotlinx.coroutines.flow.internal.ChannelFlow
{
    private final int concurrency;
    private final kotlinx.coroutines.flow.Flow flow;

    public void <init>(kotlinx.coroutines.flow.Flow, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge r0;
        kotlinx.coroutines.flow.Flow $r1;
        int $i0, $i1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.channels.BufferOverflow $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $i1 := @parameter3: int;

        $r3 := @parameter4: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: void <init>(kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r2, $i1, $r3);

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: kotlinx.coroutines.flow.Flow flow> = $r1;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: int concurrency> = $i0;

        return;
    }

    public void <init>(kotlinx.coroutines.flow.Flow, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge r0;
        kotlinx.coroutines.flow.Flow $r1;
        int $i0, $i1, $i2, $i3;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.channels.BufferOverflow $r3;
        kotlin.jvm.internal.DefaultConstructorMarker $r4;
        kotlin.coroutines.EmptyCoroutineContext $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $i2 := @parameter3: int;

        $r3 := @parameter4: kotlinx.coroutines.channels.BufferOverflow;

        $i1 := @parameter5: int;

        $r4 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i3 = $i1 & 4;

        if $i3 == 0 goto label1;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r2 = (kotlin.coroutines.CoroutineContext) $r5;

     label1:
        $i3 = $i1 & 8;

        if $i3 == 0 goto label2;

        $i2 = -2;

     label2:
        $i1 = $i1 & 16;

        if $i1 == 0 goto label3;

        $r3 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label3:
        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: void <init>(kotlinx.coroutines.flow.Flow,int,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $i0, $r2, $i2, $r3);

        return;
    }

    protected java.lang.String additionalToStringProps()
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge r0;
        int $i0;
        java.lang.Integer $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: int concurrency>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("concurrency=", $r1);

        return $r2;
    }

    protected java.lang.Object collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge r0;
        kotlinx.coroutines.channels.ProducerScope $r1;
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlinx.coroutines.sync.Semaphore $r3;
        kotlinx.coroutines.flow.internal.SendingCollector $r4;
        kotlinx.coroutines.channels.SendChannel $r5;
        kotlin.coroutines.CoroutineContext $r6;
        kotlinx.coroutines.Job$Key $r7;
        kotlin.coroutines.CoroutineContext$Key $r8;
        kotlin.coroutines.CoroutineContext$Element $r9;
        kotlinx.coroutines.Job $r10;
        kotlinx.coroutines.flow.Flow $r11;
        kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1 $r12;
        kotlinx.coroutines.flow.FlowCollector $r13;
        java.lang.Object $r14, $r15;
        kotlin.Unit r16;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $r1 := @parameter0: kotlinx.coroutines.channels.ProducerScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: int concurrency>;

        $r3 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.sync.Semaphore Semaphore$default(int,int,int,java.lang.Object)>($i0, 0, 2, null);

        $r4 = new kotlinx.coroutines.flow.internal.SendingCollector;

        $r5 = (kotlinx.coroutines.channels.SendChannel) $r1;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.SendingCollector: void <init>(kotlinx.coroutines.channels.SendChannel)>($r5);

        $r6 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r7 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r8 = (kotlin.coroutines.CoroutineContext$Key) $r7;

        $r9 = interfaceinvoke $r6.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r8);

        $r10 = (kotlinx.coroutines.Job) $r9;

        $r11 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: kotlinx.coroutines.flow.Flow flow>;

        $r12 = new kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1;

        specialinvoke $r12.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: void <init>(kotlinx.coroutines.Job,kotlinx.coroutines.sync.Semaphore,kotlinx.coroutines.channels.ProducerScope,kotlinx.coroutines.flow.internal.SendingCollector)>($r10, $r3, $r1, $r4);

        $r13 = (kotlinx.coroutines.flow.FlowCollector) $r12;

        $r14 = interfaceinvoke $r11.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r13, $r2);

        $r15 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r14 != $r15 goto label1;

        return $r14;

     label1:
        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r16;
    }

    protected kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge r0, $r4;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0, $i1;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlinx.coroutines.flow.Flow $r3;
        kotlinx.coroutines.flow.internal.ChannelFlow $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = new kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: kotlinx.coroutines.flow.Flow flow>;

        $i1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: int concurrency>;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: void <init>(kotlinx.coroutines.flow.Flow,int,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r3, $i1, $r1, $i0, $r2);

        $r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r4;

        return $r5;
    }

    public kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge r0;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.channels.ReceiveChannel $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: kotlin.coroutines.CoroutineContext context>;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: int capacity>;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: kotlin.jvm.functions.Function2 getCollectToFun$kotlinx_coroutines_core()>();

        $r4 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: kotlinx.coroutines.channels.ReceiveChannel flowProduce(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlin.jvm.functions.Function2)>($r2, $r1, $i0, $r3);

        return $r4;
    }
}
