abstract class kotlinx.coroutines.sync.MutexImpl$LockWaiter extends kotlinx.coroutines.internal.LockFreeLinkedListNode implements kotlinx.coroutines.DisposableHandle
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater isTaken$FU;
    private volatile java.lang.Object isTaken;
    public final java.lang.Object owner;
    final kotlinx.coroutines.sync.MutexImpl this$0;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/MutexImpl$LockWaiter;", class "Ljava/lang/Object;", "isTaken");

        <kotlinx.coroutines.sync.MutexImpl$LockWaiter: java.util.concurrent.atomic.AtomicReferenceFieldUpdater isTaken$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.sync.MutexImpl, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$LockWaiter r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        kotlinx.coroutines.sync.MutexImpl $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockWaiter;

        $r3 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter1: java.lang.Object;

        r0.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: kotlinx.coroutines.sync.MutexImpl this$0> = $r3;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>();

        r0.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: java.lang.Object owner> = $r1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: java.lang.Object isTaken> = $r2;

        return;
    }

    public abstract void completeResumeLockWaiter();

    public final void dispose()
    {
        kotlinx.coroutines.sync.MutexImpl$LockWaiter r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockWaiter;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: boolean remove()>();

        return;
    }

    public final boolean take()
    {
        kotlinx.coroutines.sync.MutexImpl$LockWaiter r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Boolean $r2, $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockWaiter;

        $r1 = <kotlinx.coroutines.sync.MutexImpl$LockWaiter: java.util.concurrent.atomic.AtomicReferenceFieldUpdater isTaken$FU>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, r0, $r2, $r3);

        return $z0;
    }

    public abstract boolean tryResumeLockWaiter();
}
