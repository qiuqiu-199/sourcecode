public final class kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1 extends java.lang.Object implements kotlinx.coroutines.DisposableHandle
{
    final kotlinx.coroutines.test.TimedRunnableObsolete $node;
    final kotlinx.coroutines.test.TestCoroutineContext this$0;

    void <init>(kotlinx.coroutines.test.TestCoroutineContext, kotlinx.coroutines.test.TimedRunnableObsolete)
    {
        kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1 r0;
        kotlinx.coroutines.test.TestCoroutineContext $r1;
        kotlinx.coroutines.test.TimedRunnableObsolete $r2;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1;

        $r1 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r2 := @parameter1: kotlinx.coroutines.test.TimedRunnableObsolete;

        r0.<kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1: kotlinx.coroutines.test.TestCoroutineContext this$0> = $r1;

        r0.<kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1: kotlinx.coroutines.test.TimedRunnableObsolete $node> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void dispose()
    {
        kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1 r0;
        kotlinx.coroutines.internal.ThreadSafeHeap $r1;
        kotlinx.coroutines.test.TestCoroutineContext $r2;
        kotlinx.coroutines.test.TimedRunnableObsolete $r3;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r4;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1;

        $r2 = r0.<kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1: kotlinx.coroutines.test.TestCoroutineContext this$0>;

        $r1 = staticinvoke <kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap access$getQueue$p(kotlinx.coroutines.test.TestCoroutineContext)>($r2);

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1: kotlinx.coroutines.test.TimedRunnableObsolete $node>;

        $r4 = (kotlinx.coroutines.internal.ThreadSafeHeapNode) $r3;

        virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: boolean remove(kotlinx.coroutines.internal.ThreadSafeHeapNode)>($r4);

        return;
    }
}
