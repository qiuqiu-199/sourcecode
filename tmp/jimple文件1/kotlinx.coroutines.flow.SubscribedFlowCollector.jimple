public final class kotlinx.coroutines.flow.SubscribedFlowCollector extends java.lang.Object implements kotlinx.coroutines.flow.FlowCollector
{
    private final kotlin.jvm.functions.Function2 action;
    private final kotlinx.coroutines.flow.FlowCollector collector;

    public void <init>(kotlinx.coroutines.flow.FlowCollector, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.SubscribedFlowCollector r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.jvm.functions.Function2 $r2;

        r0 := @this: kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector> = $r1;

        r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlin.jvm.functions.Function2 action> = $r2;

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SubscribedFlowCollector r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        $r3 = interfaceinvoke $r2.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r1);

        return $r3;
    }

    public final java.lang.Object onSubscription(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SubscribedFlowCollector r0;
        kotlin.coroutines.Continuation $r1;
        boolean $z0;
        kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1 $r2;
        int $i0;
        java.lang.Object $r3, $r4, $r6;
        java.lang.IllegalStateException $r5;
        kotlinx.coroutines.flow.internal.SafeCollector $r7;
        kotlinx.coroutines.flow.FlowCollector $r8;
        kotlin.coroutines.CoroutineContext $r9;
        kotlin.jvm.functions.Function2 $r10;
        java.lang.Throwable $r11;
        kotlin.Unit r12;

        r0 := @this: kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1;

        if $z0 == 0 goto label01;

        $r2 = (kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1) $r1;

        $i0 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label>;

        $i0 = $i0 - -2147483648;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label> = $i0;

        goto label02;

     label01:
        $r2 = new kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: void <init>(kotlinx.coroutines.flow.SubscribedFlowCollector,kotlin.coroutines.Continuation)>(r0, $r1);

     label02:
        $r3 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object result>;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label>;

        if $i0 == 0 goto label07;

        if $i0 == 1 goto label04;

        if $i0 != 2 goto label03;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        goto label11;

     label03:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;

     label04:
        $r6 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$1>;

        $r7 = (kotlinx.coroutines.flow.internal.SafeCollector) $r6;

        $r6 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.SubscribedFlowCollector) $r6;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label06:
        goto label10;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r7 = new kotlinx.coroutines.flow.internal.SafeCollector;

        $r8 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        $r9 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r7.<kotlinx.coroutines.flow.internal.SafeCollector: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)>($r8, $r9);

     label08:
        $r10 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlin.jvm.functions.Function2 action>;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$0> = r0;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$1> = $r7;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label> = 1;

        $r3 = interfaceinvoke $r10.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r7, $r2);

     label09:
        if $r3 != $r4 goto label10;

        return $r4;

     label10:
        virtualinvoke $r7.<kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()>();

        $r8 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        $z0 = $r8 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector;

        if $z0 == 0 goto label12;

        r0 = (kotlinx.coroutines.flow.SubscribedFlowCollector) $r8;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$0> = null;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$1> = null;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label> = 2;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: java.lang.Object onSubscription(kotlin.coroutines.Continuation)>($r2);

        if $r3 != $r4 goto label11;

        return $r4;

     label11:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;

     label12:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;

     label13:
        $r11 := @caughtexception;

        virtualinvoke $r7.<kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()>();

        throw $r11;

        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
    }
}
