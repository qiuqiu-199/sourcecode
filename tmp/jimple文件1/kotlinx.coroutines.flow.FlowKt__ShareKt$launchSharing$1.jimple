final class kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final java.lang.Object $initialValue;
    final kotlinx.coroutines.flow.MutableSharedFlow $shared;
    final kotlinx.coroutines.flow.SharingStarted $started;
    final kotlinx.coroutines.flow.Flow $upstream;
    int label;

    void <init>(kotlinx.coroutines.flow.SharingStarted, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.flow.MutableSharedFlow $r2;
        java.lang.Object $r3;
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.flow.SharingStarted $r5;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r5 := @parameter0: kotlinx.coroutines.flow.SharingStarted;

        $r1 := @parameter1: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter2: kotlinx.coroutines.flow.MutableSharedFlow;

        $r3 := @parameter3: java.lang.Object;

        $r4 := @parameter4: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started> = $r5;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared> = $r2;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object $initialValue> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0, $r6;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.SharingStarted $r2;
        kotlinx.coroutines.flow.Flow $r3;
        kotlinx.coroutines.flow.MutableSharedFlow $r4;
        java.lang.Object $r5;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r5 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r6 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r2 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r3 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r5 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object $initialValue>;

        specialinvoke $r6.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: void <init>(kotlinx.coroutines.flow.SharingStarted,kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,java.lang.Object,kotlin.coroutines.Continuation)>($r2, $r3, $r4, $r5, $r1);

        $r1 = (kotlin.coroutines.Continuation) $r6;

        return $r1;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        kotlinx.coroutines.flow.SharingStarted $r4, $r6;
        kotlinx.coroutines.flow.SharingStarted$Companion $r5;
        kotlinx.coroutines.flow.Flow $r7, $r15;
        kotlinx.coroutines.flow.MutableSharedFlow $r8;
        kotlinx.coroutines.flow.FlowCollector $r9;
        kotlin.coroutines.Continuation $r10;
        kotlinx.coroutines.flow.StateFlow $r11;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1 $r12;
        kotlin.jvm.functions.Function2 $r13;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 $r14;
        kotlin.Unit r16;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label>;

        if $i0 == 0 goto label4;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label3;

        if $i0 != 4 goto label1;

        goto label3;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label6;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label8;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r5 = <kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.SharingStarted$Companion Companion>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted getEagerly()>();

        if $r4 != $r6 goto label5;

        $r7 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r8 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r9 = (kotlinx.coroutines.flow.FlowCollector) $r8;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 1;

        $r1 = interfaceinvoke $r7.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r9, $r10);

        if $r1 != $r2 goto label8;

        return $r2;

     label5:
        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r5 = <kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.SharingStarted$Companion Companion>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted getLazily()>();

        if $r4 != $r6 goto label7;

        $r8 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r11 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableSharedFlow: kotlinx.coroutines.flow.StateFlow getSubscriptionCount()>();

        $r7 = (kotlinx.coroutines.flow.Flow) $r11;

        $r12 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1;

        specialinvoke $r12.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1: void <init>(kotlin.coroutines.Continuation)>(null);

        $r13 = (kotlin.jvm.functions.Function2) $r12;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 2;

        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object first(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r7, $r13, $r10);

        if $r1 != $r2 goto label6;

        return $r2;

     label6:
        $r7 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r8 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r9 = (kotlinx.coroutines.flow.FlowCollector) $r8;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 3;

        $r1 = interfaceinvoke $r7.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r9, $r10);

        if $r1 != $r2 goto label8;

        return $r2;

     label7:
        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r8 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r11 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableSharedFlow: kotlinx.coroutines.flow.StateFlow getSubscriptionCount()>();

        $r7 = interfaceinvoke $r4.<kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.Flow command(kotlinx.coroutines.flow.StateFlow)>($r11);

        $r7 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow distinctUntilChanged(kotlinx.coroutines.flow.Flow)>($r7);

        $r14 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r15 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r8 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object $initialValue>;

        specialinvoke $r14.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,java.lang.Object,kotlin.coroutines.Continuation)>($r15, $r8, $r1, null);

        $r13 = (kotlin.jvm.functions.Function2) $r14;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 4;

        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object collectLatest(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r7, $r13, $r10);

        if $r1 != $r2 goto label8;

        return $r2;

     label8:
        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r16;
    }
}
