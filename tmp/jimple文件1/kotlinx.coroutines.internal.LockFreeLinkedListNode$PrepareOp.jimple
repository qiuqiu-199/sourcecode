public final class kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp extends kotlinx.coroutines.internal.OpDescriptor
{
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode affected;
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc;
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode next;

    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r3 := @parameter2: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc;

        specialinvoke r0.<kotlinx.coroutines.internal.OpDescriptor: void <init>()>();

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode affected> = $r1;

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode next> = $r2;

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc> = $r3;

        return;
    }

    public final void finishPrepare()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: void finishPrepare(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(r0);

        return;
    }

    public kotlinx.coroutines.internal.AtomicOp getAtomicOp()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp r0;
        kotlinx.coroutines.internal.AtomicOp $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        return $r1;
    }

    public java.lang.Object perform(java.lang.Object)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2, $r6;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3, $r7;
        java.lang.AssertionError $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r5;
        kotlinx.coroutines.internal.Removed $r8;
        kotlinx.coroutines.internal.AtomicOp $r9;
        java.lang.NullPointerException $r10;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r2 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label04;

        $r3 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode affected>;

        if $r2 != $r3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label04:
        if $r2 == null goto label12;

        $r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

        $r5 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        $r2 = virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: java.lang.Object onPrepare(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(r0);

        $r6 = <kotlinx.coroutines.internal.LockFreeLinkedList_commonKt: java.lang.Object REMOVE_PREPARED>;

        if $r2 != $r6 goto label06;

        $r7 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode next>;

        $r8 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed access$removed(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r7);

        $r1 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, r0, $r8);

        if $z0 == 0 goto label05;

        $r5 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: void onRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r3);

        staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode access$correctPrev(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.OpDescriptor)>($r7, null);

     label05:
        $r2 = <kotlinx.coroutines.internal.LockFreeLinkedList_commonKt: java.lang.Object REMOVE_PREPARED>;

        return $r2;

     label06:
        if $r2 == null goto label07;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        $r2 = virtualinvoke $r9.<kotlinx.coroutines.internal.AtomicOp: java.lang.Object decide(java.lang.Object)>($r2);

        goto label08;

     label07:
        $r9 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        $r2 = virtualinvoke $r9.<kotlinx.coroutines.internal.AtomicOp: java.lang.Object getConsensus()>();

     label08:
        $r6 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object NO_DECISION>;

        if $r2 != $r6 goto label09;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        goto label11;

     label09:
        if $r2 != null goto label10;

        $r5 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        $r7 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode next>;

        $r2 = virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: java.lang.Object updatedNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r3, $r7);

        goto label11;

     label10:
        $r2 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode next>;

     label11:
        $r1 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, r0, $r2);

        return null;

     label12:
        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }");

        throw $r10;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp r0;
        java.lang.StringBuilder $r1;
        kotlinx.coroutines.internal.AtomicOp $r2;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PrepareOp(op=");

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
