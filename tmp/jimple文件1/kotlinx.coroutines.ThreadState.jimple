final class kotlinx.coroutines.ThreadState extends java.lang.Object implements kotlin.jvm.functions.Function1
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _state$FU;
    private volatile int _state;
    private kotlinx.coroutines.DisposableHandle cancelHandle;
    private final kotlinx.coroutines.Job job;
    private final java.lang.Thread targetThread;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/ThreadState;", "_state");

        <kotlinx.coroutines.ThreadState: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _state$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.ThreadState r0;
        java.lang.Thread $r1;
        kotlinx.coroutines.Job $r2;

        r0 := @this: kotlinx.coroutines.ThreadState;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.ThreadState: kotlinx.coroutines.Job job> = $r2;

        r0.<kotlinx.coroutines.ThreadState: int _state> = 0;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<kotlinx.coroutines.ThreadState: java.lang.Thread targetThread> = $r1;

        return;
    }

    private final java.lang.Void invalidState(int)
    {
        kotlinx.coroutines.ThreadState r0;
        int $i0;
        java.lang.Integer $r1;
        java.lang.String $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.ThreadState;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r1);

        $r3 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        $r4 = (java.lang.Throwable) $r3;

        throw $r4;
    }

    public final void clearInterrupt()
    {
        kotlinx.coroutines.ThreadState r0;
        boolean $z0;
        int $i0;
        kotlin.KotlinNothingValueException $r1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        kotlinx.coroutines.DisposableHandle $r3;

        r0 := @this: kotlinx.coroutines.ThreadState;

     label1:
        $i0 = r0.<kotlinx.coroutines.ThreadState: int _state>;

        if $i0 == 0 goto label3;

        if $i0 == 2 goto label1;

        if $i0 != 3 goto label2;

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        return;

     label2:
        specialinvoke r0.<kotlinx.coroutines.ThreadState: java.lang.Void invalidState(int)>($i0);

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;

     label3:
        $r2 = <kotlinx.coroutines.ThreadState: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _state$FU>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, 1);

        if $z0 == 0 goto label1;

        $r3 = r0.<kotlinx.coroutines.ThreadState: kotlinx.coroutines.DisposableHandle cancelHandle>;

        if $r3 != null goto label4;

        return;

     label4:
        interfaceinvoke $r3.<kotlinx.coroutines.DisposableHandle: void dispose()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlinx.coroutines.ThreadState r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        kotlin.Unit r3;

        r0 := @this: kotlinx.coroutines.ThreadState;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.ThreadState: void invoke(java.lang.Throwable)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public void invoke(java.lang.Throwable)
    {
        kotlinx.coroutines.ThreadState r0;
        boolean $z0;
        java.lang.Throwable $r1;
        int $i0;
        kotlin.KotlinNothingValueException $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r3;
        java.lang.Thread $r4;

        r0 := @this: kotlinx.coroutines.ThreadState;

        $r1 := @parameter0: java.lang.Throwable;

     label1:
        $i0 = r0.<kotlinx.coroutines.ThreadState: int _state>;

        if $i0 == 0 goto label3;

        if $i0 == 1 goto label4;

        if $i0 == 2 goto label4;

        if $i0 != 3 goto label2;

        return;

     label2:
        specialinvoke r0.<kotlinx.coroutines.ThreadState: java.lang.Void invalidState(int)>($i0);

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;

     label3:
        $r3 = <kotlinx.coroutines.ThreadState: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _state$FU>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, 2);

        if $z0 == 0 goto label1;

        $r4 = r0.<kotlinx.coroutines.ThreadState: java.lang.Thread targetThread>;

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

        r0.<kotlinx.coroutines.ThreadState: int _state> = 3;

     label4:
        return;
    }

    public final void setup()
    {
        kotlinx.coroutines.ThreadState r0;
        kotlinx.coroutines.Job $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.DisposableHandle $r3;
        int $i0;
        kotlin.KotlinNothingValueException $r4;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.ThreadState;

        $r1 = r0.<kotlinx.coroutines.ThreadState: kotlinx.coroutines.Job job>;

        $r2 = (kotlin.jvm.functions.Function1) r0;

        $r3 = interfaceinvoke $r1.<kotlinx.coroutines.Job: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>(1, 1, $r2);

        r0.<kotlinx.coroutines.ThreadState: kotlinx.coroutines.DisposableHandle cancelHandle> = $r3;

     label1:
        $i0 = r0.<kotlinx.coroutines.ThreadState: int _state>;

        if $i0 == 0 goto label3;

        if $i0 == 2 goto label4;

        if $i0 != 3 goto label2;

        return;

     label2:
        specialinvoke r0.<kotlinx.coroutines.ThreadState: java.lang.Void invalidState(int)>($i0);

        $r4 = new kotlin.KotlinNothingValueException;

        specialinvoke $r4.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r4;

     label3:
        $r5 = <kotlinx.coroutines.ThreadState: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _state$FU>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, 0);

        if $z0 == 0 goto label1;

     label4:
        return;
    }
}
