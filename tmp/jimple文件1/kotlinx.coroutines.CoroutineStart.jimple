public final enum class kotlinx.coroutines.CoroutineStart extends java.lang.Enum
{
    private static final kotlinx.coroutines.CoroutineStart[] $VALUES;
    public static final enum kotlinx.coroutines.CoroutineStart ATOMIC;
    public static final enum kotlinx.coroutines.CoroutineStart DEFAULT;
    public static final enum kotlinx.coroutines.CoroutineStart LAZY;
    public static final enum kotlinx.coroutines.CoroutineStart UNDISPATCHED;

    private static final kotlinx.coroutines.CoroutineStart[] $values()
    {
        kotlinx.coroutines.CoroutineStart[] $r0;
        kotlinx.coroutines.CoroutineStart $r1;

        $r0 = newarray (kotlinx.coroutines.CoroutineStart)[4];

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT>;

        $r0[0] = $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY>;

        $r0[1] = $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>;

        $r0[2] = $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED>;

        $r0[3] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        kotlinx.coroutines.CoroutineStart[] $r0;
        kotlinx.coroutines.CoroutineStart $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("DEFAULT", 0);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT> = $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("LAZY", 1);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY> = $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("ATOMIC", 2);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC> = $r1;

        $r1 = new kotlinx.coroutines.CoroutineStart;

        specialinvoke $r1.<kotlinx.coroutines.CoroutineStart: void <init>(java.lang.String,int)>("UNDISPATCHED", 3);

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED> = $r1;

        $r0 = staticinvoke <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $values()>();

        <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        kotlinx.coroutines.CoroutineStart r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static void isLazy$annotations()
    {
        return;
    }

    public static kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
    {
        java.lang.Enum $r0;
        java.lang.String $r1;
        kotlinx.coroutines.CoroutineStart $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/CoroutineStart;", $r1);

        $r2 = (kotlinx.coroutines.CoroutineStart) $r0;

        return $r2;
    }

    public static kotlinx.coroutines.CoroutineStart[] values()
    {
        java.lang.Object $r0;
        kotlinx.coroutines.CoroutineStart[] $r1;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (kotlinx.coroutines.CoroutineStart[]) $r0;

        return $r1;
    }

    public final void invoke(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineStart r0;
        kotlin.coroutines.Continuation $r1;
        int $i0;
        kotlin.jvm.functions.Function1 $r2;
        int[] $r3;
        kotlin.NoWhenBranchMatchedException $r4;

        r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r2 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = <kotlinx.coroutines.CoroutineStart$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.CoroutineStart: int ordinal()>();

        $i0 = $r3[$i0];

        if $i0 == 1 goto label4;

        if $i0 == 2 goto label3;

        if $i0 == 3 goto label2;

        if $i0 != 4 goto label1;

        return;

     label1:
        $r4 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r4.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r4;

     label2:
        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r2, $r1);

        return;

     label3:
        staticinvoke <kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r2, $r1);

        return;

     label4:
        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r2, $r1);

        return;
    }

    public final void invoke(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineStart r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlin.jvm.functions.Function2 $r3;
        int[] $r4;
        kotlin.NoWhenBranchMatchedException $r5;

        r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r3 := @parameter0: kotlin.jvm.functions.Function2;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r4 = <kotlinx.coroutines.CoroutineStart$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.CoroutineStart: int ordinal()>();

        $i0 = $r4[$i0];

        if $i0 == 1 goto label4;

        if $i0 == 2 goto label3;

        if $i0 == 3 goto label2;

        if $i0 != 4 goto label1;

        return;

     label1:
        $r5 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r5.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r5;

     label2:
        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r1, $r2);

        return;

     label3:
        staticinvoke <kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r1, $r2);

        return;

     label4:
        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable$default(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, $r1, $r2, null, 4, null);

        return;
    }

    public final boolean isLazy()
    {
        kotlinx.coroutines.CoroutineStart r0, $r1;

        r0 := @this: kotlinx.coroutines.CoroutineStart;

        $r1 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY>;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
}
