public abstract class kotlinx.coroutines.channels.AbstractChannel extends kotlinx.coroutines.channels.AbstractSendChannel implements kotlinx.coroutines.channels.Channel
{

    public void <init>(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractSendChannel: void <init>(kotlin.jvm.functions.Function1)>($r1);

        return;
    }

    public static final boolean access$enqueueReceive(kotlinx.coroutines.channels.AbstractChannel, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.Receive $r0;
        boolean $z0;
        kotlinx.coroutines.channels.AbstractChannel $r1;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $r0 := @parameter1: kotlinx.coroutines.channels.Receive;

        $z0 = specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceive(kotlinx.coroutines.channels.Receive)>($r0);

        return $z0;
    }

    public static final java.lang.Object access$receiveSuspend(kotlinx.coroutines.channels.AbstractChannel, int, kotlin.coroutines.Continuation)
    {
        int $i0;
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.AbstractChannel $r2;

        $r2 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $r1 = specialinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object receiveSuspend(int,kotlin.coroutines.Continuation)>($i0, $r0);

        return $r1;
    }

    public static final void access$registerSelectReceiveMode(kotlinx.coroutines.channels.AbstractChannel, kotlinx.coroutines.selects.SelectInstance, int, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.selects.SelectInstance $r1;
        int $i0;
        kotlin.jvm.functions.Function2 $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.functions.Function2;

        specialinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void registerSelectReceiveMode(kotlinx.coroutines.selects.SelectInstance,int,kotlin.jvm.functions.Function2)>($r1, $i0, $r2);

        return;
    }

    public static final void access$removeReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel, kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlinx.coroutines.channels.Receive $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $r2 := @parameter2: kotlinx.coroutines.channels.Receive;

        specialinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void removeReceiveOnCancel(kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)>($r1, $r2);

        return;
    }

    private final boolean enqueueReceive(kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;
        kotlinx.coroutines.channels.Receive $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.Receive;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void onReceiveEnqueued()>();

     label1:
        return $z0;
    }

    private final boolean enqueueReceiveSelect(kotlinx.coroutines.selects.SelectInstance, kotlin.jvm.functions.Function2, int)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.selects.SelectInstance $r1;
        int $i0;
        boolean $z0;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.channels.AbstractChannel$ReceiveSelect $r3;
        kotlinx.coroutines.channels.Receive $r4;
        kotlinx.coroutines.DisposableHandle $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $i0 := @parameter2: int;

        $r3 = new kotlinx.coroutines.channels.AbstractChannel$ReceiveSelect;

        specialinvoke $r3.<kotlinx.coroutines.channels.AbstractChannel$ReceiveSelect: void <init>(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.selects.SelectInstance,kotlin.jvm.functions.Function2,int)>(r0, $r1, $r2, $i0);

        $r4 = (kotlinx.coroutines.channels.Receive) $r3;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceive(kotlinx.coroutines.channels.Receive)>($r4);

        if $z0 == 0 goto label1;

        $r5 = (kotlinx.coroutines.DisposableHandle) $r3;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void disposeOnSelect(kotlinx.coroutines.DisposableHandle)>($r5);

     label1:
        return $z0;
    }

    private final java.lang.Object receiveSuspend(int, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlin.coroutines.Continuation $r1, $r2;
        int $i0;
        kotlinx.coroutines.CancellableContinuationImpl $r3;
        kotlinx.coroutines.CancellableContinuation $r4;
        kotlin.jvm.functions.Function1 $r5;
        kotlinx.coroutines.channels.AbstractChannel$ReceiveElement $r6;
        kotlinx.coroutines.channels.AbstractChannel$ReceiveElementWithUndeliveredHandler $r7;
        kotlinx.coroutines.channels.Receive $r8;
        boolean $z0;
        java.lang.Object $r9, $r12;
        kotlinx.coroutines.channels.Closed $r10;
        kotlinx.coroutines.internal.Symbol $r11;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r2);

        $r4 = (kotlinx.coroutines.CancellableContinuation) $r3;

        $r5 = r0.<kotlinx.coroutines.channels.AbstractChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r5 != null goto label1;

        $r6 = new kotlinx.coroutines.channels.AbstractChannel$ReceiveElement;

        specialinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$ReceiveElement: void <init>(kotlinx.coroutines.CancellableContinuation,int)>($r4, $i0);

        goto label2;

     label1:
        $r7 = new kotlinx.coroutines.channels.AbstractChannel$ReceiveElementWithUndeliveredHandler;

        $r5 = r0.<kotlinx.coroutines.channels.AbstractChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        specialinvoke $r7.<kotlinx.coroutines.channels.AbstractChannel$ReceiveElementWithUndeliveredHandler: void <init>(kotlinx.coroutines.CancellableContinuation,int,kotlin.jvm.functions.Function1)>($r4, $i0, $r5);

        $r6 = (kotlinx.coroutines.channels.AbstractChannel$ReceiveElement) $r7;

     label2:
        $r8 = (kotlinx.coroutines.channels.Receive) $r6;

        $z0 = staticinvoke <kotlinx.coroutines.channels.AbstractChannel: boolean access$enqueueReceive(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)>(r0, $r8);

        if $z0 == 0 goto label3;

        staticinvoke <kotlinx.coroutines.channels.AbstractChannel: void access$removeReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)>(r0, $r4, $r8);

        goto label5;

     label3:
        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        $z0 = $r9 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label4;

        $r10 = (kotlinx.coroutines.channels.Closed) $r9;

        virtualinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$ReceiveElement: void resumeReceiveClosed(kotlinx.coroutines.channels.Closed)>($r10);

        goto label5;

     label4:
        $r11 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r9 == $r11 goto label2;

        $r12 = virtualinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$ReceiveElement: java.lang.Object resumeValue(java.lang.Object)>($r9);

        $r5 = virtualinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$ReceiveElement: kotlin.jvm.functions.Function1 resumeOnCancellationFun(java.lang.Object)>($r9);

        interfaceinvoke $r4.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r12, $r5);

     label5:
        $r9 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r9 != $r12 goto label6;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label6:
        return $r9;
    }

    private final void registerSelectReceiveMode(kotlinx.coroutines.selects.SelectInstance, int, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.selects.SelectInstance $r1;
        int $i0;
        kotlin.jvm.functions.Function2 $r2;
        boolean $z0;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.internal.Symbol $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

     label1:
        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: boolean isSelected()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isEmptyImpl()>();

        if $z0 == 0 goto label3;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceiveSelect(kotlinx.coroutines.selects.SelectInstance,kotlin.jvm.functions.Function2,int)>($r1, $r2, $i0);

        if $z0 == 0 goto label1;

        return;

     label3:
        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollSelectInternal(kotlinx.coroutines.selects.SelectInstance)>($r1);

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

        if $r3 != $r4 goto label4;

        return;

     label4:
        $r5 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r3 != $r5 goto label5;

        goto label1;

     label5:
        $r4 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

        if $r3 != $r4 goto label6;

        goto label1;

     label6:
        specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void tryStartBlockUnintercepted(kotlin.jvm.functions.Function2,kotlinx.coroutines.selects.SelectInstance,int,java.lang.Object)>($r2, $r1, $i0, $r3);

        goto label1;
    }

    private final void removeReceiveOnCancel(kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlinx.coroutines.channels.Receive $r2;
        kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel $r3;
        kotlinx.coroutines.CancelHandlerBase $r4;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r2 := @parameter1: kotlinx.coroutines.channels.Receive;

        $r3 = new kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel;

        specialinvoke $r3.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: void <init>(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)>(r0, $r2);

        $r4 = (kotlinx.coroutines.CancelHandlerBase) $r3;

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        interfaceinvoke $r1.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r5);

        return;
    }

    private final void tryStartBlockUnintercepted(kotlin.jvm.functions.Function2, kotlinx.coroutines.selects.SelectInstance, int, java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.selects.SelectInstance $r2;
        int $i0;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.ChannelResult$Companion $r4;
        kotlinx.coroutines.channels.Closed $r5;
        java.lang.Throwable $r6;
        kotlinx.coroutines.channels.ChannelResult $r7;
        kotlin.coroutines.Continuation $r8;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.Object;

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label4;

        if $i0 == 0 goto label3;

        if $i0 == 1 goto label1;

        return;

     label1:
        $z0 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r5 = (kotlinx.coroutines.channels.Closed) $r3;

        $r6 = $r5.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        $r3 = virtualinvoke $r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r6);

        $r7 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r3);

        $r8 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.Continuation getCompletion()>();

        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r7, $r8);

        return;

     label3:
        $r5 = (kotlinx.coroutines.channels.Closed) $r3;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r6 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r6);

        throw $r6;

     label4:
        if $i0 != 1 goto label7;

        $r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        if $z0 == 0 goto label5;

        $r5 = (kotlinx.coroutines.channels.Closed) $r3;

        $r6 = $r5.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        $r3 = virtualinvoke $r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r6);

        goto label6;

     label5:
        $r3 = virtualinvoke $r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r3);

     label6:
        $r7 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r3);

        $r8 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.Continuation getCompletion()>();

        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r7, $r8);

        return;

     label7:
        $r8 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.Continuation getCompletion()>();

        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r3, $r8);

        return;
    }

    public void cancel()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.Channel $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = (kotlinx.coroutines.channels.Channel) r0;

        staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: void cancel(kotlinx.coroutines.channels.Channel)>($r1);

        return;
    }

    public final void cancel(java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        java.util.concurrent.CancellationException $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        if $r1 != null goto label2;

        $r1 = new java.util.concurrent.CancellationException;

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>(r0);

        $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r2, " was cancelled");

        specialinvoke $r1.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>($r2);

     label2:
        $r3 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean cancelInternal$kotlinx_coroutines_core(java.lang.Throwable)>($r3);

        return;
    }

    public final boolean cancel(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean cancelInternal$kotlinx_coroutines_core(java.lang.Throwable)>($r1);

        return $z0;
    }

    public final boolean cancelInternal$kotlinx_coroutines_core(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean close(java.lang.Throwable)>($r1);

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void onCancelIdempotent(boolean)>($z0);

        return $z0;
    }

    protected final kotlinx.coroutines.channels.AbstractChannel$TryPollDesc describeTryPoll()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = new kotlinx.coroutines.channels.AbstractChannel$TryPollDesc;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

        specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel$TryPollDesc: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListHead)>($r2);

        return $r1;
    }

    protected boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.Receive $r1;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3, $r4, $r5;
        kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1 $r6;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp $r7;
        int $i0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.Receive;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferAlwaysEmpty()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

        $r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

     label1:
        $r4 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = $r4 instanceof kotlinx.coroutines.channels.Send;

        $z0 = $z0 ^ 1;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r5 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r5, $r3);

        if $z0 == 0 goto label1;

        goto label6;

     label3:
        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

        $r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

        $r6 = new kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1;

        $r4 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        specialinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.channels.AbstractChannel)>($r4, r0);

        $r7 = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) $r6;

     label4:
        $r5 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = $r5 instanceof kotlinx.coroutines.channels.Send;

        $z0 = $z0 ^ 1;

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $i0 = virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeLinkedListNode: int tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)>($r4, $r3, $r7);

        if $i0 == 1 goto label6;

        if $i0 == 2 goto label7;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    protected final boolean getHasReceiveOrClosed()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListHead: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>();

        $z0 = $r2 instanceof kotlinx.coroutines.channels.ReceiveOrClosed;

        return $z0;
    }

    public final kotlinx.coroutines.selects.SelectClause1 getOnReceive()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.AbstractChannel$onReceive$1 $r1;
        kotlinx.coroutines.selects.SelectClause1 $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = new kotlinx.coroutines.channels.AbstractChannel$onReceive$1;

        specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel$onReceive$1: void <init>(kotlinx.coroutines.channels.AbstractChannel)>(r0);

        $r2 = (kotlinx.coroutines.selects.SelectClause1) $r1;

        return $r2;
    }

    public final kotlinx.coroutines.selects.SelectClause1 getOnReceiveCatching()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.AbstractChannel$onReceiveCatching$1 $r1;
        kotlinx.coroutines.selects.SelectClause1 $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = new kotlinx.coroutines.channels.AbstractChannel$onReceiveCatching$1;

        specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel$onReceiveCatching$1: void <init>(kotlinx.coroutines.channels.AbstractChannel)>(r0);

        $r2 = (kotlinx.coroutines.selects.SelectClause1) $r1;

        return $r2;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceiveOrNull()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.selects.SelectClause1 $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r2 = (kotlinx.coroutines.channels.Channel) r0;

        $r1 = staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: kotlinx.coroutines.selects.SelectClause1 getOnReceiveOrNull(kotlinx.coroutines.channels.Channel)>($r2);

        return $r1;
    }

    protected abstract boolean isBufferAlwaysEmpty();

    protected abstract boolean isBufferEmpty();

    public boolean isClosedForReceive()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.Closed $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEmpty()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isEmptyImpl()>();

        return $z0;
    }

    protected final boolean isEmptyImpl()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListHead: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>();

        $z0 = $r2 instanceof kotlinx.coroutines.channels.Send;

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final kotlinx.coroutines.channels.ChannelIterator iterator()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r1;
        kotlinx.coroutines.channels.ChannelIterator $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = new kotlinx.coroutines.channels.AbstractChannel$Itr;

        specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel$Itr: void <init>(kotlinx.coroutines.channels.AbstractChannel)>(r0);

        $r2 = (kotlinx.coroutines.channels.ChannelIterator) $r1;

        return $r2;
    }

    protected void onCancelIdempotent(boolean)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;
        kotlinx.coroutines.channels.Closed $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3;
        java.lang.AssertionError $r4;
        kotlinx.coroutines.channels.Send $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

        if $r1 == null goto label6;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object constructor-impl$default(java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

     label1:
        $r3 = virtualinvoke $r1.<kotlinx.coroutines.channels.Closed: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = $r3 instanceof kotlinx.coroutines.internal.LockFreeLinkedListHead;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void onCancelIdempotentList-w-w6eGU(java.lang.Object,kotlinx.coroutines.channels.Closed)>($r2, $r1);

        return;

     label2:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Send;

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean remove()>();

        if $z0 != 0 goto label5;

        virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpRemove()>();

        goto label1;

     label5:
        $r5 = (kotlinx.coroutines.channels.Send) $r3;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object plus-FjFbRPM(java.lang.Object,java.lang.Object)>($r2, $r5);

        goto label1;

     label6:
        $r6 = new java.lang.IllegalStateException;

        $r7 = "Cannot happen";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;
    }

    protected void onCancelIdempotentList-w-w6eGU(java.lang.Object, kotlinx.coroutines.channels.Closed)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        int $i0, $i1;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.Closed $r2;
        boolean $z0;
        kotlinx.coroutines.channels.Send $r3;
        java.util.ArrayList $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.channels.Closed;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = $r1 instanceof java.util.ArrayList;

        if $z0 != 0 goto label2;

        $r3 = (kotlinx.coroutines.channels.Send) $r1;

        virtualinvoke $r3.<kotlinx.coroutines.channels.Send: void resumeSendClosed(kotlinx.coroutines.channels.Closed)>($r2);

        return;

     label2:
        if $r1 == null goto label6;

        $r4 = (java.util.ArrayList) $r1;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i1 = $i0 + -1;

        if $i1 < 0 goto label5;

     label3:
        $i0 = $i1 + -1;

        $r1 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r3 = (kotlinx.coroutines.channels.Send) $r1;

        virtualinvoke $r3.<kotlinx.coroutines.channels.Send: void resumeSendClosed(kotlinx.coroutines.channels.Closed)>($r2);

        if $i0 >= 0 goto label4;

        return;

     label4:
        $i1 = $i0;

        goto label3;

     label5:
        return;

     label6:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.util.ArrayList<E of kotlinx.coroutines.internal.InlineList>{ kotlin.collections.TypeAliasesKt.ArrayList<E of kotlinx.coroutines.internal.InlineList> }");

        throw $r5;
    }

    protected void onReceiveDequeued()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        return;
    }

    protected void onReceiveEnqueued()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        return;
    }

    public java.lang.Object poll()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r2 = (kotlinx.coroutines.channels.Channel) r0;

        $r1 = staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: java.lang.Object poll(kotlinx.coroutines.channels.Channel)>($r2);

        return $r1;
    }

    protected java.lang.Object pollInternal()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.channels.Send $r1;
        kotlinx.coroutines.internal.Symbol $r2, $r3;
        boolean $z0;
        java.lang.AssertionError $r4;
        java.lang.Object $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

     label1:
        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.Send takeFirstSendOrPeekClosed()>();

        if $r1 != null goto label2;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        return $r2;

     label2:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.Send: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(null);

        if $r2 == null goto label7;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label6;

        $r3 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r2 != $r3 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label6:
        virtualinvoke $r1.<kotlinx.coroutines.channels.Send: void completeResumeSend()>();

        $r5 = virtualinvoke $r1.<kotlinx.coroutines.channels.Send: java.lang.Object getPollResult()>();

        return $r5;

     label7:
        virtualinvoke $r1.<kotlinx.coroutines.channels.Send: void undeliveredElement()>();

        goto label1;
    }

    protected java.lang.Object pollSelectInternal(kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlinx.coroutines.selects.SelectInstance $r1;
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc $r2;
        kotlinx.coroutines.internal.AtomicDesc $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.channels.Send $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.AbstractChannel$TryPollDesc describeTryPoll()>();

        $r3 = (kotlinx.coroutines.internal.AtomicDesc) $r2;

        $r4 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: java.lang.Object performAtomicTrySelect(kotlinx.coroutines.internal.AtomicDesc)>($r3);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel$TryPollDesc: java.lang.Object getResult()>();

        $r5 = (kotlinx.coroutines.channels.Send) $r4;

        virtualinvoke $r5.<kotlinx.coroutines.channels.Send: void completeResumeSend()>();

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel$TryPollDesc: java.lang.Object getResult()>();

        $r5 = (kotlinx.coroutines.channels.Send) $r4;

        $r4 = virtualinvoke $r5.<kotlinx.coroutines.channels.Send: java.lang.Object getPollResult()>();

        return $r4;
    }

    public final java.lang.Object receive(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        $r3 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r2 == $r3 goto label1;

        $z0 = $r2 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 != 0 goto label1;

        return $r2;

     label1:
        $r2 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object receiveSuspend(int,kotlin.coroutines.Continuation)>(0, $r1);

        return $r2;
    }

    public final java.lang.Object receiveCatching-JP2dKIU(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        kotlin.coroutines.Continuation $r1;
        boolean $z0;
        kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1 $r2;
        int $i0;
        java.lang.Object $r3, $r4, $r10;
        java.lang.IllegalStateException $r5;
        kotlinx.coroutines.internal.Symbol $r6;
        kotlinx.coroutines.channels.ChannelResult$Companion $r7;
        kotlinx.coroutines.channels.Closed $r8;
        java.lang.Throwable $r9;
        kotlinx.coroutines.channels.ChannelResult $r11;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1) $r1;

        $i0 = $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: int label>;

        $i0 = $i0 - -2147483648;

        $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: int label> = $i0;

        goto label2;

     label1:
        $r2 = new kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1;

        specialinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: void <init>(kotlinx.coroutines.channels.AbstractChannel,kotlin.coroutines.Continuation)>(r0, $r1);

     label2:
        $r3 = $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: java.lang.Object result>;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: int label>;

        if $i0 == 0 goto label4;

        if $i0 != 1 goto label3;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        goto label7;

     label3:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        $r6 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r3 == $r6 goto label6;

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label5;

        $r7 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r8 = (kotlinx.coroutines.channels.Closed) $r3;

        $r9 = $r8.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        $r4 = virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r9);

        return $r4;

     label5:
        $r7 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r4 = virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r3);

        return $r4;

     label6:
        $r2.<kotlinx.coroutines.channels.AbstractChannel$receiveCatching$1: int label> = 1;

        $r10 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object receiveSuspend(int,kotlin.coroutines.Continuation)>(1, $r2);

        $r3 = $r10;

        if $r10 != $r4 goto label7;

        return $r4;

     label7:
        $r11 = (kotlinx.coroutines.channels.ChannelResult) $r3;

        $r4 = virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelResult: java.lang.Object unbox-impl()>();

        return $r4;
    }

    public java.lang.Object receiveOrNull(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.Channel $r3;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r2 := @parameter0: kotlin.coroutines.Continuation;

        $r3 = (kotlinx.coroutines.channels.Channel) r0;

        $r1 = staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: java.lang.Object receiveOrNull(kotlinx.coroutines.channels.Channel,kotlin.coroutines.Continuation)>($r3, $r2);

        return $r1;
    }

    protected kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        boolean $z0;
        kotlinx.coroutines.channels.ReceiveOrClosed $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()>();

        if $r1 == null goto label1;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void onReceiveDequeued()>();

     label1:
        return $r1;
    }

    public final java.lang.Object tryReceive-PtdJZtk()
    {
        kotlinx.coroutines.channels.AbstractChannel r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        kotlinx.coroutines.channels.ChannelResult$Companion $r3;
        boolean $z0;
        kotlinx.coroutines.channels.Closed $r4;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r1 != $r2 goto label1;

        $r3 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r1 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()>();

        return $r1;

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label2;

        $r3 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r4 = (kotlinx.coroutines.channels.Closed) $r1;

        $r5 = $r4.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        $r1 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r5);

        return $r1;

     label2:
        $r3 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r1 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r1);

        return $r1;
    }
}
