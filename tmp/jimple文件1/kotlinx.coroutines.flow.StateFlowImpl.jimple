final class kotlinx.coroutines.flow.StateFlowImpl extends kotlinx.coroutines.flow.internal.AbstractSharedFlow implements kotlinx.coroutines.flow.MutableStateFlow, kotlinx.coroutines.flow.CancellableFlow, kotlinx.coroutines.flow.internal.FusibleFlow
{
    private volatile java.lang.Object _state;
    private int sequence;

    public void <init>(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: void <init>()>();

        r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state> = $r1;

        return;
    }

    public static void getValue$annotations()
    {
        return;
    }

    private final boolean updateState(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot $r1;
        java.lang.Object $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r5;
        kotlin.Unit $r6;
        kotlinx.coroutines.flow.StateFlowSlot[] $r7;
        java.lang.Throwable $r8, $r9;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] getSlots()>();

        entermonitor r0;

     label01:
        $r4 = r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state>;

        if $r2 == null goto label03;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r2);

     label02:
        if $z0 != 0 goto label03;

        exitmonitor r0;

        return 0;

     label03:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

     label04:
        if $z0 == 0 goto label05;

        exitmonitor r0;

        return 1;

     label05:
        r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state> = $r3;

        $i0 = r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label18;

        $i0 = $i0 + 1;

        r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence> = $i0;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] getSlots()>();

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label06:
        exitmonitor r0;

     label07:
        $r7 = (kotlinx.coroutines.flow.StateFlowSlot[]) $r5;

        if $r7 != null goto label08;

        goto label12;

     label08:
        $i1 = lengthof $r7;

        $i2 = 0;

     label09:
        if $i2 >= $i1 goto label12;

        $r1 = $r7[$i2];

        if $r1 != null goto label10;

        goto label11;

     label10:
        virtualinvoke $r1.<kotlinx.coroutines.flow.StateFlowSlot: void makePending()>();

     label11:
        $i2 = $i2 + 1;

        goto label09;

     label12:
        entermonitor r0;

     label13:
        $i1 = r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence>;

        if $i1 != $i0 goto label15;

        $i0 = $i0 + 1;

        r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence> = $i0;

     label14:
        exitmonitor r0;

        return 1;

     label15:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] getSlots()>();

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label16:
        exitmonitor r0;

        $i0 = $i1;

        goto label07;

     label17:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label18:
        $i0 = $i0 + 2;

     label19:
        r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence> = $i0;

     label20:
        exitmonitor r0;

        return 1;

     label21:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlinx.coroutines.flow.StateFlowImpl$collect$1 $r3;
        int $i0;
        java.lang.Object $r4, $r5, $r6, $r7;
        kotlinx.coroutines.Job $r8;
        kotlinx.coroutines.flow.StateFlowSlot $r9;
        java.lang.IllegalStateException $r10;
        java.lang.Throwable $r11;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r12;
        kotlinx.coroutines.flow.SubscribedFlowCollector $r13;
        kotlin.coroutines.CoroutineContext $r14;
        kotlinx.coroutines.Job$Key $r15;
        kotlin.coroutines.CoroutineContext$Key $r16;
        kotlin.coroutines.CoroutineContext$Element $r17;
        kotlinx.coroutines.internal.Symbol $r18;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.StateFlowImpl$collect$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.StateFlowImpl$collect$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.StateFlowImpl$collect$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: void <init>(kotlinx.coroutines.flow.StateFlowImpl,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label>;

        if $i0 == 0 goto label13;

        if $i0 == 1 goto label09;

        if $i0 == 2 goto label06;

        if $i0 != 3 goto label05;

        $r6 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4>;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3>;

        $r8 = (kotlinx.coroutines.Job) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2>;

        $r9 = (kotlinx.coroutines.flow.StateFlowSlot) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1>;

        $r1 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.StateFlowImpl) $r7;

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label04:
        goto label20;

     label05:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;

     label06:
        $r6 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4>;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3>;

        $r8 = (kotlinx.coroutines.Job) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2>;

        $r9 = (kotlinx.coroutines.flow.StateFlowSlot) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1>;

        $r1 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.StateFlowImpl) $r7;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label08:
        goto label32;

     label09:
        $r6 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2>;

        $r9 = (kotlinx.coroutines.flow.StateFlowSlot) $r6;

        $r6 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1>;

        $r1 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        $r6 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.StateFlowImpl) $r6;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label11:
        goto label18;

     label12:
        $r11 := @caughtexception;

        goto label37;

     label13:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r12 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot allocateSlot()>();

        $r9 = (kotlinx.coroutines.flow.StateFlowSlot) $r12;

     label14:
        $z0 = $r1 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector;

     label15:
        if $z0 == 0 goto label18;

     label16:
        $r13 = (kotlinx.coroutines.flow.SubscribedFlowCollector) $r1;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2> = $r9;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = 1;

        $r4 = virtualinvoke $r13.<kotlinx.coroutines.flow.SubscribedFlowCollector: java.lang.Object onSubscription(kotlin.coroutines.Continuation)>($r3);

     label17:
        if $r4 != $r5 goto label18;

        return $r5;

     label18:
        $r14 = interfaceinvoke $r3.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r15 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r16 = (kotlin.coroutines.CoroutineContext$Key) $r15;

        $r17 = interfaceinvoke $r14.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r16);

        $r8 = (kotlinx.coroutines.Job) $r17;

     label19:
        $r6 = null;

     label20:
        $r4 = r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state>;

     label21:
        if $r8 != null goto label22;

        goto label23;

     label22:
        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)>($r8);

     label23:
        if $r6 == null goto label26;

     label24:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r4);

     label25:
        if $z0 != 0 goto label32;

     label26:
        $r18 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

     label27:
        if $r4 != $r18 goto label28;

        $r6 = null;

        goto label29;

     label28:
        $r6 = $r4;

     label29:
        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2> = $r9;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3> = $r8;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4> = $r4;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = 2;

        $r6 = interfaceinvoke $r1.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r6, $r3);

     label30:
        if $r6 != $r5 goto label31;

        return $r5;

     label31:
        $r6 = $r4;

     label32:
        $z0 = virtualinvoke $r9.<kotlinx.coroutines.flow.StateFlowSlot: boolean takePending()>();

     label33:
        if $z0 != 0 goto label20;

     label34:
        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2> = $r9;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3> = $r8;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4> = $r6;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = 3;

        $r4 = virtualinvoke $r9.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object awaitPending(kotlin.coroutines.Continuation)>($r3);

     label35:
        if $r4 != $r5 goto label20;

        return $r5;

     label36:
        $r11 := @caughtexception;

     label37:
        $r12 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot) $r9;

        virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: void freeSlot(kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)>($r12);

        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label36;
        catch java.lang.Throwable from label16 to label17 with label36;
        catch java.lang.Throwable from label18 to label19 with label12;
        catch java.lang.Throwable from label20 to label21 with label12;
        catch java.lang.Throwable from label22 to label23 with label12;
        catch java.lang.Throwable from label24 to label25 with label12;
        catch java.lang.Throwable from label26 to label27 with label12;
        catch java.lang.Throwable from label29 to label30 with label12;
        catch java.lang.Throwable from label32 to label33 with label12;
        catch java.lang.Throwable from label34 to label35 with label12;
    }

    public boolean compareAndSet(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        boolean $z0;
        java.lang.Object $r1, $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r1 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

     label1:
        if $r2 != null goto label2;

        $r2 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: boolean updateState(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $z0;
    }

    protected kotlinx.coroutines.flow.StateFlowSlot createSlot()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = new kotlinx.coroutines.flow.StateFlowSlot;

        specialinvoke $r1.<kotlinx.coroutines.flow.StateFlowSlot: void <init>()>();

        return $r1;
    }

    public volatile kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot createSlot()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot $r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.StateFlowSlot createSlot()>();

        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot) $r1;

        return $r2;
    }

    protected kotlinx.coroutines.flow.StateFlowSlot[] createSlotArray(int)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        int $i0;
        kotlinx.coroutines.flow.StateFlowSlot[] $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $i0 := @parameter0: int;

        $r1 = newarray (kotlinx.coroutines.flow.StateFlowSlot)[$i0];

        return $r1;
    }

    public volatile kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] createSlotArray(int)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot[] $r1;
        int $i0;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.StateFlowSlot[] createSlotArray(int)>($i0);

        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) $r1;

        return $r2;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlin.Unit r3;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: void setValue(java.lang.Object)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public kotlinx.coroutines.flow.Flow fuse(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        kotlinx.coroutines.flow.Flow $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.flow.StateFlow $r4;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r3 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = (kotlinx.coroutines.flow.StateFlow) r0;

        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.Flow fuseStateFlow(kotlinx.coroutines.flow.StateFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r4, $r3, $i0, $r1);

        return $r2;
    }

    public java.util.List getReplayCache()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;
        java.util.List $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object getValue()>();

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r1);

        return $r2;
    }

    public java.lang.Object getValue()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        $r2 = r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        return $r2;
    }

    public void resetReplayCache()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("MutableStateFlow.resetReplayCache is not supported");

        throw $r1;
    }

    public void setValue(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        $r1 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

     label1:
        specialinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: boolean updateState(java.lang.Object,java.lang.Object)>(null, $r1);

        return;
    }

    public boolean tryEmit(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: void setValue(java.lang.Object)>($r1);

        return 1;
    }
}
