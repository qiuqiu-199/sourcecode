public final class kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl extends kotlinx.coroutines.flow.internal.ChannelFlowOperator
{

    public void <init>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlin.coroutines.CoroutineContext $r2;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $r2, $i0, $r3);

        return;
    }

    public void <init>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlin.coroutines.CoroutineContext $r2;
        int $i0, $i1, $i2;
        kotlinx.coroutines.channels.BufferOverflow $r3;
        kotlin.jvm.internal.DefaultConstructorMarker $r4;
        kotlin.coroutines.EmptyCoroutineContext $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        $i1 := @parameter4: int;

        $r4 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r2 = (kotlin.coroutines.CoroutineContext) $r5;

     label1:
        $i2 = $i1 & 4;

        if $i2 == 0 goto label2;

        $i0 = -3;

     label2:
        $i1 = $i1 & 8;

        if $i1 == 0 goto label3;

        $r3 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label3:
        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $r2, $i0, $r3);

        return;
    }

    protected kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl r0, $r4;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlinx.coroutines.flow.Flow $r3;
        kotlinx.coroutines.flow.internal.ChannelFlow $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = new kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: kotlinx.coroutines.flow.Flow flow>;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r3, $r1, $i0, $r2);

        $r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r4;

        return $r5;
    }

    public kotlinx.coroutines.flow.Flow dropChannelOperators()
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl r0;
        kotlinx.coroutines.flow.Flow r1;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        r1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: kotlinx.coroutines.flow.Flow flow>;

        return r1;
    }

    protected java.lang.Object flowCollect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r4, $r5;
        kotlin.Unit r6;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        $r2 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: kotlinx.coroutines.flow.Flow flow>;

        $r4 = interfaceinvoke $r1.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r2, $r3);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        return $r4;

     label1:
        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r6;
    }
}
