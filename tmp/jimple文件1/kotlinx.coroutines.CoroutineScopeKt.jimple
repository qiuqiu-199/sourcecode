public final class kotlinx.coroutines.CoroutineScopeKt extends java.lang.Object
{

    public static final kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0, $r6;
        kotlinx.coroutines.internal.ContextScope $r1;
        kotlinx.coroutines.Job$Key $r2;
        kotlin.coroutines.CoroutineContext$Key $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.CompletableJob $r5;
        kotlinx.coroutines.CoroutineScope $r7;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = new kotlinx.coroutines.internal.ContextScope;

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) $r2;

        $r4 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        if $r4 == null goto label1;

        goto label2;

     label1:
        $r5 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        $r0 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r6);

     label2:
        specialinvoke $r1.<kotlinx.coroutines.internal.ContextScope: void <init>(kotlin.coroutines.CoroutineContext)>($r0);

        $r7 = (kotlinx.coroutines.CoroutineScope) $r1;

        return $r7;
    }

    public static final kotlinx.coroutines.CoroutineScope MainScope()
    {
        kotlinx.coroutines.internal.ContextScope $r0;
        kotlinx.coroutines.CompletableJob $r1;
        kotlinx.coroutines.MainCoroutineDispatcher $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        $r0 = new kotlinx.coroutines.internal.ContextScope;

        $r1 = staticinvoke <kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r2 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r3 = (kotlin.coroutines.CoroutineContext) $r2;

        $r3 = interfaceinvoke $r1.<kotlinx.coroutines.CompletableJob: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r3);

        specialinvoke $r0.<kotlinx.coroutines.internal.ContextScope: void <init>(kotlin.coroutines.CoroutineContext)>($r3);

        $r4 = (kotlinx.coroutines.CoroutineScope) $r0;

        return $r4;
    }

    public static final void cancel(kotlinx.coroutines.CoroutineScope, java.lang.String, java.lang.Throwable)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        java.lang.Throwable $r1;
        java.util.concurrent.CancellationException $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Throwable;

        $r2 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>($r3, $r1);

        staticinvoke <kotlinx.coroutines.CoroutineScopeKt: void cancel(kotlinx.coroutines.CoroutineScope,java.util.concurrent.CancellationException)>($r0, $r2);

        return;
    }

    public static final void cancel(kotlinx.coroutines.CoroutineScope, java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        java.util.concurrent.CancellationException $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.Job$Key $r3;
        kotlin.coroutines.CoroutineContext$Key $r4;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlinx.coroutines.Job $r6;
        java.lang.String $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Throwable $r9;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r3 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r3;

        $r5 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r4);

        $r6 = (kotlinx.coroutines.Job) $r5;

        if $r6 == null goto label1;

        interfaceinvoke $r6.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r1);

        return;

     label1:
        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Scope cannot be cancelled because it does not have a job: ", $r0);

        $r8 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r9 = (java.lang.Throwable) $r8;

        throw $r9;
    }

    public static void cancel$default(kotlinx.coroutines.CoroutineScope, java.lang.String, java.lang.Throwable, int, java.lang.Object)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Throwable;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = null;

     label1:
        staticinvoke <kotlinx.coroutines.CoroutineScopeKt: void cancel(kotlinx.coroutines.CoroutineScope,java.lang.String,java.lang.Throwable)>($r0, $r1, $r3);

        return;
    }

    public static void cancel$default(kotlinx.coroutines.CoroutineScope, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        java.lang.Object $r1;
        java.util.concurrent.CancellationException $r2;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.CoroutineScopeKt: void cancel(kotlinx.coroutines.CoroutineScope,java.util.concurrent.CancellationException)>($r0, $r2);

        return;
    }

    public static final java.lang.Object coroutineScope(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.internal.ScopeCoroutine $r2;
        kotlin.coroutines.CoroutineContext $r3;
        java.lang.Object $r4, $r5;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = new kotlinx.coroutines.internal.ScopeCoroutine;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r2.<kotlinx.coroutines.internal.ScopeCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r3, $r0);

        $r4 = staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: java.lang.Object startUndispatchedOrReturn(kotlinx.coroutines.internal.ScopeCoroutine,java.lang.Object,kotlin.jvm.functions.Function2)>($r2, $r2, $r1);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r0);

     label1:
        return $r4;
    }

    public static final java.lang.Object currentCoroutineContext(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.coroutines.Continuation $r1;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r0 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r0;
    }

    private static final java.lang.Object currentCoroutineContext$$forInline(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.NullPointerException r1;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(3);

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: interfaceinvoke $u0#3.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>()");

        throw r1;
    }

    public static final void ensureActive(kotlinx.coroutines.CoroutineScope)
    {
        kotlin.coroutines.CoroutineContext $r0;
        kotlinx.coroutines.CoroutineScope $r1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r0 = interfaceinvoke $r1.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlin.coroutines.CoroutineContext)>($r0);

        return;
    }

    public static final boolean isActive(kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Job$Key $r2;
        kotlin.coroutines.CoroutineContext$Key $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.Job $r5;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 = interfaceinvoke $r0.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) $r2;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        $r5 = (kotlinx.coroutines.Job) $r4;

        if $r5 != null goto label1;

        return 1;

     label1:
        $z0 = interfaceinvoke $r5.<kotlinx.coroutines.Job: boolean isActive()>();

        return $z0;
    }

    public static void isActive$annotations(kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.CoroutineScope $r0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        return;
    }

    public static final kotlinx.coroutines.CoroutineScope plus(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0, $r3;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlinx.coroutines.internal.ContextScope $r2;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r0 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r2 = new kotlinx.coroutines.internal.ContextScope;

        $r3 = interfaceinvoke $r1.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r0 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r0);

        specialinvoke $r2.<kotlinx.coroutines.internal.ContextScope: void <init>(kotlin.coroutines.CoroutineContext)>($r0);

        $r1 = (kotlinx.coroutines.CoroutineScope) $r2;

        return $r1;
    }
}
