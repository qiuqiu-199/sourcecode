final class kotlinx.coroutines.flow.FlowKt__ContextKt extends java.lang.Object
{

    public static final kotlinx.coroutines.flow.Flow buffer(kotlinx.coroutines.flow.Flow, int)
    {
        int $i0;
        kotlinx.coroutines.flow.Flow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow buffer$default(kotlinx.coroutines.flow.Flow,int,kotlinx.coroutines.channels.BufferOverflow,int,java.lang.Object)>($r0, $i0, null, 2, null);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow buffer(kotlinx.coroutines.flow.Flow, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r1, $r2;
        boolean $z0, $z1;
        kotlinx.coroutines.flow.internal.FusibleFlow $r3;
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        java.lang.Integer $r8;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $z0 = 1;

        if $i0 >= 0 goto label2;

        if $i0 == -2 goto label2;

        if $i0 != -1 goto label1;

        goto label2;

     label1:
        $z1 = 0;

        goto label3;

     label2:
        $z1 = 1;

     label3:
        if $z1 == 0 goto label9;

        if $i0 != -1 goto label5;

        $r2 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if $r1 != $r2 goto label4;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label8;

        if $i0 != -1 goto label6;

        $r1 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        $i0 = 0;

        goto label6;

     label6:
        $z0 = $r0 instanceof kotlinx.coroutines.flow.internal.FusibleFlow;

        if $z0 == 0 goto label7;

        $r3 = (kotlinx.coroutines.flow.internal.FusibleFlow) $r0;

        $r0 = staticinvoke <kotlinx.coroutines.flow.internal.FusibleFlow$DefaultImpls: kotlinx.coroutines.flow.Flow fuse$default(kotlinx.coroutines.flow.internal.FusibleFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,java.lang.Object)>($r3, null, $i0, $r1, 1, null);

        return $r0;

     label7:
        $r4 = new kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, $i0, $r1, 2, null);

        $r0 = (kotlinx.coroutines.flow.Flow) $r4;

        return $r0;

     label8:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = "CONFLATED capacity cannot be used with non-default onBufferOverflow";

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;

     label9:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Buffer size should be non-negative, BUFFERED, or CONFLATED, but was ", $r8);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;
    }

    public static kotlinx.coroutines.flow.Flow buffer$default(kotlinx.coroutines.flow.Flow, int, int, java.lang.Object)
    {
        java.lang.Object $r0;
        kotlinx.coroutines.flow.Flow $r1;
        int $i0, $i1;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = -2;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow buffer(kotlinx.coroutines.flow.Flow,int)>($r1, $i0);

        return $r1;
    }

    public static kotlinx.coroutines.flow.Flow buffer$default(kotlinx.coroutines.flow.Flow, int, kotlinx.coroutines.channels.BufferOverflow, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i0, $i1, $i2;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $i0 = -2;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $r1 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label2:
        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow buffer(kotlinx.coroutines.flow.Flow,int,kotlinx.coroutines.channels.BufferOverflow)>($r0, $i0, $r1);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow cancellable(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        boolean $z0;
        kotlinx.coroutines.flow.CancellableFlowImpl $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $z0 = $r0 instanceof kotlinx.coroutines.flow.CancellableFlow;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r1 = new kotlinx.coroutines.flow.CancellableFlowImpl;

        specialinvoke $r1.<kotlinx.coroutines.flow.CancellableFlowImpl: void <init>(kotlinx.coroutines.flow.Flow)>($r0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;
    }

    private static final void checkFlowContext$FlowKt__ContextKt(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;
        kotlinx.coroutines.Job$Key $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlin.coroutines.CoroutineContext$Element $r3;
        boolean $z0;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Flow context cannot contain job in it. Had ", $r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;
    }

    public static final kotlinx.coroutines.flow.Flow conflate(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow buffer$default(kotlinx.coroutines.flow.Flow,int,kotlinx.coroutines.channels.BufferOverflow,int,java.lang.Object)>($r0, -1, null, 2, null);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow flowOn(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl $r1;
        kotlinx.coroutines.flow.Flow $r2;
        kotlin.coroutines.EmptyCoroutineContext $r3;
        boolean $z0;
        kotlinx.coroutines.flow.internal.FusibleFlow $r4;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.flow.FlowKt__ContextKt: void checkFlowContext$FlowKt__ContextKt(kotlin.coroutines.CoroutineContext)>($r0);

        $r3 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r3);

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        $z0 = $r2 instanceof kotlinx.coroutines.flow.internal.FusibleFlow;

        if $z0 == 0 goto label2;

        $r4 = (kotlinx.coroutines.flow.internal.FusibleFlow) $r2;

        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.FusibleFlow$DefaultImpls: kotlinx.coroutines.flow.Flow fuse$default(kotlinx.coroutines.flow.internal.FusibleFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,java.lang.Object)>($r4, $r0, 0, null, 6, null);

        return $r2;

     label2:
        $r1 = new kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, $r0, 0, null, 12, null);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow flowWith(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.flow.FlowKt__ContextKt$flowWith$$inlined$unsafeFlow$1 $r3;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlinx.coroutines.flow.FlowKt__ContextKt: void checkFlowContext$FlowKt__ContextKt(kotlin.coroutines.CoroutineContext)>($r1);

        $r3 = new kotlinx.coroutines.flow.FlowKt__ContextKt$flowWith$$inlined$unsafeFlow$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__ContextKt$flowWith$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,int,kotlin.jvm.functions.Function1,kotlin.coroutines.CoroutineContext)>($r0, $i0, $r2, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r3;

        return $r0;
    }

    public static kotlinx.coroutines.flow.Flow flowWith$default(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.flow.Flow $r3;
        int $i0, $i1;

        $r3 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r1 := @parameter3: kotlin.jvm.functions.Function1;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = -2;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flowWith(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlin.jvm.functions.Function1)>($r3, $r0, $i0, $r1);

        return $r3;
    }
}
