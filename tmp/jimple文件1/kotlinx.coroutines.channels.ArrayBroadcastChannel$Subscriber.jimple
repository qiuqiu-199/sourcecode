final class kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber extends kotlinx.coroutines.channels.AbstractChannel implements kotlinx.coroutines.channels.ReceiveChannel
{
    private volatile long _subHead;
    private final kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel;
    private final java.util.concurrent.locks.ReentrantLock subLock;

    public void <init>(kotlinx.coroutines.channels.ArrayBroadcastChannel)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r1;
        java.util.concurrent.locks.ReentrantLock $r2;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r1 := @parameter0: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void <init>(kotlin.jvm.functions.Function1)>(null);

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock> = $r2;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long _subHead> = 0L;

        return;
    }

    private final boolean needsToCheckOfferWithoutLock()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        kotlinx.coroutines.channels.Closed $r1;
        boolean $z0;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r2;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        if $r1 == null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean isBufferEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.channels.ArrayBroadcastChannel: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        return 1;
    }

    private final java.lang.Object peekUnderLock()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        long $l0, $l1;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r1;
        kotlinx.coroutines.channels.Closed $r2;
        byte $b2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.Symbol r4;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ArrayBroadcastChannel: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        $l1 = staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: long access$getTail(kotlinx.coroutines.channels.ArrayBroadcastChannel)>($r1);

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        if $r2 != null goto label3;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        if $r2 != null goto label3;

        r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        return r4;

     label1:
        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object access$elementAt(kotlinx.coroutines.channels.ArrayBroadcastChannel,long)>($r1, $l0);

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        if $r2 == null goto label2;

        return $r2;

     label2:
        return $r3;

     label3:
        return $r2;
    }

    public final boolean checkOffer()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        boolean $z0, $z1;
        kotlinx.coroutines.channels.Closed $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.Symbol $r4, $r6;
        kotlinx.coroutines.channels.ReceiveOrClosed $r5;
        java.lang.AssertionError $r7;
        long $l0;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $z0 = 0;

     label01:
        $z1 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean needsToCheckOfferWithoutLock()>();

        $r1 = null;

        if $z1 == 0 goto label27;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z1 != 0 goto label02;

        goto label27;

     label02:
        $r3 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.lang.Object peekUnderLock()>();

        $r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label03:
        if $r3 != $r4 goto label05;

     label04:
        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label01;

     label05:
        $z1 = $r3 instanceof kotlinx.coroutines.channels.Closed;

     label06:
        if $z1 == 0 goto label09;

     label07:
        $r1 = (kotlinx.coroutines.channels.Closed) $r3;

     label08:
        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label27;

     label09:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()>();

     label10:
        if $r5 != null goto label11;

        goto label08;

     label11:
        $z1 = $r5 instanceof kotlinx.coroutines.channels.Closed;

     label12:
        if $z1 == 0 goto label13;

        goto label08;

     label13:
        $r4 = interfaceinvoke $r5.<kotlinx.coroutines.channels.ReceiveOrClosed: kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object,kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>($r3, null);

     label14:
        if $r4 != null goto label15;

        goto label04;

     label15:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label16:
        if $z0 == 0 goto label22;

     label17:
        $r6 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

     label18:
        if $r4 != $r6 goto label19;

        $z0 = 1;

        goto label20;

     label19:
        $z0 = 0;

     label20:
        if $z0 == 0 goto label21;

        goto label22;

     label21:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label22:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

     label23:
        $l0 = $l0 + 1L;

     label24:
        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: void setSubHead(long)>($l0);

     label25:
        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        interfaceinvoke $r5.<kotlinx.coroutines.channels.ReceiveOrClosed: void completeResumeReceive(java.lang.Object)>($r3);

        $z0 = 1;

        goto label01;

     label26:
        $r8 := @caughtexception;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r8;

     label27:
        if $r1 != null goto label28;

        return $z0;

     label28:
        $r8 = $r1.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean close(java.lang.Throwable)>($r8);

        return $z0;

        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label21 to label23 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    public boolean close(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        java.lang.Throwable $r1, $r6;
        boolean $z0;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        long $l0;
        kotlin.Unit $r5;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean close(java.lang.Throwable)>($r1);

        if $z0 == 0 goto label4;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: void updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,int,java.lang.Object)>($r2, null, r0, 1, null);

        $r3 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        $l0 = staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: long access$getTail(kotlinx.coroutines.channels.ArrayBroadcastChannel)>($r2);

        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: void setSubHead(long)>($l0);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

     label4:
        return $z0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final long getSubHead()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        long l0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        l0 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long _subHead>;

        return l0;
    }

    protected boolean isBufferAlwaysEmpty()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        return 0;
    }

    protected boolean isBufferAlwaysFull()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r2 = new java.lang.IllegalStateException;

        $r1 = "Should not be used";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;
    }

    protected boolean isBufferEmpty()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        long $l0, $l1;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r1;
        byte $b2;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        $l1 = staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: long access$getTail(kotlinx.coroutines.channels.ArrayBroadcastChannel)>($r1);

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isBufferFull()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r2 = new java.lang.IllegalStateException;

        $r1 = "Should not be used";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;
    }

    protected java.lang.Object pollInternal()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.util.concurrent.locks.Lock $r2;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        kotlinx.coroutines.internal.Symbol $r4;
        long $l0;
        kotlinx.coroutines.channels.Closed $r5;
        java.lang.Throwable $r6;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r7;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r3 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.lang.Object peekUnderLock()>();

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Closed;

     label02:
        $z1 = 1;

        if $z0 == 0 goto label03;

        goto label05;

     label03:
        $r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label04:
        if $r3 != $r4 goto label06;

     label05:
        $z0 = 0;

        goto label10;

     label06:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

     label07:
        $l0 = $l0 + 1L;

     label08:
        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: void setSubHead(long)>($l0);

     label09:
        $z0 = 1;

     label10:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        $z2 = $r3 instanceof kotlinx.coroutines.channels.Closed;

        if $z2 == 0 goto label11;

        $r5 = (kotlinx.coroutines.channels.Closed) $r3;

        goto label12;

     label11:
        $r5 = null;

     label12:
        if $r5 != null goto label13;

        goto label14;

     label13:
        $r6 = $r5.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean close(java.lang.Throwable)>($r6);

     label14:
        $z2 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean checkOffer()>();

        if $z2 == 0 goto label15;

        goto label16;

     label15:
        $z1 = $z0;

     label16:
        if $z1 == 0 goto label18;

        $r7 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: void updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,int,java.lang.Object)>($r7, null, null, 3, null);

        return $r3;

     label17:
        $r6 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

     label18:
        return $r3;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
    }

    protected java.lang.Object pollSelectInternal(kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        kotlinx.coroutines.selects.SelectInstance $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1, $z2;
        kotlinx.coroutines.internal.Symbol $r6;
        long $l0;
        kotlinx.coroutines.channels.Closed $r7;
        java.lang.Throwable $r8;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r9;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.util.concurrent.locks.ReentrantLock subLock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r4 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: java.lang.Object peekUnderLock()>();

     label02:
        $r5 = $r4;

     label03:
        $z0 = $r4 instanceof kotlinx.coroutines.channels.Closed;

     label04:
        $z1 = 1;

        $z2 = 0;

        if $z0 == 0 goto label05;

        goto label15;

     label05:
        $r6 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label06:
        if $r4 != $r6 goto label07;

        goto label15;

     label07:
        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

     label08:
        if $z0 != 0 goto label11;

     label09:
        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label10:
        $r5 = $r4;

        goto label15;

     label11:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

     label12:
        $l0 = $l0 + 1L;

     label13:
        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: void setSubHead(long)>($l0);

     label14:
        $z2 = 1;

     label15:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        $z0 = $r5 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label16;

        $r7 = (kotlinx.coroutines.channels.Closed) $r5;

        goto label17;

     label16:
        $r7 = null;

     label17:
        if $r7 != null goto label18;

        goto label19;

     label18:
        $r8 = $r7.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean close(java.lang.Throwable)>($r8);

     label19:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean checkOffer()>();

        if $z0 == 0 goto label20;

        goto label21;

     label20:
        $z1 = $z2;

     label21:
        if $z1 == 0 goto label23;

        $r9 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: kotlinx.coroutines.channels.ArrayBroadcastChannel broadcastChannel>;

        staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: void updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,int,java.lang.Object)>($r9, null, null, 3, null);

        return $r5;

     label22:
        $r8 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

     label23:
        return $r5;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
    }

    public final void setSubHead(long)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber r0;
        long $l0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $l0 := @parameter0: long;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long _subHead> = $l0;

        return;
    }
}
