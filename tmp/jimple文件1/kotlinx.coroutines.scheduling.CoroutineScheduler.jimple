public final class kotlinx.coroutines.scheduling.CoroutineScheduler extends java.lang.Object implements java.util.concurrent.Executor, java.io.Closeable
{
    private static final long BLOCKING_MASK;
    private static final int BLOCKING_SHIFT;
    private static final int CLAIMED;
    private static final long CPU_PERMITS_MASK;
    private static final int CPU_PERMITS_SHIFT;
    private static final long CREATED_MASK;
    public static final kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion;
    public static final int MAX_SUPPORTED_POOL_SIZE;
    public static final int MIN_SUPPORTED_POOL_SIZE;
    public static final kotlinx.coroutines.internal.Symbol NOT_IN_STACK;
    private static final int PARKED;
    private static final long PARKED_INDEX_MASK;
    private static final long PARKED_VERSION_INC;
    private static final long PARKED_VERSION_MASK;
    private static final int TERMINATED;
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU;
    static final java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU;
    private volatile int _isTerminated;
    volatile long controlState;
    public final int corePoolSize;
    public final kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue;
    public final kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue;
    public final long idleWorkerKeepAliveNs;
    public final int maxPoolSize;
    private volatile long parkedWorkersStack;
    public final java.lang.String schedulerName;
    public final java.util.concurrent.atomic.AtomicReferenceArray workers;

    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Companion $r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r3;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int TERMINATED> = 1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long PARKED_VERSION_MASK> = -2097152L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long PARKED_VERSION_INC> = 2097152L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long PARKED_INDEX_MASK> = 2097151L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int PARKED> = -1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int MIN_SUPPORTED_POOL_SIZE> = 1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int MAX_SUPPORTED_POOL_SIZE> = 2097150;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long CREATED_MASK> = 2097151L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int CPU_PERMITS_SHIFT> = 42;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long CPU_PERMITS_MASK> = 9223367638808264704L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int CLAIMED> = 0;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int BLOCKING_SHIFT> = 21;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long BLOCKING_MASK> = 4398044413952L;

        $r0 = new kotlinx.coroutines.scheduling.CoroutineScheduler$Companion;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion> = $r0;

        $r1 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r1.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("NOT_IN_STACK");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK> = $r1;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler;", "parkedWorkersStack");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU> = $r2;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler;", "controlState");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU> = $r2;

        $r3 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler;", "_isTerminated");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU> = $r3;

        return;
    }

    public void <init>(int, int, long, java.lang.String)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;
        boolean $z0;
        byte $b3;
        kotlinx.coroutines.scheduling.GlobalQueue $r2;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize> = $i0;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize> = $i1;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs> = $l2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName> = $r1;

        if $i0 < 1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label12;

        if $i1 < $i0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        if $z0 == 0 goto label11;

        if $i1 > 2097150 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label10;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label09;

        $r2 = new kotlinx.coroutines.scheduling.GlobalQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue> = $r2;

        $r2 = new kotlinx.coroutines.scheduling.GlobalQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue> = $r2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack> = 0L;

        $r3 = new java.util.concurrent.atomic.AtomicReferenceArray;

        $i1 = $i1 + 1;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i1);

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers> = $r3;

        $l2 = (long) $i0;

        $l2 = $l2 << 42;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState> = $l2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated> = 0;

        return;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Idle worker keep alive time ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be positive");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;

     label10:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not exceed maximal supported number of threads 2097150");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;

     label11:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be greater than or equals to core pool size ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;

     label12:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Core pool size ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be at least 1");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;
    }

    public void <init>(int, int, long, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i0, $i1, $i2, $i4;
        long $l3;
        java.lang.String $r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l3 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        $i2 := @parameter4: int;

        $r2 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i4 = $i2 & 4;

        if $i4 == 0 goto label1;

        $l3 = <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>;

     label1:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label2;

        $r1 = "DefaultDispatcher";

     label2:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l3, $r1);

        return;
    }

    private final boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.scheduling.GlobalQueue $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r2 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return $z0;

     label3:
        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return $z0;
    }

    private final int blockingTasks(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l0 = $l0 & 4398044413952L;

        $l0 = $l0 >> 21;

        $i1 = (int) $l0;

        return $i1;
    }

    private final int createNewWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1, $r2;
        boolean $z0, $z1;
        long $l0, $l1;
        int $i2, $i3, $i4;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        entermonitor $r1;

     label01:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor $r1;

        return -1;

     label03:
        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l1 = $l0 & 2097151L;

        $i2 = (int) $l1;

        $l0 = $l0 & 4398044413952L;

        $l0 = $l0 >> 21;

        $i3 = (int) $l0;

        $i3 = $i2 - $i3;

        $z0 = 0;

        $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i3, 0);

        $i4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

     label04:
        if $i3 < $i4 goto label05;

        exitmonitor $r1;

        return 0;

     label05:
        $i4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

     label06:
        if $i2 < $i4 goto label07;

        exitmonitor $r1;

        return 0;

     label07:
        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l0 = $l0 & 2097151L;

        $i2 = (int) $l0;

        $i2 = $i2 + 1;

        if $i2 <= 0 goto label08;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        if $r3 != null goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        if $z1 == 0 goto label13;

        $r4 = new kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        specialinvoke $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int)>(r0, $i2);

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i2, $r4);

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>(r0);

        $l0 = 2097151L & $l0;

        $i4 = (int) $l0;

        if $i2 != $i4 goto label10;

        $z0 = 1;

     label10:
        if $z0 == 0 goto label12;

        virtualinvoke $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void start()>();

     label11:
        $i3 = $i3 + 1;

        exitmonitor $r1;

        return $i3;

     label12:
        $r6 = "Failed requirement.";

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r8 = (java.lang.Throwable) $r7;

        throw $r8;

     label13:
        $r6 = "Failed requirement.";

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r8 = (java.lang.Throwable) $r7;

        throw $r8;

     label14:
        $r8 := @caughtexception;

        exitmonitor $r1;

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label11 with label14;
        catch java.lang.Throwable from label12 to label14 with label14;
    }

    private final int createdWorkers(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l0 = $l0 & 2097151L;

        $i1 = (int) $l0;

        return $i1;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0, $r3;
        java.lang.Thread $r1;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = $r1 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 != null goto label3;

        return null;

     label3:
        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, r0);

        if $z0 == 0 goto label4;

        return $r2;

     label4:
        return null;
    }

    private final void decrementBlockingTasks()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, -2097152L);

        return;
    }

    private final int decrementCreatedWorkers()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(java.lang.Object)>(r0);

        $l0 = $l0 & 2097151L;

        $i1 = (int) $l0;

        return $i1;
    }

    public static void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler, java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean, int, java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.NonBlockingContext $r4;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r4 = <kotlinx.coroutines.scheduling.NonBlockingContext: kotlinx.coroutines.scheduling.NonBlockingContext INSTANCE>;

        $r2 = (kotlinx.coroutines.scheduling.TaskContext) $r4;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $z0 = 0;

     label2:
        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r1, $r2, $z0);

        return;
    }

    private final int getAvailableCpuPermits()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l0 = $l0 & 9223367638808264704L;

        $l0 = $l0 >> 42;

        $i1 = (int) $l0;

        return $i1;
    }

    private final int getCreatedWorkers()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l0 = $l0 & 2097151L;

        $i1 = (int) $l0;

        return $i1;
    }

    private final long incrementBlockingTasks()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, 2097152L);

        return $l0;
    }

    private final int incrementCreatedWorkers()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>(r0);

        $l0 = $l0 & 2097151L;

        $i1 = (int) $l0;

        return $i1;
    }

    private final int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        int $i0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

     label1:
        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 != $r3 goto label2;

        return -1;

     label2:
        if $r2 != null goto label3;

        return 0;

     label3:
        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r2;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        if $i0 == 0 goto label4;

        return $i0;

     label4:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

        goto label1;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0, $l1, $l3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        int $i2;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r4;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r5;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

     label1:
        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack>;

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r4 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r3;

        if $r4 != null goto label2;

        return null;

     label2:
        $l1 = 2097152L + $l0;

        $l1 = $l1 & -2097152L;

        $i2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r4);

        if $i2 >= 0 goto label3;

        goto label1;

     label3:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        $l3 = (long) $i2;

        $l1 = $l3 | $l1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        virtualinvoke $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>($r5);

        return $r4;
    }

    private final long releaseCpuPermit()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, 4398046511104L);

        return $l0;
    }

    private final void signalBlockingWork(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $z0 := @parameter0: boolean;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, 2097152L);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>($l0);

        if $z0 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        return;
    }

    private final kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, kotlinx.coroutines.scheduling.Task, boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.Task $r1;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r3, $r4;
        kotlinx.coroutines.scheduling.TaskContext $r5;
        int $i0;
        kotlinx.coroutines.scheduling.WorkQueue $r6;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r2 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter1: kotlinx.coroutines.scheduling.Task;

        $z0 := @parameter2: boolean;

        if $r2 != null goto label1;

        return $r1;

     label1:
        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r3 != $r4 goto label2;

        return $r1;

     label2:
        $r5 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r5.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i0 != 0 goto label3;

        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if $r3 != $r4 goto label3;

        return $r1;

     label3:
        $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks> = 1;

        $r6 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r1 = virtualinvoke $r6.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean)>($r1, $z0);

        return $r1;
    }

    private final boolean tryAcquireCpuPermit()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0, $l1;
        boolean $z0;
        int $i2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

     label1:
        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l1 = 9223367638808264704L & $l0;

        $l1 = $l1 >> 42;

        $i2 = (int) $l1;

        if $i2 != 0 goto label2;

        return 0;

     label2:
        $l1 = $l0 - 4398046511104L;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return 1;
    }

    private final boolean tryCreateWorker(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0, $l1;
        int $i2, $i3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $l0 = $l0 & 4398044413952L;

        $l0 = $l0 >> 21;

        $i3 = (int) $l0;

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i2, 0);

        $i3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i2 >= $i3 goto label2;

        $i2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>();

        if $i2 != 1 goto label1;

        $i3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i3 <= 1 goto label1;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>();

     label1:
        if $i2 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    static boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler, long, int, java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        long $l0;
        int $i1;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $l0 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

     label1:
        $z0 = specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>($l0);

        return $z0;
    }

    private final boolean tryUnpark()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2;
        boolean $z0;
        java.lang.Thread $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

     label1:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()>();

        if $r2 != null goto label2;

        return 0;

     label2:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>($r2, -1, 0);

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Thread) $r2;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r3);

        return 1;
    }

    public final int availableCpuPermits(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        int $i1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l0 = $l0 & 9223367638808264704L;

        $l0 = $l0 >> 42;

        $i1 = (int) $l0;

        return $i1;
    }

    public void close()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>(10000L);

        return;
    }

    public final kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.TaskContext $r1;
        long $l0;
        java.lang.Runnable $r2;
        kotlinx.coroutines.scheduling.SchedulerTimeSource $r3;
        boolean $z0;
        kotlinx.coroutines.scheduling.Task $r4;
        kotlinx.coroutines.scheduling.TaskImpl $r5;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $r3 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource>;

        $l0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.SchedulerTimeSource: long nanoTime()>();

        $z0 = $r2 instanceof kotlinx.coroutines.scheduling.Task;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.scheduling.Task) $r2;

        $r4.<kotlinx.coroutines.scheduling.Task: long submissionTime> = $l0;

        $r4.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext> = $r1;

        return $r4;

     label1:
        $r5 = new kotlinx.coroutines.scheduling.TaskImpl;

        specialinvoke $r5.<kotlinx.coroutines.scheduling.TaskImpl: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)>($r2, $l0, $r1);

        $r4 = (kotlinx.coroutines.scheduling.Task) $r5;

        return $r4;
    }

    public final void dispatch(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0, $z1;
        kotlinx.coroutines.AbstractTimeSource $r3;
        kotlinx.coroutines.scheduling.Task $r4, $r6;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r5;
        java.util.concurrent.RejectedExecutionException $r7;
        java.lang.String $r8;
        int $i0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter2: boolean;

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label1;

        goto label2;

     label1:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void trackTask()>();

     label2:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>($r1, $r2);

        $r5 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>();

        $r6 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,kotlinx.coroutines.scheduling.Task,boolean)>($r5, $r4, $z0);

        if $r6 == null goto label4;

        $z1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)>($r6);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r7 = new java.util.concurrent.RejectedExecutionException;

        $r8 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        $r8 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r8, " was terminated");

        specialinvoke $r7.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        if $z0 == 0 goto label5;

        if $r5 == null goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        $r2 = $r4.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i0 != 0 goto label8;

        if $z0 == 0 goto label7;

        return;

     label7:
        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()>();

        return;

     label8:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalBlockingWork(boolean)>($z0);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.lang.Runnable $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>(r0, $r1, null, 0, 6, null);

        return;
    }

    public final boolean isTerminated()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int i0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated>;

        z0 = (boolean) i0;

        return z0;
    }

    public final boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0, $l1, $l4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        int $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r4;
        java.util.concurrent.atomic.AtomicReferenceArray $r5;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r6;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 == $r3 goto label1;

        return 0;

     label1:
        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack>;

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $l1 = 2097152L + $l0;

        $l1 = $l1 & -2097152L;

        $i3 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        if $i3 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $r5 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>($r2);

        $r6 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        $l4 = (long) $i3;

        $l1 = $l4 | $l1;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return 1;
    }

    public final void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        int $i0, $i1, $i4;
        long $l2, $l3, $l5;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $l2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack>;

        $l3 = 2097151L & $l2;

        $i4 = (int) $l3;

        $l3 = 2097152L + $l2;

        $l3 = $l3 & -2097152L;

        if $i4 != $i0 goto label3;

        if $i1 != 0 goto label2;

        $i4 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r1);

        goto label3;

     label2:
        $i4 = $i1;

     label3:
        if $i4 >= 0 goto label4;

        goto label1;

     label4:
        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        $l5 = (long) $i4;

        $l3 = $l3 | $l5;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l2, $l3);

        if $z0 == 0 goto label1;

        return;
    }

    public final void runSafely(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.AbstractTimeSource $r2, $r3;
        java.lang.Throwable $r4, $r7;
        java.lang.Thread $r5;
        java.lang.Thread$UncaughtExceptionHandler $r6;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.scheduling.Task: void run()>();

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        $r3 = $r2;

        if $r2 != null goto label3;

        return;

     label3:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = virtualinvoke $r5.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r6.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r5, $r4);

     label6:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        $r3 = $r2;

        if $r2 != null goto label3;

        return;

     label7:
        $r7 := @caughtexception;

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label8;

        goto label9;

     label8:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public final void shutdown(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i0, $i3, $i4;
        long $l1, $l2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2, $r5;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        java.lang.Object $r4;
        java.lang.Thread $r6;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r7, $r8;
        java.lang.AssertionError $r9;
        kotlinx.coroutines.scheduling.WorkQueue $r10;
        kotlinx.coroutines.scheduling.GlobalQueue $r11;
        kotlinx.coroutines.scheduling.Task $r12;
        java.lang.Throwable $r13;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l1 := @parameter0: long;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU>;

        $z0 = 0;

        $z1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, 1);

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>();

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        entermonitor $r3;

     label02:
        $l2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

     label03:
        $l2 = $l2 & 2097151L;

        $i3 = (int) $l2;

        exitmonitor $r3;

        if 1 > $i3 goto label13;

        $i4 = 1;

     label04:
        $i0 = $i4 + 1;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $r5 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r4;

        if $r5 == $r2 goto label11;

     label05:
        $z1 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isAlive()>();

        if $z1 == 0 goto label06;

        $r6 = (java.lang.Thread) $r5;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r6);

        virtualinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void join(long)>($l1);

        goto label05;

     label06:
        $r7 = $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label10;

        $r8 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r7 != $r8 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        if $z1 == 0 goto label09;

        goto label10;

     label09:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label10:
        $r10 = $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        virtualinvoke $r10.<kotlinx.coroutines.scheduling.WorkQueue: void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue)>($r11);

     label11:
        if $i4 != $i3 goto label12;

        goto label13;

     label12:
        $i4 = $i0;

        goto label04;

     label13:
        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: void close()>();

        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: void close()>();

     label14:
        if $r2 != null goto label15;

        $r12 = null;

        goto label16;

     label15:
        $r12 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>(1);

     label16:
        if $r12 != null goto label22;

        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r4 = virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r12 = (kotlinx.coroutines.scheduling.Task) $r4;

        if $r12 != null goto label22;

        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r4 = virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r12 = (kotlinx.coroutines.scheduling.Task) $r4;

        if $r12 != null goto label22;

        if $r2 != null goto label17;

        goto label18;

     label17:
        $r7 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r7);

     label18:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label21;

        $l1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l1 = $l1 & 9223367638808264704L;

        $l1 = $l1 >> 42;

        $i3 = (int) $l1;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i3 != $i0 goto label19;

        $z0 = 1;

     label19:
        if $z0 == 0 goto label20;

        goto label21;

     label20:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label21:
        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack> = 0L;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState> = 0L;

        return;

     label22:
        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>($r12);

        goto label14;

     label23:
        $r13 := @caughtexception;

        exitmonitor $r3;

        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label23;
    }

    public final void signalCpuWork()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler,long,int,java.lang.Object)>(r0, 0L, 1, null);

        if $z0 == 0 goto label2;

        return;

     label2:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.ArrayList $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r4;
        kotlinx.coroutines.scheduling.WorkQueue $r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r6;
        int[] $r7;
        java.util.Collection $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        long $l9, $l10;
        kotlinx.coroutines.scheduling.GlobalQueue $r11;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = 0;

        if 1 >= $i1 goto label10;

        $i3 = 0;

        $i4 = 0;

        $i5 = 0;

        $i6 = 0;

        $i7 = 1;

     label01:
        $i0 = $i7 + 1;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i7);

        $r4 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r3;

        if $r4 != null goto label02;

        goto label08;

     label02:
        $r5 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i7 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()>();

        $r6 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r7 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i8 = virtualinvoke $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $i8 = $r7[$i8];

        if $i8 == 1 goto label07;

        if $i8 == 2 goto label06;

        if $i8 == 3 goto label05;

        if $i8 == 4 goto label04;

        if $i8 == 5 goto label03;

        goto label08;

     label03:
        $i6 = $i6 + 1;

        goto label08;

     label04:
        $i5 = $i5 + 1;

        if $i7 <= 0 goto label08;

        $r8 = (java.util.Collection) $r1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(100);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label08;

     label05:
        $i4 = $i4 + 1;

        $r8 = (java.util.Collection) $r1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(99);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label08;

     label06:
        $i3 = $i3 + 1;

        $r8 = (java.util.Collection) $r1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(98);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label08;

     label07:
        $i2 = $i2 + 1;

     label08:
        if $i0 < $i1 goto label09;

        $i0 = $i2;

        $i2 = $i4;

        goto label11;

     label09:
        $i7 = $i0;

        goto label01;

     label10:
        $i0 = 0;

        $i3 = 0;

        $i5 = 0;

        $i6 = 0;

     label11:
        $l9 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r10 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Pool Size {core = ");

        $i4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", max = ");

        $i4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, Worker States {CPU = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parked = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dormant = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", terminated = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, running workers queues = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", global CPU queue size = ");

        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $i2 = virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: int getSize()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", global blocking queue size = ");

        $r11 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $i2 = virtualinvoke $r11.<kotlinx.coroutines.scheduling.GlobalQueue: int getSize()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Control State {created workers= ");

        $l10 = 2097151L & $l9;

        $i2 = (int) $l10;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking tasks = ");

        $l10 = 4398044413952L & $l9;

        $l10 = $l10 >> 21;

        $i2 = (int) $l10;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", CPUs acquired = ");

        $i2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $l9 = 9223367638808264704L & $l9;

        $l9 = $l9 >> 42;

        $i3 = (int) $l9;

        $i2 = $i2 - $i3;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
