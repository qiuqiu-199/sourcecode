final class kotlinx.coroutines.flow.SharedFlowImpl$Emitter extends java.lang.Object implements kotlinx.coroutines.DisposableHandle
{
    public final kotlin.coroutines.Continuation cont;
    public final kotlinx.coroutines.flow.SharedFlowImpl flow;
    public long index;
    public final java.lang.Object value;

    public void <init>(kotlinx.coroutines.flow.SharedFlowImpl, long, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter r0;
        kotlinx.coroutines.flow.SharedFlowImpl $r1;
        long $l0;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl$Emitter;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: kotlinx.coroutines.flow.SharedFlowImpl flow> = $r1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: long index> = $l0;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: java.lang.Object value> = $r2;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: kotlin.coroutines.Continuation cont> = $r3;

        return;
    }

    public void dispose()
    {
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter r0;
        kotlinx.coroutines.flow.SharedFlowImpl $r1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl$Emitter;

        $r1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: kotlinx.coroutines.flow.SharedFlowImpl flow>;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: void access$cancelEmitter(kotlinx.coroutines.flow.SharedFlowImpl,kotlinx.coroutines.flow.SharedFlowImpl$Emitter)>($r1, r0);

        return;
    }
}
