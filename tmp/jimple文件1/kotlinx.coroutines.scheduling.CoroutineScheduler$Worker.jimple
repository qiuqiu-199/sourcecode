public final class kotlinx.coroutines.scheduling.CoroutineScheduler$Worker extends java.lang.Thread
{
    static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU;
    private volatile int indexInArray;
    public final kotlinx.coroutines.scheduling.WorkQueue localQueue;
    public boolean mayHaveLocalTasks;
    private long minDelayUntilStealableTaskNs;
    private volatile java.lang.Object nextParkedWorker;
    private int rngState;
    public kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state;
    private long terminationDeadline;
    final kotlinx.coroutines.scheduling.CoroutineScheduler this$0;
    volatile int workerCtl;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;", "workerCtl");

        <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU> = $r0;

        return;
    }

    private void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.WorkQueue $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        kotlin.random.Random$Default $r5;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0> = $r1;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setDaemon(boolean)>(1);

        $r2 = new kotlinx.coroutines.scheduling.WorkQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.WorkQueue: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue> = $r2;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r3;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl> = 0;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker> = $r4;

        $r5 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $i0 = virtualinvoke $r5.<kotlin.random.Random$Default: int nextInt()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState> = $i0;

        return;
    }

    public void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        int $i0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter1: int;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0> = $r1;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r1);

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>($i0);

        return;
    }

    private final void afterTask(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        boolean $z0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r3, $r4;
        java.lang.AssertionError $r5;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>($r1, -2097152L);

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r3 == $r4 goto label6;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if $r3 != $r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r3;

     label6:
        return;
    }

    private final void beforeTask(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        boolean $z0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()>();

     label2:
        return;
    }

    private final void executeTask(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        int $i0;
        kotlinx.coroutines.scheduling.TaskContext $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r3 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r3.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(int)>($i0);

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(int)>($i0);

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>($r1);

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(int)>($i0);

        return;
    }

    private final kotlinx.coroutines.scheduling.Task findAnyTask(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        int $i0;
        kotlinx.coroutines.scheduling.Task $r2;
        kotlinx.coroutines.scheduling.WorkQueue $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label6;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $i0 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $i0 = $i0 * 2;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>($i0);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 != null goto label3;

        goto label4;

     label3:
        return $r2;

     label4:
        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        if $r2 != null goto label5;

        if $z0 != 0 goto label7;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 != null goto label5;

        goto label7;

     label5:
        return $r2;

     label6:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 != null goto label8;

     label7:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(boolean)>(0);

     label8:
        return $r2;
    }

    private final void idleReset(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = 0L;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        if $r2 != $r1 goto label5;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

     label5:
        return;
    }

    private final boolean inStack()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final void park()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        long $l0, $l2;
        byte $b1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        $l0 = $l0 + $l2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = $l0;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l0 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>($l0);

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>;

        $l0 = $l0 - $l2;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = 0L;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()>();

     label2:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task pollGlobalQueues()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.GlobalQueue $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.Task $r4;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>(2);

        if $i0 != 0 goto label1;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r4 != null goto label2;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        return $r4;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r4 != null goto label2;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

     label2:
        return $r4;
    }

    private final void runWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        long $l0;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r2, $r3;
        kotlinx.coroutines.scheduling.Task $r4;
        byte $b1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

     label1:
        $z0 = 0;

     label2:
        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z1 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

        if $z1 != 0 goto label6;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r2 == $r3 goto label6;

        $z1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>($z1);

        if $r4 == null goto label3;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = 0L;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void executeTask(kotlinx.coroutines.scheduling.Task)>($r4);

        goto label1;

     label3:
        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks> = 0;

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label5;

        if $z0 != 0 goto label4;

        $z0 = 1;

        goto label2;

     label4:
        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r2);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>($l0);

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = 0L;

        goto label1;

     label5:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryPark()>();

        goto label2;

     label6:
        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r2);

        return;
    }

    private final boolean tryAcquireCpuPermit()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        long $l0, $l1;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        int $i2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        if $r1 != $r2 goto label2;

     label1:
        return 1;

     label2:
        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

     label3:
        $l0 = $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l1 = 9223367638808264704L & $l0;

        $l1 = $l1 >> 42;

        $i2 = (int) $l1;

        if $i2 != 0 goto label4;

        $z0 = 0;

        goto label5;

     label4:
        $l1 = $l0 - 4398046511104L;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>($r3, $l0, $l1);

        if $z0 == 0 goto label3;

        $z0 = 1;

     label5:
        if $z0 == 0 goto label6;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

        goto label1;

     label6:
        return 0;
    }

    private final void tryPark()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r5;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        kotlinx.coroutines.scheduling.WorkQueue $r3;
        int $i0;
        java.lang.AssertionError $r4;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>(r0);

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl> = -1;

     label6:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>();

        if $z0 == 0 goto label8;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl>;

        if $i0 != -1 goto label8;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

        if $z0 != 0 goto label8;

        $r5 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r5 != $r1 goto label7;

        return;

     label7:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r1);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void park()>();

        goto label6;

     label8:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task trySteal(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0, $r6;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.WorkQueue $r1, $r7;
        int $i0, $i2, $i3, $i4;
        java.lang.AssertionError $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        long $l1, $l5;
        java.util.concurrent.atomic.AtomicReferenceArray $r4;
        java.lang.Object $r5;
        byte $b6;
        kotlinx.coroutines.scheduling.Task $r8;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label04;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()>();

        if $i0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label04:
        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l1 = $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l1 = $l1 & 2097151L;

        $i0 = (int) $l1;

        if $i0 >= 2 goto label05;

        return null;

     label05:
        $i2 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>($i0);

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $i3 = 0;

        $l1 = 9223372036854775807L;

     label06:
        if $i3 >= $i0 goto label16;

        $i2 = $i2 + 1;

        if $i2 <= $i0 goto label07;

        $i2 = 1;

     label07:
        $r4 = $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r6 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r5;

        if $r6 == null goto label15;

        if $r6 == r0 goto label15;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label11;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i4 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()>();

        if $i4 != 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        if $z1 == 0 goto label10;

        goto label11;

     label10:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label11:
        if $z0 == 0 goto label12;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r7 = $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $l5 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: long tryStealBlockingFrom(kotlinx.coroutines.scheduling.WorkQueue)>($r7);

        goto label13;

     label12:
        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r7 = $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $l5 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: long tryStealFrom(kotlinx.coroutines.scheduling.WorkQueue)>($r7);

     label13:
        $b6 = $l5 cmp -1L;

        if $b6 != 0 goto label14;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r8 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        return $r8;

     label14:
        $b6 = $l5 cmp 0L;

        if $b6 <= 0 goto label15;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l5);

     label15:
        $i3 = $i3 + 1;

        goto label06;

     label16:
        $b6 = $l1 cmp 9223372036854775807L;

        if $b6 == 0 goto label17;

        goto label18;

     label17:
        $l1 = 0L;

     label18:
        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = $l1;

        return null;
    }

    private final void tryTerminateWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0, $r7;
        java.util.concurrent.atomic.AtomicReferenceArray $r1, $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        boolean $z0;
        long $l0;
        int $i1, $i2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        java.lang.Object $r6;
        kotlin.Unit $r8;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r9;
        java.lang.Throwable $r10;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        entermonitor $r3;

     label01:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor $r3;

        return;

     label03:
        $l0 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState>;

        $l0 = $l0 & 2097151L;

        $i1 = (int) $l0;

        $i2 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

     label04:
        if $i1 > $i2 goto label05;

        exitmonitor $r3;

        return;

     label05:
        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, -1, 1);

     label06:
        if $z0 != 0 goto label07;

        exitmonitor $r3;

        return;

     label07:
        $i1 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>(0);

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>(r0, $i1, 0);

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(java.lang.Object)>($r2);

        $l0 = $l0 & 2097151L;

        $i2 = (int) $l0;

        if $i2 == $i1 goto label08;

        $r1 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        $r6 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r7 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r6;

        $r1 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i1, $r7);

        virtualinvoke $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>($i1);

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>($r7, $i2, $i1);

     label08:
        $r1 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i2, null);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor $r3;

        $r9 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r9;

        return;

     label10:
        $r10 := @caughtexception;

        exitmonitor $r3;

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
    }

    public final kotlinx.coroutines.scheduling.Task findTask(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.Task $r1, $r3;
        kotlinx.coroutines.scheduling.WorkQueue $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r4;
        kotlinx.coroutines.scheduling.GlobalQueue $r5;
        java.lang.Object $r6;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>();

        if $z1 == 0 goto label1;

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findAnyTask(boolean)>($z0);

        return $r1;

     label1:
        if $z0 == 0 goto label2;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        $r3 = $r1;

        if $r1 != null goto label3;

        $r4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r5 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r3 = (kotlinx.coroutines.scheduling.Task) $r6;

        goto label3;

     label2:
        $r4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r5 = $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r3 = (kotlinx.coroutines.scheduling.Task) $r6;

     label3:
        if $r3 != null goto label4;

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(boolean)>(1);

        return $r1;

     label4:
        return $r3;
    }

    public final int getIndexInArray()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int i0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray>;

        return i0;
    }

    public final java.lang.Object getNextParkedWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        java.lang.Object r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>;

        return r1;
    }

    public final kotlinx.coroutines.scheduling.CoroutineScheduler getScheduler()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        return r1;
    }

    public final int nextInt(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i1 := @parameter0: int;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState>;

        $i2 = $i0 << 13;

        $i0 = $i0 ^ $i2;

        $i2 = $i0 >> 17;

        $i0 = $i0 ^ $i2;

        $i2 = $i0 << 5;

        $i2 = $i0 ^ $i2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState> = $i2;

        $i3 = $i1 + -1;

        $i0 = $i3 & $i1;

        if $i0 != 0 goto label1;

        $i1 = $i2 & $i3;

        return $i1;

     label1:
        $i0 = $i2 & 2147483647;

        $i1 = $i0 % $i1;

        return $i1;
    }

    public void run()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void runWorker()>();

        return;
    }

    public final void setIndexInArray(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        java.lang.StringBuilder $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-worker-");

        if $i0 != 0 goto label1;

        $r3 = "TERMINATED";

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setName(java.lang.String)>($r3);

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray> = $i0;

        return;
    }

    public final void setNextParkedWorker(java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: java.lang.Object;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker> = $r1;

        return;
    }

    public final boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2, $r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        if $r2 != $r5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>($r3, 4398046511104L);

     label3:
        if $r2 == $r1 goto label4;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

     label4:
        return $z0;
    }
}
