class kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext extends kotlinx.coroutines.channels.Receive
{
    public final kotlinx.coroutines.CancellableContinuation cont;
    public final kotlinx.coroutines.channels.AbstractChannel$Itr iterator;

    public void <init>(kotlinx.coroutines.channels.AbstractChannel$Itr, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext r0;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r1;
        kotlinx.coroutines.CancellableContinuation $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r2 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        specialinvoke r0.<kotlinx.coroutines.channels.Receive: void <init>()>();

        r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator> = $r1;

        r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont> = $r2;

        return;
    }

    public void completeResumeReceive(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        kotlinx.coroutines.internal.Symbol $r4;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>;

        virtualinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r1);

        $r3 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r4 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r4);

        return;
    }

    public kotlin.jvm.functions.Function1 resumeOnCancellationFun(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r2;
        kotlinx.coroutines.channels.AbstractChannel $r3;
        kotlin.jvm.functions.Function1 $r4;
        kotlinx.coroutines.CancellableContinuation $r5;
        kotlin.coroutines.CoroutineContext $r6;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>;

        $r3 = $r2.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r4 = $r3.<kotlinx.coroutines.channels.AbstractChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r6 = interfaceinvoke $r5.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r4, $r1, $r6);

        return $r4;
    }

    public void resumeReceiveClosed(kotlinx.coroutines.channels.Closed)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext r0;
        kotlinx.coroutines.channels.Closed $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        java.lang.Boolean $r4;
        java.lang.Object $r5;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r6;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: kotlinx.coroutines.channels.Closed;

        $r2 = $r1.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r2 != null goto label1;

        $r3 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r5 = staticinvoke <kotlinx.coroutines.CancellableContinuation$DefaultImpls: java.lang.Object tryResume$default(kotlinx.coroutines.CancellableContinuation,java.lang.Object,java.lang.Object,int,java.lang.Object)>($r3, $r4, null, 2, null);

        goto label2;

     label1:
        $r3 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r5 = interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResumeWithException(java.lang.Throwable)>($r2);

     label2:
        if $r5 == null goto label3;

        $r6 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>;

        virtualinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r1);

        $r3 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r5);

     label3:
        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext r0;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        $r1 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("ReceiveHasNext@", $r1);

        return $r1;
    }

    public kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object, kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        boolean $z0, $z1;
        java.lang.Boolean $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r5;
        kotlin.jvm.functions.Function1 $r6;
        kotlinx.coroutines.internal.Symbol $r7;
        java.lang.AssertionError $r8;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r3 = r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $z0 = 1;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        if $r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

     label2:
        $r6 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlin.jvm.functions.Function1 resumeOnCancellationFun(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResume(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, $r5, $r6);

        if $r2 != null goto label3;

        return null;

     label3:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label7;

        $r7 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r2 != $r7 goto label4;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label6;

        goto label7;

     label6:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label7:
        if $r1 != null goto label8;

        goto label9;

     label8:
        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: void finishPrepare()>();

     label9:
        $r7 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return $r7;
    }
}
