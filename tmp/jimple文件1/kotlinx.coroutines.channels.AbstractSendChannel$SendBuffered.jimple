public final class kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered extends kotlinx.coroutines.channels.Send
{
    public final java.lang.Object element;

    public void <init>(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlinx.coroutines.channels.Send: void <init>()>();

        r0.<kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: java.lang.Object element> = $r1;

        return;
    }

    public void completeResumeSend()
    {
        kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered r0;

        r0 := @this: kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered;

        return;
    }

    public java.lang.Object getPollResult()
    {
        kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered r0;
        java.lang.Object r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered;

        r1 = r0.<kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: java.lang.Object element>;

        return r1;
    }

    public void resumeSendClosed(kotlinx.coroutines.channels.Closed)
    {
        kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered r0;
        boolean $z0;
        kotlinx.coroutines.channels.Closed $r1;
        java.lang.AssertionError $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered;

        $r1 := @parameter0: kotlinx.coroutines.channels.Closed;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SendBuffered@");

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r3 = r0.<kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: java.lang.Object element>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r2 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r1 != null goto label1;

        return $r2;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: void finishPrepare()>();

        return $r2;
    }
}
