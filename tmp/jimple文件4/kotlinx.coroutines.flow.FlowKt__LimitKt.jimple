final class kotlinx.coroutines.flow.FlowKt__LimitKt extends java.lang.Object
{

    public static final java.lang.Object access$emitAbort$FlowKt__LimitKt(kotlinx.coroutines.flow.FlowCollector, java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Object $r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;

        $r2 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__LimitKt: java.lang.Object emitAbort$FlowKt__LimitKt(kotlinx.coroutines.flow.FlowCollector,java.lang.Object,kotlin.coroutines.Continuation)>($r2, $r0, $r1);

        return $r0;
    }

    public static final java.lang.Object collectWhile(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1 $r3;
        int $i0;
        java.lang.Object $r4, $r5;
        kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1 $r6;
        kotlinx.coroutines.flow.internal.AbortFlowException $r7;
        java.lang.IllegalStateException $r8;
        kotlinx.coroutines.flow.FlowCollector $r9;
        kotlin.Unit r10;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: void <init>(kotlin.coroutines.Continuation)>($r2);

     label02:
        $r4 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: int label>;

        if $i0 == 0 goto label07;

        if $i0 != 1 goto label06;

        $r5 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: java.lang.Object L$0>;

        $r6 = (kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1) $r5;

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label04:
        goto label12;

     label05:
        $r7 := @caughtexception;

        goto label11;

     label06:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r8;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r6 = new kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1;

        specialinvoke $r6.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1: void <init>(kotlin.jvm.functions.Function2)>($r1);

        $r9 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: java.lang.Object L$0> = $r6;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$1: int label> = 1;

     label08:
        $r4 = interfaceinvoke $r0.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r9, $r3);

     label09:
        if $r4 != $r5 goto label12;

        return $r5;

     label10:
        $r7 := @caughtexception;

     label11:
        $r9 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        staticinvoke <kotlinx.coroutines.flow.internal.FlowExceptions_commonKt: void checkOwnership(kotlinx.coroutines.flow.internal.AbortFlowException,kotlinx.coroutines.flow.FlowCollector)>($r7, $r9);

     label12:
        r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r10;

        catch kotlinx.coroutines.flow.internal.AbortFlowException from label03 to label04 with label05;
        catch kotlinx.coroutines.flow.internal.AbortFlowException from label08 to label09 with label10;
    }

    private static final java.lang.Object collectWhile$$forInline(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1 $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;
        kotlinx.coroutines.flow.internal.AbortFlowException $r5;
        kotlin.Unit r6;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = new kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1: void <init>(kotlin.jvm.functions.Function2)>($r2);

        $r4 = (kotlinx.coroutines.flow.FlowCollector) $r3;

     label1:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        interfaceinvoke $r1.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r4, $r0);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) $r3;

        staticinvoke <kotlinx.coroutines.flow.internal.FlowExceptions_commonKt: void checkOwnership(kotlinx.coroutines.flow.internal.AbortFlowException,kotlinx.coroutines.flow.FlowCollector)>($r5, $r4);

     label4:
        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r6;

        catch kotlinx.coroutines.flow.internal.AbortFlowException from label1 to label2 with label3;
    }

    public static final kotlinx.coroutines.flow.Flow drop(kotlinx.coroutines.flow.Flow, int)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1 $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = new kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,int)>($r0, $i0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;

     label3:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Drop count should be non-negative, but had ", $r2);

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        $r5 = (java.lang.Throwable) $r4;

        throw $r5;
    }

    public static final kotlinx.coroutines.flow.Flow dropWhile(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    private static final java.lang.Object emitAbort$FlowKt__LimitKt(kotlinx.coroutines.flow.FlowCollector, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;
        java.lang.Object $r1, $r4, $r5;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1 $r3;
        int $i0;
        java.lang.IllegalStateException $r6;
        kotlinx.coroutines.flow.internal.AbortFlowException $r7;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: int label> = $i0;

        goto label2;

     label1:
        $r3 = new kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: void <init>(kotlin.coroutines.Continuation)>($r2);

     label2:
        $r4 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: int label>;

        if $i0 == 0 goto label4;

        if $i0 == 1 goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r6;

     label3:
        $r1 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: java.lang.Object L$0>;

        $r0 = (kotlinx.coroutines.flow.FlowCollector) $r1;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label5;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: java.lang.Object L$0> = $r0;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$emitAbort$1: int label> = 1;

        $r1 = interfaceinvoke $r0.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r3);

        if $r1 != $r5 goto label5;

        return $r5;

     label5:
        $r7 = new kotlinx.coroutines.flow.internal.AbortFlowException;

        specialinvoke $r7.<kotlinx.coroutines.flow.internal.AbortFlowException: void <init>(kotlinx.coroutines.flow.FlowCollector)>($r0);

        throw $r7;
    }

    public static final kotlinx.coroutines.flow.Flow take(kotlinx.coroutines.flow.Flow, int)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = new kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,int)>($r0, $i0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be positive");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        $r5 = (java.lang.Throwable) $r4;

        throw $r5;
    }

    public static final kotlinx.coroutines.flow.Flow takeWhile(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow transformWhile(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1 $r2;
        kotlin.jvm.functions.Function2 $r3;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        $r2 = new kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation)>($r1, $r0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)>($r3);

        return $r1;
    }
}
