public final class kotlinx.coroutines.internal.LockFreeTaskQueueCore extends java.lang.Object
{
    public static final int ADD_CLOSED;
    public static final int ADD_FROZEN;
    public static final int ADD_SUCCESS;
    public static final int CAPACITY_BITS;
    public static final long CLOSED_MASK;
    public static final int CLOSED_SHIFT;
    public static final kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion;
    public static final long FROZEN_MASK;
    public static final int FROZEN_SHIFT;
    public static final long HEAD_MASK;
    public static final int HEAD_SHIFT;
    public static final int INITIAL_CAPACITY;
    public static final int MAX_CAPACITY_MASK;
    public static final int MIN_ADD_SPIN_CAPACITY;
    public static final kotlinx.coroutines.internal.Symbol REMOVE_FROZEN;
    public static final long TAIL_MASK;
    public static final int TAIL_SHIFT;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU;
    private volatile java.lang.Object _next;
    private volatile long _state;
    private java.util.concurrent.atomic.AtomicReferenceArray array;
    private final int capacity;
    private final int mask;
    private final boolean singleConsumer;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion $r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int TAIL_SHIFT> = 30;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: long TAIL_MASK> = 1152921503533105152L;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int MIN_ADD_SPIN_CAPACITY> = 1024;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int MAX_CAPACITY_MASK> = 1073741823;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int INITIAL_CAPACITY> = 8;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int HEAD_SHIFT> = 0;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: long HEAD_MASK> = 1073741823L;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int FROZEN_SHIFT> = 60;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: long FROZEN_MASK> = 1152921504606846976L;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int CLOSED_SHIFT> = 61;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: long CLOSED_MASK> = 2305843009213693952L;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int CAPACITY_BITS> = 30;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int ADD_SUCCESS> = 0;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int ADD_FROZEN> = 1;

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: int ADD_CLOSED> = 2;

        $r0 = new kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion;

        specialinvoke $r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion> = $r0;

        $r1 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r1.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("REMOVE_FROZEN");

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.Symbol REMOVE_FROZEN> = $r1;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;", class "Ljava/lang/Object;", "_next");

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU> = $r2;

        $r3 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;", "_state");

        <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU> = $r3;

        return;
    }

    public void <init>(int, boolean)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        java.lang.String $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int capacity> = $i0;

        r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean singleConsumer> = $z0;

        $i1 = $i0 + -1;

        r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask> = $i1;

        r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next> = null;

        r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state> = 0L;

        $r2 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array> = $r2;

        $z0 = 0;

        if $i1 > 1073741823 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = "Check failed.";

        if $z1 == 0 goto label5;

        $i0 = $i0 & $i1;

        if $i0 != 0 goto label3;

        $z0 = 1;

     label3:
        if $z0 == 0 goto label4;

        return;

     label4:
        $r3 = new java.lang.IllegalStateException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        $r4 = (java.lang.Throwable) $r3;

        throw $r4;

     label5:
        $r3 = new java.lang.IllegalStateException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        $r4 = (java.lang.Throwable) $r3;

        throw $r4;
    }

    private final kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0, $r6;
        long $l0, $l2;
        int $i1, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion $r5;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder $r7;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $l0 := @parameter0: long;

        $r6 = new kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $i1 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int capacity>;

        $i1 = $i1 * 2;

        $z0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean singleConsumer>;

        specialinvoke $r6.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>($i1, $z0);

        $l2 = 1073741823L & $l0;

        $l2 = $l2 >> 0;

        $i1 = (int) $l2;

        $l2 = 1152921503533105152L & $l0;

        $l2 = $l2 >> 30;

        $i3 = (int) $l2;

     label1:
        $i4 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i5 = $i1 & $i4;

        $i6 = $i3 & $i4;

        if $i5 == $i6 goto label3;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i4 = $i4 & $i1;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i4);

        $r4 = $r3;

        if $r3 != null goto label2;

        $r7 = new kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder;

        $r4 = $r7;

        specialinvoke $r7.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: void <init>(int)>($i1);

     label2:
        $r2 = $r6.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i4 = $r6.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i4 = $i4 & $i1;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i4, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion>;

        $l0 = virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long wo(long,long)>($l0, 1152921504606846976L);

        $r6.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state> = $l0;

        return $r6;
    }

    private final kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0, $r1;
        long $l0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $l0 := @parameter0: long;

     label1:
        $r2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next>;

        $r1 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) $r2;

        if $r1 == null goto label2;

        return $r1;

     label2:
        $r3 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r1 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long)>($l0);

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, null, $r1);

        goto label1;
    }

    private final kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int, java.lang.Object)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder $r4;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i1 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i1 = $i1 & $i0;

        $r2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder) $r2;

        $i1 = $r4.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: int index>;

        if $i1 != $i0 goto label1;

        $r3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i1 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i0 = $i0 & $i1;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r1);

        return r0;

     label1:
        return null;
    }

    private final long markFrozen()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0, $l1;
        boolean $z0;
        byte $b2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

     label1:
        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l1 = $l0 & 1152921504606846976L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        return $l0;

     label2:
        $l1 = $l0 | 1152921504606846976L;

        $r1 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return $l1;
    }

    private final kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int, int)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0, $l4;
        int $i1, $i2, $i3;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r2;
        byte $b5;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r4;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $i2 := @parameter0: int;

        $i3 := @parameter1: int;

     label1:
        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $r1 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion>;

        $l4 = 1073741823L & $l0;

        $z0 = 0;

        $l4 = $l4 >> 0;

        $i1 = (int) $l4;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label4;

        if $i1 != $i2 goto label2;

        $z0 = 1;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $l4 = 1152921504606846976L & $l0;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label5;

        r0 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>();

        return r0;

     label5:
        $r3 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU>;

        $l4 = virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>($l0, $i3);

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l4);

        if $z0 == 0 goto label1;

        $r4 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i2 = $i2 & $i1;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i2, null);

        return null;
    }

    public final int addLast(java.lang.Object)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0, $r6;
        int $i0, $i1, $i5, $i6, $i7;
        java.lang.Object $r1, $r4;
        long $l2, $l3;
        byte $b4;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion $r2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $l2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l3 = 3458764513820540928L & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        $r2 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion>;

        $i5 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: int addFailReason(long)>($l2);

        return $i5;

     label2:
        $r2 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion>;

        $l3 = 1073741823L & $l2;

        $l3 = $l3 >> 0;

        $i6 = (int) $l3;

        $l3 = 1152921503533105152L & $l2;

        $l3 = $l3 >> 30;

        $i5 = (int) $l3;

        $i0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i1 = $i5 + 2;

        $i1 = $i1 & $i0;

        $i7 = $i6 & $i0;

        if $i1 != $i7 goto label3;

        return 1;

     label3:
        $z0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean singleConsumer>;

        if $z0 != 0 goto label4;

        $r3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i1 = $i5 & $i0;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i1);

        if $r4 == null goto label4;

        $i0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int capacity>;

        if $i0 < 1024 goto label7;

        $i5 = $i5 - $i6;

        $i5 = $i5 & 1073741823;

        $i0 = $i0 >> 1;

        if $i5 <= $i0 goto label1;

        return 1;

     label4:
        $i6 = $i5 + 1;

        $i6 = $i6 & 1073741823;

        $r5 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU>;

        $l3 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateTail(long,int)>($l2, $i6);

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l2, $l3);

        if $z0 == 0 goto label1;

        $r3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i0 = $i5 & $i0;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r1);

     label5:
        $l2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l2 = $l2 & 1152921504606846976L;

        $b4 = $l2 cmp 0L;

        if $b4 != 0 goto label6;

        return 0;

     label6:
        r0 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>();

        $r6 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int,java.lang.Object)>($i5, $r1);

        r0 = $r6;

        if $r6 != null goto label5;

        return 0;

     label7:
        return 1;
    }

    public final boolean close()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0, $l1;
        boolean $z0;
        byte $b2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

     label1:
        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l1 = $l0 & 2305843009213693952L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        return 1;

     label2:
        $l1 = 1152921504606846976L & $l0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        return 0;

     label3:
        $l1 = $l0 | 2305843009213693952L;

        $r1 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return 1;
    }

    public final int getSize()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0, $l1;
        int $i2, $i3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l1 = 1073741823L & $l0;

        $l1 = $l1 >> 0;

        $i2 = (int) $l1;

        $l0 = $l0 & 1152921503533105152L;

        $l0 = $l0 >> 30;

        $i3 = (int) $l0;

        $i2 = $i3 - $i2;

        $i2 = $i2 & 1073741823;

        return $i2;
    }

    public final boolean isClosed()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0;
        byte $b1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l0 = $l0 & 2305843009213693952L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isEmpty()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0, $l1;
        int $i2, $i3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l1 = 1073741823L & $l0;

        $l1 = $l1 >> 0;

        $i2 = (int) $l1;

        $l0 = $l0 & 1152921503533105152L;

        $l0 = $l0 >> 30;

        $i3 = (int) $l0;

        if $i2 != $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.util.List map(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r2;
        int $i0, $i3, $i4, $i5, $i6;
        long $l1, $l2;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.util.List $r5;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = new java.util.ArrayList;

        $i0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int capacity>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $l1 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l2 = 1073741823L & $l1;

        $l2 = $l2 >> 0;

        $i0 = (int) $l2;

        $l1 = $l1 & 1152921503533105152L;

        $l1 = $l1 >> 30;

        $i3 = (int) $l1;

     label1:
        $i4 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i5 = $i0 & $i4;

        $i6 = $i3 & $i4;

        if $i5 == $i6 goto label3;

        $r3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i4 = $i4 & $i0;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i4);

        if $r4 == null goto label2;

        $z0 = $r4 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder;

        if $z0 != 0 goto label2;

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r5 = (java.util.List) $r2;

        return $r5;
    }

    public final kotlinx.coroutines.internal.LockFreeTaskQueueCore next()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0;
        long $l0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        $l0 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long markFrozen()>();

        r0 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long)>($l0);

        return r0;
    }

    public final java.lang.Object removeFirstOrNull()
    {
        kotlinx.coroutines.internal.LockFreeTaskQueueCore r0, $r5;
        long $l0, $l4;
        int $i1, $i2, $i3, $i6;
        byte $b5;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;
        kotlinx.coroutines.internal.Symbol r6;

        r0 := @this: kotlinx.coroutines.internal.LockFreeTaskQueueCore;

     label1:
        $l0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state>;

        $l4 = 1152921504606846976L & $l0;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        r6 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.Symbol REMOVE_FROZEN>;

        return r6;

     label2:
        $r1 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion>;

        $l4 = 1073741823L & $l0;

        $l4 = $l4 >> 0;

        $i2 = (int) $l4;

        $l4 = 1152921503533105152L & $l0;

        $l4 = $l4 >> 30;

        $i1 = (int) $l4;

        $i3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i6 = $i1 & $i3;

        $i1 = $i2 & $i3;

        if $i6 != $i1 goto label3;

        return null;

     label3:
        $r2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i3 = $i3 & $i2;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i3);

        if $r3 != null goto label4;

        $z0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean singleConsumer>;

        if $z0 == 0 goto label1;

        return null;

     label4:
        $z0 = $r3 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder;

        if $z0 == 0 goto label5;

        return null;

     label5:
        $i3 = $i2 + 1;

        $i3 = $i3 & 1073741823;

        $r4 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU>;

        $l4 = virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)>($l0, $i3);

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l4);

        if $z0 == 0 goto label6;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array>;

        $i3 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask>;

        $i2 = $i3 & $i2;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i2, null);

        return $r3;

     label6:
        $z0 = r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean singleConsumer>;

        if $z0 != 0 goto label7;

        goto label1;

     label7:
        $r5 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int,int)>($i2, $i3);

        r0 = $r5;

        if $r5 != null goto label7;

        return $r3;
    }
}
