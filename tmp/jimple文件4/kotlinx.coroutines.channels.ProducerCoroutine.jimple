public class kotlinx.coroutines.channels.ProducerCoroutine extends kotlinx.coroutines.channels.ChannelCoroutine implements kotlinx.coroutines.channels.ProducerScope
{

    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.Channel)
    {
        kotlinx.coroutines.channels.ProducerCoroutine r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ProducerCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlinx.coroutines.channels.Channel;

        specialinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlinx.coroutines.channels.Channel,boolean,boolean)>($r1, $r2, 1, 1);

        return;
    }

    public volatile kotlinx.coroutines.channels.SendChannel getChannel()
    {
        kotlinx.coroutines.channels.ProducerCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        kotlinx.coroutines.channels.SendChannel $r2;

        r0 := @this: kotlinx.coroutines.channels.ProducerCoroutine;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ProducerCoroutine: kotlinx.coroutines.channels.Channel getChannel()>();

        $r2 = (kotlinx.coroutines.channels.SendChannel) $r1;

        return $r2;
    }

    public boolean isActive()
    {
        kotlinx.coroutines.channels.ProducerCoroutine r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.ProducerCoroutine;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: boolean isActive()>();

        return $z0;
    }

    protected void onCancelled(java.lang.Throwable, boolean)
    {
        kotlinx.coroutines.channels.ProducerCoroutine r0;
        java.lang.Throwable $r1;
        boolean $z0, $z1;
        kotlinx.coroutines.channels.Channel $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.channels.ProducerCoroutine;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.ProducerCoroutine: kotlinx.coroutines.channels.Channel get_channel()>();

        $z1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: boolean close(java.lang.Throwable)>($r1);

        if $z1 != 0 goto label1;

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.ProducerCoroutine: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r3, $r1);

     label1:
        return;
    }

    public volatile void onCompleted(java.lang.Object)
    {
        kotlinx.coroutines.channels.ProducerCoroutine r0;
        java.lang.Object $r1;
        kotlin.Unit $r2;

        r0 := @this: kotlinx.coroutines.channels.ProducerCoroutine;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.Unit) $r1;

        virtualinvoke r0.<kotlinx.coroutines.channels.ProducerCoroutine: void onCompleted(kotlin.Unit)>($r2);

        return;
    }

    protected void onCompleted(kotlin.Unit)
    {
        kotlinx.coroutines.channels.ProducerCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        kotlin.Unit $r2;
        kotlinx.coroutines.channels.SendChannel $r3;

        r0 := @this: kotlinx.coroutines.channels.ProducerCoroutine;

        $r2 := @parameter0: kotlin.Unit;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ProducerCoroutine: kotlinx.coroutines.channels.Channel get_channel()>();

        $r3 = (kotlinx.coroutines.channels.SendChannel) $r1;

        staticinvoke <kotlinx.coroutines.channels.SendChannel$DefaultImpls: boolean close$default(kotlinx.coroutines.channels.SendChannel,java.lang.Throwable,int,java.lang.Object)>($r3, null, 1, null);

        return;
    }
}
