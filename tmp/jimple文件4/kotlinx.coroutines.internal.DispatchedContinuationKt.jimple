public final class kotlinx.coroutines.internal.DispatchedContinuationKt extends java.lang.Object
{
    public static final kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED;
    private static final kotlinx.coroutines.internal.Symbol UNDEFINED;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("UNDEFINED");

        <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol UNDEFINED> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("REUSABLE_CLAIMED");

        <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED> = $r0;

        return;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol UNDEFINED>;

        return r0;
    }

    private static final boolean executeUnconfined(kotlinx.coroutines.internal.DispatchedContinuation, java.lang.Object, int, boolean, kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        kotlinx.coroutines.internal.DispatchedContinuation $r1;
        java.lang.Object $r2;
        int $i0;
        boolean $z0, $z1;
        java.lang.AssertionError $r3;
        kotlinx.coroutines.ThreadLocalEventLoop $r4;
        kotlinx.coroutines.EventLoop $r5;
        kotlinx.coroutines.DispatchedTask $r6;
        java.lang.Throwable $r7, $r8;

        $r1 := @parameter0: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r0 := @parameter4: kotlin.jvm.functions.Function0;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label04;

        if $i0 == -1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $r4 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke $r5.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        if $z0 == 0 goto label05;

        return 0;

     label05:
        $z0 = virtualinvoke $r5.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label06;

        $r1.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r2;

        $r1.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = $i0;

        $r6 = (kotlinx.coroutines.DispatchedTask) $r1;

        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r6);

        return 1;

     label06:
        $r6 = (kotlinx.coroutines.DispatchedTask) $r1;

        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label07:
        interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label08:
        $z0 = virtualinvoke $r5.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label09:
        if $z0 != 0 goto label08;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        goto label13;

     label10:
        $r7 := @caughtexception;

     label11:
        virtualinvoke $r6.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r7, null);

     label12:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label13:
        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return 0;

     label14:
        $r8 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r8;

        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label14;
    }

    static boolean executeUnconfined$default(kotlinx.coroutines.internal.DispatchedContinuation, java.lang.Object, int, boolean, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function0 $r0;
        kotlinx.coroutines.internal.DispatchedContinuation $r1;
        java.lang.Object $r2, $r3;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;
        kotlinx.coroutines.ThreadLocalEventLoop $r5;
        kotlinx.coroutines.EventLoop $r6;
        kotlinx.coroutines.DispatchedTask $r7;
        java.lang.Throwable $r8, $r9;

        $r1 := @parameter0: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r0 := @parameter4: kotlin.jvm.functions.Function0;

        $i1 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label01;

        $z0 = 0;

     label01:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label05;

        if $i0 == -1 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 == 0 goto label04;

        goto label05;

     label04:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label05:
        $r5 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        if $z0 == 0 goto label06;

        return 0;

     label06:
        $z0 = virtualinvoke $r6.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label07;

        $r1.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r2;

        $r1.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = $i0;

        $r7 = (kotlinx.coroutines.DispatchedTask) $r1;

        virtualinvoke $r6.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r7);

        return 1;

     label07:
        $r7 = (kotlinx.coroutines.DispatchedTask) $r1;

        virtualinvoke $r6.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label08:
        interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label09:
        $z0 = virtualinvoke $r6.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label10:
        if $z0 != 0 goto label09;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        goto label14;

     label11:
        $r8 := @caughtexception;

     label12:
        virtualinvoke $r7.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r8, null);

     label13:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label14:
        virtualinvoke $r6.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return 0;

     label15:
        $r9 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r6.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r9;

        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    public static void getREUSABLE_CLAIMED$annotations()
    {
        return;
    }

    private static void getUNDEFINED$annotations()
    {
        return;
    }

    public static final void resumeCancellableWith(kotlin.coroutines.Continuation, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2, $r5;
        kotlin.jvm.functions.Function1 $r3;
        boolean $z0;
        kotlinx.coroutines.internal.DispatchedContinuation $r4;
        kotlinx.coroutines.CoroutineDispatcher $r6;
        kotlin.coroutines.CoroutineContext $r7;
        java.lang.Runnable $r8;
        kotlinx.coroutines.ThreadLocalEventLoop $r9;
        kotlinx.coroutines.EventLoop $r10;
        kotlinx.coroutines.DispatchedTask $r11;
        kotlinx.coroutines.Job$Key $r12;
        kotlin.coroutines.CoroutineContext$Key $r13;
        kotlin.coroutines.CoroutineContext$Element $r14;
        kotlinx.coroutines.Job $r15;
        java.util.concurrent.CancellationException $r16;
        java.lang.Throwable $r17, $r21, $r22;
        kotlin.Result$Companion $r18;
        kotlinx.coroutines.UndispatchedCoroutine $r19;
        kotlin.Unit $r20;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $z0 = $r1 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if $z0 == 0 goto label33;

        $r4 = (kotlinx.coroutines.internal.DispatchedContinuation) $r1;

        $r5 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlin.jvm.functions.Function1)>($r2, $r3);

        $r6 = $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r7 = virtualinvoke $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>($r7);

        if $z0 == 0 goto label01;

        $r4.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r5;

        $r4.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r6 = $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r7 = virtualinvoke $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r8 = (java.lang.Runnable) $r4;

        virtualinvoke $r6.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r7, $r8);

        return;

     label01:
        staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $r9 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r10 = virtualinvoke $r9.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        $z0 = virtualinvoke $r10.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label02;

        $r4.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r5;

        $r4.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r11 = (kotlinx.coroutines.DispatchedTask) $r4;

        virtualinvoke $r10.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r11);

        return;

     label02:
        $r11 = (kotlinx.coroutines.DispatchedTask) $r4;

        virtualinvoke $r10.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label03:
        $r7 = virtualinvoke $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r12 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r13 = (kotlin.coroutines.CoroutineContext$Key) $r12;

        $r14 = interfaceinvoke $r7.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r13);

        $r15 = (kotlinx.coroutines.Job) $r14;

     label04:
        if $r15 == null goto label09;

     label05:
        $z0 = interfaceinvoke $r15.<kotlinx.coroutines.Job: boolean isActive()>();

     label06:
        if $z0 != 0 goto label09;

     label07:
        $r16 = interfaceinvoke $r15.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        $r17 = (java.lang.Throwable) $r16;

        virtualinvoke $r4.<kotlinx.coroutines.internal.DispatchedContinuation: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>($r5, $r17);

        $r1 = (kotlin.coroutines.Continuation) $r4;

        $r18 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r17 = (java.lang.Throwable) $r16;

        $r5 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r17);

        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r5);

     label08:
        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        if $z0 != 0 goto label27;

     label11:
        $r1 = $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r5 = $r4.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r7 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r7, $r5);

        $r0 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

     label12:
        if $r5 == $r0 goto label15;

     label13:
        $r19 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r7, $r5);

     label14:
        goto label16;

     label15:
        $r19 = null;

     label16:
        $r1 = $r4.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        $r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        if $r19 == null goto label20;

     label18:
        $z0 = virtualinvoke $r19.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

     label19:
        if $z0 == 0 goto label27;

     label20:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r7, $r5);

     label21:
        goto label27;

     label22:
        $r17 := @caughtexception;

        if $r19 == null goto label25;

     label23:
        $z0 = virtualinvoke $r19.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

     label24:
        if $z0 == 0 goto label26;

     label25:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r7, $r5);

     label26:
        throw $r17;

     label27:
        $z0 = virtualinvoke $r10.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label28:
        if $z0 != 0 goto label27;

        goto label31;

     label29:
        $r21 := @caughtexception;

     label30:
        virtualinvoke $r11.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r21, null);

     label31:
        virtualinvoke $r10.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        return;

     label32:
        $r22 := @caughtexception;

        virtualinvoke $r10.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        throw $r22;

     label33:
        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        return;

        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label25 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label32;
    }

    public static void resumeCancellableWith$default(kotlin.coroutines.Continuation, java.lang.Object, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1, $r2;
        kotlin.jvm.functions.Function1 $r3;
        int $i0;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $r1 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = null;

     label1:
        staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: void resumeCancellableWith(kotlin.coroutines.Continuation,java.lang.Object,kotlin.jvm.functions.Function1)>($r0, $r1, $r3);

        return;
    }

    public static final boolean yieldUndispatched(kotlinx.coroutines.internal.DispatchedContinuation)
    {
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlin.Unit $r1;
        kotlinx.coroutines.ThreadLocalEventLoop $r2;
        kotlinx.coroutines.EventLoop $r3;
        boolean $z0;
        kotlinx.coroutines.DispatchedTask $r4;
        java.lang.Throwable $r5, $r6;

        $r0 := @parameter0: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $r2 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label2;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r1;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r4 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r4);

        return 1;

     label2:
        $r4 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label3:
        virtualinvoke $r0.<kotlinx.coroutines.internal.DispatchedContinuation: void run()>();

     label4:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label5:
        if $z0 != 0 goto label4;

        goto label8;

     label6:
        $r5 := @caughtexception;

     label7:
        virtualinvoke $r4.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r5, null);

     label8:
        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        return 0;

     label9:
        $r6 := @caughtexception;

        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        throw $r6;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label9;
    }
}
