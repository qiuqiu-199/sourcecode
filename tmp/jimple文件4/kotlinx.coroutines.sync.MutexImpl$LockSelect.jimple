final class kotlinx.coroutines.sync.MutexImpl$LockSelect extends kotlinx.coroutines.sync.MutexImpl$LockWaiter
{
    public final kotlin.jvm.functions.Function2 block;
    public final kotlinx.coroutines.selects.SelectInstance select;
    final kotlinx.coroutines.sync.MutexImpl this$0;

    public void <init>(kotlinx.coroutines.sync.MutexImpl, java.lang.Object, kotlinx.coroutines.selects.SelectInstance, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.sync.MutexImpl$LockSelect r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectInstance $r3;
        kotlin.jvm.functions.Function2 $r4;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockSelect;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlinx.coroutines.selects.SelectInstance;

        $r4 := @parameter3: kotlin.jvm.functions.Function2;

        r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.sync.MutexImpl this$0> = $r1;

        specialinvoke r0.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: void <init>(kotlinx.coroutines.sync.MutexImpl,java.lang.Object)>($r1, $r2);

        r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.selects.SelectInstance select> = $r3;

        r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlin.jvm.functions.Function2 block> = $r4;

        return;
    }

    public void completeResumeLockWaiter()
    {
        kotlinx.coroutines.sync.MutexImpl$LockSelect r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.sync.MutexImpl $r2, $r3;
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.selects.SelectInstance $r5;
        kotlinx.coroutines.sync.MutexImpl$LockSelect$completeResumeLockWaiter$1 $r6;
        kotlin.jvm.functions.Function1 $r7;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockSelect;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlin.jvm.functions.Function2 block>;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r5 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.selects.SelectInstance select>;

        $r4 = interfaceinvoke $r5.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.Continuation getCompletion()>();

        $r6 = new kotlinx.coroutines.sync.MutexImpl$LockSelect$completeResumeLockWaiter$1;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.sync.MutexImpl this$0>;

        specialinvoke $r6.<kotlinx.coroutines.sync.MutexImpl$LockSelect$completeResumeLockWaiter$1: void <init>(kotlinx.coroutines.sync.MutexImpl,kotlinx.coroutines.sync.MutexImpl$LockSelect)>($r3, r0);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1)>($r1, $r2, $r4, $r7);

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.sync.MutexImpl$LockSelect r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.selects.SelectInstance $r4;
        kotlinx.coroutines.sync.MutexImpl $r5;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockSelect;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LockSelect[");

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: java.lang.Object owner>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.selects.SelectInstance select>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        $r5 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.sync.MutexImpl this$0>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public boolean tryResumeLockWaiter()
    {
        kotlinx.coroutines.sync.MutexImpl$LockSelect r0;
        boolean $z0;
        kotlinx.coroutines.selects.SelectInstance $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$LockSelect;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: boolean take()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$LockSelect: kotlinx.coroutines.selects.SelectInstance select>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
