public class kotlinx.coroutines.channels.ChannelCoroutine extends kotlinx.coroutines.AbstractCoroutine implements kotlinx.coroutines.channels.Channel
{
    private final kotlinx.coroutines.channels.Channel _channel;

    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.Channel, boolean, boolean)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.channels.Channel $r2;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlinx.coroutines.channels.Channel;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        specialinvoke r0.<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean,boolean)>($r1, $z0, $z1);

        r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel> = $r2;

        return;
    }

    public void cancel()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        java.lang.String $r1;
        kotlinx.coroutines.JobCancellationException $r2;
        kotlinx.coroutines.JobSupport $r3;
        kotlinx.coroutines.Job $r4;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = new kotlinx.coroutines.JobCancellationException;

        $r3 = (kotlinx.coroutines.JobSupport) r0;

        $r1 = staticinvoke <kotlinx.coroutines.JobSupport: java.lang.String access$cancellationExceptionMessage(kotlinx.coroutines.JobSupport)>($r3);

        $r4 = (kotlinx.coroutines.Job) $r3;

        specialinvoke $r2.<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>($r1, null, $r4);

        $r5 = (java.lang.Throwable) $r2;

        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: void cancelInternal(java.lang.Throwable)>($r5);

        return;
    }

    public final void cancel(java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        java.util.concurrent.CancellationException $r1;
        boolean $z0;
        kotlinx.coroutines.JobCancellationException $r2;
        kotlinx.coroutines.JobSupport $r3;
        java.lang.String $r4;
        kotlinx.coroutines.Job $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        if $r1 != null goto label2;

        $r2 = new kotlinx.coroutines.JobCancellationException;

        $r3 = (kotlinx.coroutines.JobSupport) r0;

        $r4 = staticinvoke <kotlinx.coroutines.JobSupport: java.lang.String access$cancellationExceptionMessage(kotlinx.coroutines.JobSupport)>($r3);

        $r5 = (kotlinx.coroutines.Job) $r3;

        specialinvoke $r2.<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>($r4, null, $r5);

        $r1 = (java.util.concurrent.CancellationException) $r2;

     label2:
        $r6 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: void cancelInternal(java.lang.Throwable)>($r6);

        return;
    }

    public final boolean cancel(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.JobCancellationException $r3;
        kotlinx.coroutines.JobSupport $r4;
        kotlinx.coroutines.Job $r5;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 := @parameter0: java.lang.Throwable;

        $r3 = new kotlinx.coroutines.JobCancellationException;

        $r4 = (kotlinx.coroutines.JobSupport) r0;

        $r1 = staticinvoke <kotlinx.coroutines.JobSupport: java.lang.String access$cancellationExceptionMessage(kotlinx.coroutines.JobSupport)>($r4);

        $r5 = (kotlinx.coroutines.Job) $r4;

        specialinvoke $r3.<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>($r1, null, $r5);

        $r2 = (java.lang.Throwable) $r3;

        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: void cancelInternal(java.lang.Throwable)>($r2);

        return 1;
    }

    public void cancelInternal(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        java.util.concurrent.CancellationException $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.JobSupport $r3;
        kotlinx.coroutines.channels.Channel $r4;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 := @parameter0: java.lang.Throwable;

        $r3 = (kotlinx.coroutines.JobSupport) r0;

        $r1 = staticinvoke <kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException$default(kotlinx.coroutines.JobSupport,java.lang.Throwable,java.lang.String,int,java.lang.Object)>($r3, $r2, null, 1, null);

        $r4 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        interfaceinvoke $r4.<kotlinx.coroutines.channels.Channel: void cancel(java.util.concurrent.CancellationException)>($r1);

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: boolean cancelCoroutine(java.lang.Throwable)>($r2);

        return;
    }

    public boolean close(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: boolean close(java.lang.Throwable)>($r2);

        return $z0;
    }

    public final kotlinx.coroutines.channels.Channel getChannel()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 = (kotlinx.coroutines.channels.Channel) r0;

        return $r1;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceive()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.selects.SelectClause1 $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.selects.SelectClause1 getOnReceive()>();

        return $r1;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceiveCatching()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.selects.SelectClause1 $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.selects.SelectClause1 getOnReceiveCatching()>();

        return $r1;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceiveOrNull()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.selects.SelectClause1 $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.selects.SelectClause1 getOnReceiveOrNull()>();

        return $r1;
    }

    public kotlinx.coroutines.selects.SelectClause2 getOnSend()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.selects.SelectClause2 $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.selects.SelectClause2 getOnSend()>();

        return $r1;
    }

    protected final kotlinx.coroutines.channels.Channel get_channel()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        return r1;
    }

    public void invokeOnClose(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: void invokeOnClose(kotlin.jvm.functions.Function1)>($r1);

        return;
    }

    public boolean isClosedForReceive()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        boolean $z0;
        kotlinx.coroutines.channels.Channel $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: boolean isClosedForReceive()>();

        return $z0;
    }

    public boolean isClosedForSend()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        boolean $z0;
        kotlinx.coroutines.channels.Channel $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: boolean isClosedForSend()>();

        return $z0;
    }

    public boolean isEmpty()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        boolean $z0;
        kotlinx.coroutines.channels.Channel $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: boolean isEmpty()>();

        return $z0;
    }

    public kotlinx.coroutines.channels.ChannelIterator iterator()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.ChannelIterator $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.channels.ChannelIterator iterator()>();

        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $z0 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: boolean offer(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.Object poll()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: java.lang.Object poll()>();

        return $r1;
    }

    public java.lang.Object receive(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r3 := @parameter0: kotlin.coroutines.Continuation;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: java.lang.Object receive(kotlin.coroutines.Continuation)>($r3);

        return $r2;
    }

    public java.lang.Object receiveCatching-JP2dKIU(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r3 := @parameter0: kotlin.coroutines.Continuation;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: java.lang.Object receiveCatching-JP2dKIU(kotlin.coroutines.Continuation)>($r3);

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r2;
    }

    public java.lang.Object receiveOrNull(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        java.lang.Object $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r3 := @parameter0: kotlin.coroutines.Continuation;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: java.lang.Object receiveOrNull(kotlin.coroutines.Continuation)>($r3);

        return $r2;
    }

    public java.lang.Object send(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.channels.Channel $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r3 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: java.lang.Object send(java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r1);

        return $r3;
    }

    public java.lang.Object tryReceive-PtdJZtk()
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.Channel $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: java.lang.Object tryReceive-PtdJZtk()>();

        return $r1;
    }

    public java.lang.Object trySend-JP2dKIU(java.lang.Object)
    {
        kotlinx.coroutines.channels.ChannelCoroutine r0;
        kotlinx.coroutines.channels.Channel $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelCoroutine;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelCoroutine: kotlinx.coroutines.channels.Channel _channel>;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.channels.Channel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r2);

        return $r2;
    }
}
