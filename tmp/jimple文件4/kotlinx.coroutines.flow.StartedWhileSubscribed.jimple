final class kotlinx.coroutines.flow.StartedWhileSubscribed extends java.lang.Object implements kotlinx.coroutines.flow.SharingStarted
{
    private final long replayExpiration;
    private final long stopTimeout;

    public void <init>(long, long)
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed r0;
        long $l0, $l1;
        byte $b2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout> = $l0;

        r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration> = $l1;

        $b2 = $l0 cmp 0L;

        $z0 = 1;

        if $b2 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        return;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replayExpiration(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms) cannot be negative");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r4 = (java.lang.Throwable) $r3;

        throw $r4;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopTimeout(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms) cannot be negative");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r4 = (java.lang.Throwable) $r3;

        throw $r4;
    }

    public static final long access$getReplayExpiration$p(kotlinx.coroutines.flow.StartedWhileSubscribed)
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed $r0;
        long l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.StartedWhileSubscribed;

        l0 = $r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration>;

        return l0;
    }

    public static final long access$getStopTimeout$p(kotlinx.coroutines.flow.StartedWhileSubscribed)
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed $r0;
        long l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.StartedWhileSubscribed;

        l0 = $r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout>;

        return l0;
    }

    public kotlinx.coroutines.flow.Flow command(kotlinx.coroutines.flow.StateFlow)
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed r0;
        kotlinx.coroutines.flow.StateFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.StartedWhileSubscribed$command$1 $r3;
        kotlin.jvm.functions.Function3 $r4;
        kotlinx.coroutines.flow.StartedWhileSubscribed$command$2 $r5;
        kotlin.jvm.functions.Function2 $r6;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed;

        $r1 := @parameter0: kotlinx.coroutines.flow.StateFlow;

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        $r3 = new kotlinx.coroutines.flow.StartedWhileSubscribed$command$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: void <init>(kotlinx.coroutines.flow.StartedWhileSubscribed,kotlin.coroutines.Continuation)>(r0, null);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow transformLatest(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r2, $r4);

        $r5 = new kotlinx.coroutines.flow.StartedWhileSubscribed$command$2;

        specialinvoke $r5.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$2: void <init>(kotlin.coroutines.Continuation)>(null);

        $r6 = (kotlin.jvm.functions.Function2) $r5;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow dropWhile(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r2, $r6);

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow distinctUntilChanged(kotlinx.coroutines.flow.Flow)>($r2);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.flow.StartedWhileSubscribed;

        if $z0 == 0 goto label1;

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout>;

        $r2 = (kotlinx.coroutines.flow.StartedWhileSubscribed) $r1;

        $l1 = $r2.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration>;

        $l1 = $r2.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed;

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout>;

        $i1 = staticinvoke <kotlinx.coroutines.CoroutineId$$ExternalSyntheticBackport0: int m(long)>($l0);

        $i1 = $i1 * 31;

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration>;

        $i2 = staticinvoke <kotlinx.coroutines.CoroutineId$$ExternalSyntheticBackport0: int m(long)>($l0);

        $i1 = $i1 + $i2;

        return $i1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed r0;
        java.util.List $r1;
        long $l0;
        byte $b1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Iterable $r4;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder(int)>(2);

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopTimeout=");

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long stopTimeout>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration>;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 >= 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replayExpiration=");

        $l0 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed: long replayExpiration>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SharingStarted.WhileSubscribed(");

        $r4 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r4, null, null, null, 0, null, null, 63, null);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
