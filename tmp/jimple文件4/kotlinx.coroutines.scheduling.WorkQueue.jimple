public final class kotlinx.coroutines.scheduling.WorkQueue extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU;
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumerIndex$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU;
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater producerIndex$FU;
    private volatile int blockingTasksInBuffer;
    private final java.util.concurrent.atomic.AtomicReferenceArray buffer;
    private volatile int consumerIndex;
    private volatile java.lang.Object lastScheduledTask;
    private volatile int producerIndex;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/WorkQueue;", class "Ljava/lang/Object;", "lastScheduledTask");

        <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/WorkQueue;", "producerIndex");

        <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater producerIndex$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/WorkQueue;", "consumerIndex");

        <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumerIndex$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/WorkQueue;", "blockingTasksInBuffer");

        <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU> = $r1;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128);

        r0.<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer> = $r1;

        r0.<kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask> = null;

        r0.<kotlinx.coroutines.scheduling.WorkQueue: int producerIndex> = 0;

        r0.<kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex> = 0;

        r0.<kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer> = 0;

        return;
    }

    public static kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object)
    {
        kotlinx.coroutines.scheduling.Task $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.scheduling.WorkQueue $r2;
        boolean $z0;
        int $i0;

        $r2 := @parameter0: kotlinx.coroutines.scheduling.WorkQueue;

        $r0 := @parameter1: kotlinx.coroutines.scheduling.Task;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $r0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean)>($r0, $z0);

        return $r0;
    }

    private final kotlinx.coroutines.scheduling.Task addLast(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        int $i0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r4;
        java.lang.Object $r5;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r2 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(r0);

     label3:
        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>();

        if $i0 != 127 goto label4;

        return $r1;

     label4:
        $i0 = r0.<kotlinx.coroutines.scheduling.WorkQueue: int producerIndex>;

        $i0 = $i0 & 127;

     label5:
        $r4 = r0.<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        if $r5 == null goto label6;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label5;

     label6:
        $r4 = r0.<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>($i0, $r1);

        $r3 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater producerIndex$FU>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(r0);

        return null;
    }

    private final void decrementIfBlocking(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        int $i0;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r3;
        java.lang.AssertionError $r4;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        if $r1 == null goto label5;

        $r2 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        $z0 = 0;

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label5;

        $r3 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>(r0);

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label5;

        if $i0 < 0 goto label3;

        $z0 = 1;

     label3:
        if $z0 == 0 goto label4;

        return;

     label4:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task pollBuffer()
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.Task $r4;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

     label1:
        $i1 = r0.<kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex>;

        $i0 = r0.<kotlinx.coroutines.scheduling.WorkQueue: int producerIndex>;

        $i0 = $i1 - $i0;

        if $i0 != 0 goto label2;

        return null;

     label2:
        $i2 = $i1 & 127;

        $r1 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumerIndex$FU>;

        $i0 = $i1 + 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i2, null);

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r4 != null goto label3;

        goto label1;

     label3:
        specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: void decrementIfBlocking(kotlinx.coroutines.scheduling.Task)>($r4);

        return $r4;
    }

    private final boolean pollTo(kotlinx.coroutines.scheduling.GlobalQueue)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.GlobalQueue $r2;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r2 := @parameter0: kotlinx.coroutines.scheduling.GlobalQueue;

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollBuffer()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        virtualinvoke $r2.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return 1;
    }

    private final long tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue, boolean)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0, $r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        kotlinx.coroutines.scheduling.Task $r3;
        kotlinx.coroutines.scheduling.TaskContext $r4;
        int $i0;
        kotlinx.coroutines.scheduling.SchedulerTimeSource $r5;
        long $l1, $l2;
        byte $b3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.WorkQueue;

        $z0 := @parameter1: boolean;

     label1:
        $r2 = $r1.<kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask>;

        $r3 = (kotlinx.coroutines.scheduling.Task) $r2;

        if $r3 != null goto label2;

        return -2L;

     label2:
        if $z0 == 0 goto label5;

        $r4 = $r3.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r4.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        $z1 = 1;

        if $i0 != 1 goto label3;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 != 0 goto label5;

        return -2L;

     label5:
        $r5 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource>;

        $l1 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.SchedulerTimeSource: long nanoTime()>();

        $l2 = $r3.<kotlinx.coroutines.scheduling.Task: long submissionTime>;

        $l1 = $l1 - $l2;

        $l2 = <kotlinx.coroutines.scheduling.TasksKt: long WORK_STEALING_TIME_RESOLUTION_NS>;

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label6;

        $l2 = <kotlinx.coroutines.scheduling.TasksKt: long WORK_STEALING_TIME_RESOLUTION_NS>;

        $l1 = $l2 - $l1;

        return $l1;

     label6:
        $r6 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU>;

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r1, $r3, null);

        if $z1 == 0 goto label1;

        staticinvoke <kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.Task,boolean,int,java.lang.Object)>(r0, $r3, 0, 2, null);

        return -1L;
    }

    public final kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task, boolean)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        kotlinx.coroutines.scheduling.Task $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task addLast(kotlinx.coroutines.scheduling.Task)>($r1);

        return $r1;

     label1:
        $r2 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, $r1);

        $r1 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r1 != null goto label2;

        return null;

     label2:
        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task addLast(kotlinx.coroutines.scheduling.Task)>($r1);

        return $r1;
    }

    public final int getBufferSize$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        int $i0, $i1;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $i1 = r0.<kotlinx.coroutines.scheduling.WorkQueue: int producerIndex>;

        $i0 = r0.<kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public final int getSize$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 = r0.<kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask>;

        if $r1 == null goto label1;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>();

        $i0 = $i0 + 1;

        return $i0;

     label1:
        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>();

        return $i0;
    }

    public final void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        kotlinx.coroutines.scheduling.GlobalQueue $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.scheduling.Task $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.GlobalQueue;

        $r2 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, null);

        $r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if $r4 != null goto label1;

        goto label2;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r4);

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: boolean pollTo(kotlinx.coroutines.scheduling.GlobalQueue)>($r1);

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        return;
    }

    public final kotlinx.coroutines.scheduling.Task poll()
    {
        kotlinx.coroutines.scheduling.WorkQueue r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.scheduling.Task $r3;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, null);

        $r3 = (kotlinx.coroutines.scheduling.Task) $r2;

        if $r3 != null goto label1;

        $r3 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollBuffer()>();

     label1:
        return $r3;
    }

    public final long tryStealBlockingFrom(kotlinx.coroutines.scheduling.WorkQueue)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0, $r2;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.scheduling.Task $r5;
        kotlinx.coroutines.scheduling.TaskContext $r6;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r7;
        long $l4;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r2 := @parameter0: kotlinx.coroutines.scheduling.WorkQueue;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label04;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>();

        if $i0 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $i1 = $r2.<kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex>;

        $i0 = $r2.<kotlinx.coroutines.scheduling.WorkQueue: int producerIndex>;

        $r1 = $r2.<kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;

     label05:
        if $i1 == $i0 goto label10;

        $i2 = $i1 & 127;

        $i3 = $r2.<kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer>;

        if $i3 != 0 goto label06;

        goto label10;

     label06:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r5 = (kotlinx.coroutines.scheduling.Task) $r4;

        if $r5 == null goto label09;

        $r6 = $r5.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i3 = interfaceinvoke $r6.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i3 != 1 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label09;

        $z0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i2, $r5, null);

        if $z0 == 0 goto label09;

        $r7 = <kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>($r2);

        staticinvoke <kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.Task,boolean,int,java.lang.Object)>(r0, $r5, 0, 2, null);

        return -1L;

     label09:
        $i1 = $i1 + 1;

        goto label05;

     label10:
        $l4 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: long tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue,boolean)>($r2, 1);

        return $l4;
    }

    public final long tryStealFrom(kotlinx.coroutines.scheduling.WorkQueue)
    {
        kotlinx.coroutines.scheduling.WorkQueue r0, $r1;
        boolean $z0, $z1;
        int $i0;
        java.lang.AssertionError $r2;
        kotlinx.coroutines.scheduling.Task $r3;
        long $l1;

        r0 := @this: kotlinx.coroutines.scheduling.WorkQueue;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.WorkQueue;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $r3 = specialinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollBuffer()>();

        if $r3 == null goto label9;

        $r3 = staticinvoke <kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.Task,boolean,int,java.lang.Object)>(r0, $r3, 0, 2, null);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label8;

        if $r3 != null goto label5;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label7;

        goto label8;

     label7:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label8:
        return -1L;

     label9:
        $l1 = specialinvoke r0.<kotlinx.coroutines.scheduling.WorkQueue: long tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue,boolean)>($r1, 0);

        return $l1;
    }
}
