final class kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMutableIterator
{
    private final kotlin.jvm.functions.Function2 factory;
    private int index;
    private java.lang.Object key;
    final kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0;
    private java.lang.Object value;

    public void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

        $r2 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlin.jvm.functions.Function2 factory> = $r1;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index> = -1;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: void findNext()>();

        return;
    }

    private final void findNext()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator r0;
        int $i0, $i1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3, $r5;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r4;
        boolean $z0;
        kotlinx.coroutines.debug.internal.Marked $r6;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

     label1:
        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index>;

        $i0 = $i0 + 1;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index> = $i0;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0>;

        $i1 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int access$getAllocated$p(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)>($r1);

        if $i0 >= $i1 goto label6;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0>;

        $r2 = $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys>;

        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $r4 = (kotlinx.coroutines.debug.internal.HashedWeakRef) $r3;

        if $r4 != null goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke $r4.<kotlinx.coroutines.debug.internal.HashedWeakRef: java.lang.Object get()>();

     label3:
        if $r3 != null goto label4;

        goto label1;

     label4:
        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: java.lang.Object key> = $r3;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0>;

        $r2 = $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $r5 = $r3;

        $z0 = $r3 instanceof kotlinx.coroutines.debug.internal.Marked;

        if $z0 == 0 goto label5;

        $r6 = (kotlinx.coroutines.debug.internal.Marked) $r3;

        $r5 = $r6.<kotlinx.coroutines.debug.internal.Marked: java.lang.Object ref>;

     label5:
        if $r5 == null goto label1;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: java.lang.Object value> = $r5;

     label6:
        return;
    }

    public boolean hasNext()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator r0;
        int $i0, $i1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

        $i1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index>;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0>;

        $i0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int access$getAllocated$p(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)>($r1);

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator r0;
        int $i0, $i1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Object $r3, $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: int index>;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core this$0>;

        $i1 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int access$getAllocated$p(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)>($r1);

        if $i0 >= $i1 goto label3;

        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: kotlin.jvm.functions.Function2 factory>;

        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: java.lang.Object key>;

        if $r3 != null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("key");

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label1:
        $r4 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: java.lang.Object value>;

        if $r4 != null goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("value");

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: void findNext()>();

        return $r3;

     label3:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;
    }

    public java.lang.Void remove()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator r0;
        kotlin.KotlinNothingValueException $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

        staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: java.lang.Void access$noImpl()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public volatile void remove()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator r0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

        virtualinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: java.lang.Void remove()>();

        return;
    }
}
