public final class kotlinx.coroutines.scheduling.CoroutineSchedulerKt extends java.lang.Object
{

    public static final boolean isSchedulerWorker(java.lang.Thread)
    {
        java.lang.Thread $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Thread;

        $z0 = $r0 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        return $z0;
    }

    public static final boolean mayNotBlock(java.lang.Thread)
    {
        java.lang.Thread $r0;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r2, $r3;

        $r0 := @parameter0: java.lang.Thread;

        $z0 = $r0 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        if $z0 == 0 goto label1;

        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r0;

        $r2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }
}
