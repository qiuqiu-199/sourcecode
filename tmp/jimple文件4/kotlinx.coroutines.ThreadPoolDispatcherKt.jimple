public final class kotlinx.coroutines.ThreadPoolDispatcherKt extends java.lang.Object
{

    public static java.lang.Thread $r8$lambda$IYX-93i18CF3E6e1K_suGGxRFcI(int, java.lang.String, java.util.concurrent.atomic.AtomicInteger, java.lang.Runnable)
    {
        java.lang.String $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.Runnable $r2;
        java.lang.Thread $r3;
        int $i0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.util.concurrent.atomic.AtomicInteger;

        $r2 := @parameter3: java.lang.Runnable;

        $r3 = staticinvoke <kotlinx.coroutines.ThreadPoolDispatcherKt: java.lang.Thread newFixedThreadPoolContext$lambda-1(int,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.lang.Runnable)>($i0, $r0, $r1, $r2);

        return $r3;
    }

    public static final kotlinx.coroutines.ExecutorCoroutineDispatcher newFixedThreadPoolContext(int, java.lang.String)
    {
        kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0 $r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.concurrent.ScheduledExecutorService $r3;
        java.util.concurrent.ExecutorService $r4;
        kotlinx.coroutines.ExecutorCoroutineDispatcher $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.Throwable $r8;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $z0 = 1;

        if $i0 < 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        $r0 = new kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0;

        specialinvoke $r0.<kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0: void <init>(int,java.lang.String,java.util.concurrent.atomic.AtomicInteger)>($i0, $r1, $r2);

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>($i0, $r0);

        $r4 = (java.util.concurrent.ExecutorService) $r3;

        $r5 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.ExecutorCoroutineDispatcher 'from'(java.util.concurrent.ExecutorService)>($r4);

        return $r5;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected at least one thread, but ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        $r8 = (java.lang.Throwable) $r7;

        throw $r8;
    }

    private static final java.lang.Thread newFixedThreadPoolContext$lambda-1(int, java.lang.String, java.util.concurrent.atomic.AtomicInteger, java.lang.Runnable)
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        java.lang.Runnable $r1;
        java.lang.Thread $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.StringBuilder $r4;

        $i0 := @parameter0: int;

        $r3 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.util.concurrent.atomic.AtomicInteger;

        $r1 := @parameter3: java.lang.Runnable;

        $r2 = new java.lang.Thread;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r1, $r3);

        virtualinvoke $r2.<java.lang.Thread: void setDaemon(boolean)>(1);

        return $r2;
    }

    public static final kotlinx.coroutines.ExecutorCoroutineDispatcher newSingleThreadContext(java.lang.String)
    {
        kotlinx.coroutines.ExecutorCoroutineDispatcher $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <kotlinx.coroutines.ThreadPoolDispatcherKt: kotlinx.coroutines.ExecutorCoroutineDispatcher newFixedThreadPoolContext(int,java.lang.String)>(1, $r1);

        return $r0;
    }
}
