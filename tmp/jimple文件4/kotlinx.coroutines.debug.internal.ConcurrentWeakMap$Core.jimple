final class kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater load$FU;
    private final int allocated;
    java.util.concurrent.atomic.AtomicReferenceArray keys;
    private volatile int load;
    private final int shift;
    final kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0;
    private final int threshold;
    java.util.concurrent.atomic.AtomicReferenceArray values;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$Core;", "load");

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicIntegerFieldUpdater load$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap, int)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        int $i0, $i1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $i0 := @parameter1: int;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int allocated> = $i0;

        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i1 = $i1 + 1;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int shift> = $i1;

        $i1 = $i0 * 2;

        $i1 = $i1 / 3;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int threshold> = $i1;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int load> = 0;

        $r2 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys> = $r2;

        $r2 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values> = $r2;

        return;
    }

    public static final int access$getAllocated$p(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r0;
        int i0;

        $r0 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        i0 = $r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int allocated>;

        return i0;
    }

    private final int index(int)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        int $i0, $i1;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $i0 := @parameter0: int;

        $i0 = $i0 * -1640531527;

        $i1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int shift>;

        $i0 = $i0 >>> $i1;

        return $i0;
    }

    public static java.lang.Object putImpl$default(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core, java.lang.Object, java.lang.Object, kotlinx.coroutines.debug.internal.HashedWeakRef, int, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r3;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r4;
        int $i0;

        $r3 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r4 := @parameter3: kotlinx.coroutines.debug.internal.HashedWeakRef;

        $i0 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        $r4 = null;

     label1:
        $r0 = virtualinvoke $r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.lang.Object putImpl(java.lang.Object,java.lang.Object,kotlinx.coroutines.debug.internal.HashedWeakRef)>($r0, $r1, $r4);

        return $r0;
    }

    private final void removeCleanedAt(int)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        int $i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        java.lang.Object $r2;
        boolean $z0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $i0 := @parameter0: int;

     label1:
        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        if $r2 != null goto label2;

        return;

     label2:
        $z0 = $r2 instanceof kotlinx.coroutines.debug.internal.Marked;

        if $z0 == 0 goto label3;

        return;

     label3:
        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $z0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i0, $r2, null);

        if $z0 == 0 goto label1;

        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0>;

        staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void access$decrementSize(kotlinx.coroutines.debug.internal.ConcurrentWeakMap)>($r3);

        return;
    }

    public final void cleanWeakRef(kotlinx.coroutines.debug.internal.HashedWeakRef)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r1, $r4;
        int $i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.HashedWeakRef;

        $i0 = $r1.<kotlinx.coroutines.debug.internal.HashedWeakRef: int hash>;

        $i0 = specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int index(int)>($i0);

     label1:
        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $r4 = (kotlinx.coroutines.debug.internal.HashedWeakRef) $r3;

        if $r4 != null goto label2;

        return;

     label2:
        if $r4 != $r1 goto label3;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void removeCleanedAt(int)>($i0);

        return;

     label3:
        if $i0 != 0 goto label4;

        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int allocated>;

     label4:
        $i0 = $i0 + -1;

        goto label1;
    }

    public final java.lang.Object getImpl(java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        java.lang.Object $r1, $r3;
        int $i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r4;
        boolean $z0;
        kotlinx.coroutines.debug.internal.Marked $r5;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int index(int)>($i0);

     label1:
        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $r4 = (kotlinx.coroutines.debug.internal.HashedWeakRef) $r3;

        if $r4 != null goto label2;

        return null;

     label2:
        $r3 = virtualinvoke $r4.<kotlinx.coroutines.debug.internal.HashedWeakRef: java.lang.Object get()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label3;

        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $z0 = $r1 instanceof kotlinx.coroutines.debug.internal.Marked;

        if $z0 == 0 goto label6;

        $r5 = (kotlinx.coroutines.debug.internal.Marked) $r1;

        $r1 = $r5.<kotlinx.coroutines.debug.internal.Marked: java.lang.Object ref>;

        return $r1;

     label3:
        if $r3 != null goto label4;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void removeCleanedAt(int)>($i0);

     label4:
        if $i0 != 0 goto label5;

        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int allocated>;

     label5:
        $i0 = $i0 + -1;

        goto label1;

     label6:
        return $r1;
    }

    public final java.util.Iterator keyValueIterator(kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator $r2;
        java.util.Iterator $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator;

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$KeyValueIterator: void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core,kotlin.jvm.functions.Function2)>(r0, $r1);

        $r3 = (java.util.Iterator) $r2;

        return $r3;
    }

    public final java.lang.Object putImpl(java.lang.Object, java.lang.Object, kotlinx.coroutines.debug.internal.HashedWeakRef)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0;
        java.lang.Object $r1, $r3, $r6;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r4, $r7;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReferenceArray $r5;
        kotlinx.coroutines.internal.Symbol $r8;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r9;
        java.lang.ref.ReferenceQueue $r10;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r4 := @parameter2: kotlinx.coroutines.debug.internal.HashedWeakRef;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i0 = specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int index(int)>($i0);

        $z0 = 0;

     label01:
        $r5 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $r7 = (kotlinx.coroutines.debug.internal.HashedWeakRef) $r6;

        if $r7 != null goto label07;

        if $r1 != null goto label02;

        return null;

     label02:
        if $z0 != 0 goto label05;

     label03:
        $i1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int load>;

        $i2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int threshold>;

        if $i1 < $i2 goto label04;

        $r8 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol access$getREHASH$p()>();

        return $r8;

     label04:
        $i2 = $i1 + 1;

        $r2 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicIntegerFieldUpdater load$FU>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i2);

        if $z0 == 0 goto label03;

        $z0 = 1;

     label05:
        if $r4 != null goto label06;

        $r4 = new kotlinx.coroutines.debug.internal.HashedWeakRef;

        $r9 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0>;

        $r10 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.ref.ReferenceQueue access$getWeakRefQueue$p(kotlinx.coroutines.debug.internal.ConcurrentWeakMap)>($r9);

        specialinvoke $r4.<kotlinx.coroutines.debug.internal.HashedWeakRef: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>($r3, $r10);

     label06:
        $r5 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys>;

        $z1 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r5, $i0, null, $r4);

        if $z1 == 0 goto label01;

        goto label08;

     label07:
        $r6 = virtualinvoke $r7.<kotlinx.coroutines.debug.internal.HashedWeakRef: java.lang.Object get()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r6);

        if $z1 == 0 goto label10;

        if $z0 == 0 goto label08;

        $r2 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicIntegerFieldUpdater load$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>(r0);

     label08:
        $r5 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $r3 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        $z0 = $r3 instanceof kotlinx.coroutines.debug.internal.Marked;

        if $z0 == 0 goto label09;

        $r8 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol access$getREHASH$p()>();

        return $r8;

     label09:
        $r5 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $z0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r5, $i0, $r3, $r1);

        if $z0 == 0 goto label08;

        return $r3;

     label10:
        if $r6 != null goto label11;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void removeCleanedAt(int)>($i0);

     label11:
        if $i0 != 0 goto label12;

        $i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int allocated>;

     label12:
        $i0 = $i0 + -1;

        goto label01;
    }

    public final kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core rehash()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core r0, $r2;
        int $i0, $i1, $i2;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        java.lang.Object $r4, $r6, $r7;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r5;
        boolean $z0;
        kotlinx.coroutines.debug.internal.Marked $r8;
        kotlinx.coroutines.internal.Symbol $r9;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

     label01:
        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0>;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: int size()>();

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 4);

        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        $i0 = $i0 * 4;

        $r2 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0>;

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap,int)>($r1, $i0);

        $i1 = 0;

        $i2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: int allocated>;

        if $i2 <= 0 goto label10;

     label02:
        $i0 = $i1 + 1;

        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray keys>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i1);

        $r5 = (kotlinx.coroutines.debug.internal.HashedWeakRef) $r4;

        if $r5 != null goto label03;

        $r4 = null;

        goto label04;

     label03:
        $r4 = virtualinvoke $r5.<kotlinx.coroutines.debug.internal.HashedWeakRef: java.lang.Object get()>();

     label04:
        if $r5 == null goto label05;

        if $r4 != null goto label05;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void removeCleanedAt(int)>($i1);

     label05:
        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $r6 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i1);

        $r7 = $r6;

        $z0 = $r6 instanceof kotlinx.coroutines.debug.internal.Marked;

        if $z0 == 0 goto label06;

        $r8 = (kotlinx.coroutines.debug.internal.Marked) $r6;

        $r7 = $r8.<kotlinx.coroutines.debug.internal.Marked: java.lang.Object ref>;

        goto label07;

     label06:
        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.concurrent.atomic.AtomicReferenceArray values>;

        $r8 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.debug.internal.Marked access$mark(java.lang.Object)>($r6);

        $z0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r3, $i1, $r6, $r8);

        if $z0 == 0 goto label05;

     label07:
        if $r4 == null goto label08;

        if $r7 == null goto label08;

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.lang.Object putImpl(java.lang.Object,java.lang.Object,kotlinx.coroutines.debug.internal.HashedWeakRef)>($r4, $r7, $r5);

        $r9 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol access$getREHASH$p()>();

        if $r4 != $r9 goto label08;

        goto label01;

     label08:
        if $i0 < $i2 goto label09;

        return $r2;

     label09:
        $i1 = $i0;

        goto label02;

     label10:
        return $r2;
    }
}
