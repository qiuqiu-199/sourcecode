public final class kotlinx.coroutines.sync.MutexImpl extends java.lang.Object implements kotlinx.coroutines.sync.Mutex, kotlinx.coroutines.selects.SelectClause2
{
    static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU;
    volatile java.lang.Object _state;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/MutexImpl;", class "Ljava/lang/Object;", "_state");

        <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU> = $r0;

        return;
    }

    public void <init>(boolean)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        boolean $z0;
        kotlinx.coroutines.sync.Empty $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_LOCKED$p()>();

        goto label2;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_UNLOCKED$p()>();

     label2:
        r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state> = $r1;

        return;
    }

    public static final java.lang.Object access$lockSuspend(kotlinx.coroutines.sync.MutexImpl, java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Object $r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.sync.MutexImpl $r2;

        $r2 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r0 = specialinvoke $r2.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object lockSuspend(java.lang.Object,kotlin.coroutines.Continuation)>($r0, $r1);

        return $r0;
    }

    private final java.lang.Object lockSuspend(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r7, $r9;
        kotlin.coroutines.Continuation $r2, $r3;
        kotlinx.coroutines.CancellableContinuationImpl $r4;
        kotlinx.coroutines.CancellableContinuation $r5;
        kotlinx.coroutines.sync.MutexImpl$LockCont $r6;
        boolean $z0;
        kotlinx.coroutines.sync.Empty $r8;
        kotlinx.coroutines.internal.Symbol $r10;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r11;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r12;
        kotlin.Unit $r13;
        kotlinx.coroutines.sync.MutexImpl$lockSuspend$2$1$1 $r14;
        kotlin.jvm.functions.Function1 $r15;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r16;
        java.lang.String $r17;
        java.lang.IllegalStateException $r18;
        java.lang.Throwable $r19;
        kotlinx.coroutines.internal.OpDescriptor $r20;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r4 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r3);

        $r5 = (kotlinx.coroutines.CancellableContinuation) $r4;

        $r6 = new kotlinx.coroutines.sync.MutexImpl$LockCont;

        specialinvoke $r6.<kotlinx.coroutines.sync.MutexImpl$LockCont: void <init>(kotlinx.coroutines.sync.MutexImpl,java.lang.Object,kotlinx.coroutines.CancellableContinuation)>(r0, $r1, $r5);

     label01:
        $r7 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r7 instanceof kotlinx.coroutines.sync.Empty;

        if $z0 == 0 goto label05;

        $r8 = (kotlinx.coroutines.sync.Empty) $r7;

        $r9 = $r8.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        $r10 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getUNLOCKED$p()>();

        if $r9 == $r10 goto label02;

        $r11 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r12 = new kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        $r9 = $r8.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        specialinvoke $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: void <init>(java.lang.Object)>($r9);

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r11, r0, $r7, $r12);

        goto label01;

     label02:
        if $r1 != null goto label03;

        $r8 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_LOCKED$p()>();

        goto label04;

     label03:
        $r8 = new kotlinx.coroutines.sync.Empty;

        specialinvoke $r8.<kotlinx.coroutines.sync.Empty: void <init>(java.lang.Object)>($r1);

     label04:
        $r11 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r11, r0, $r7, $r8);

        if $z0 == 0 goto label01;

        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r14 = new kotlinx.coroutines.sync.MutexImpl$lockSuspend$2$1$1;

        specialinvoke $r14.<kotlinx.coroutines.sync.MutexImpl$lockSuspend$2$1$1: void <init>(kotlinx.coroutines.sync.MutexImpl,java.lang.Object)>(r0, $r1);

        $r15 = (kotlin.jvm.functions.Function1) $r14;

        interfaceinvoke $r5.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r13, $r15);

        goto label10;

     label05:
        $z0 = $r7 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label14;

        $r12 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r7;

        $r9 = $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        if $r9 == $r1 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 == 0 goto label13;

        $r16 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r6;

        virtualinvoke $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: void addLast(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r16);

        $r9 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        if $r9 == $r7 goto label09;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.sync.MutexImpl$LockCont: boolean take()>();

        if $z0 != 0 goto label08;

        goto label09;

     label08:
        $r6 = new kotlinx.coroutines.sync.MutexImpl$LockCont;

        specialinvoke $r6.<kotlinx.coroutines.sync.MutexImpl$LockCont: void <init>(kotlinx.coroutines.sync.MutexImpl,java.lang.Object,kotlinx.coroutines.CancellableContinuation)>(r0, $r1, $r5);

        goto label01;

     label09:
        staticinvoke <kotlinx.coroutines.CancellableContinuationKt: void removeOnCancellation(kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r5, $r16);

     label10:
        $r1 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r7 goto label11;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label11:
        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r7 goto label12;

        return $r1;

     label12:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label13:
        $r17 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Already locked by ", $r1);

        $r18 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        $r19 = (java.lang.Throwable) $r18;

        throw $r19;

     label14:
        $z0 = $r7 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label15;

        $r20 = (kotlinx.coroutines.internal.OpDescriptor) $r7;

        virtualinvoke $r20.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label01;

     label15:
        $r17 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r7);

        $r18 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        $r19 = (java.lang.Throwable) $r18;

        throw $r19;
    }

    public kotlinx.coroutines.selects.SelectClause2 getOnLock()
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        kotlinx.coroutines.selects.SelectClause2 $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 = (kotlinx.coroutines.selects.SelectClause2) r0;

        return $r1;
    }

    public boolean holdsLock(java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        kotlinx.coroutines.sync.Empty $r3;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r4;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r2 instanceof kotlinx.coroutines.sync.Empty;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.sync.Empty) $r2;

        $r2 = $r3.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        if $r2 != $r1 goto label2;

        return 1;

     label1:
        $z0 = $r2 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label2;

        $r4 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r2;

        $r2 = $r4.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        if $r2 != $r1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isLocked()
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.sync.Empty $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        kotlinx.coroutines.internal.OpDescriptor $r4;
        java.lang.String $r5;
        java.lang.IllegalStateException $r6;
        java.lang.Throwable $r7;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

     label1:
        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r1 instanceof kotlinx.coroutines.sync.Empty;

        if $z0 == 0 goto label3;

        $r2 = (kotlinx.coroutines.sync.Empty) $r1;

        $r1 = $r2.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getUNLOCKED$p()>();

        if $r1 == $r3 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $z0 = $r1 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label5;

        $r4 = (kotlinx.coroutines.internal.OpDescriptor) $r1;

        virtualinvoke $r4.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label1;

     label5:
        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r1);

        $r6 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r7 = (java.lang.Throwable) $r6;

        throw $r7;
    }

    public final boolean isLockedEmptyQueueState$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r1 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r1;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object lock(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r3;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlin.Unit r4;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean tryLock(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object lockSuspend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label2;

        return $r1;

     label2:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    public void registerSelectClause2(kotlinx.coroutines.selects.SelectInstance, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.lang.Object $r3, $r4, $r6;
        boolean $z0;
        kotlinx.coroutines.sync.Empty $r5;
        kotlinx.coroutines.internal.Symbol $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r8;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r9;
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc $r10;
        kotlinx.coroutines.internal.AtomicDesc $r11;
        kotlin.coroutines.Continuation $r12;
        java.lang.String $r13;
        java.lang.IllegalStateException $r14;
        java.lang.Throwable $r15;
        kotlinx.coroutines.sync.MutexImpl$LockSelect $r16;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r17;
        kotlinx.coroutines.DisposableHandle $r18;
        kotlinx.coroutines.internal.OpDescriptor $r19;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r3 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

     label01:
        $z0 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean isSelected()>();

        if $z0 == 0 goto label02;

        return;

     label02:
        $r4 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r4 instanceof kotlinx.coroutines.sync.Empty;

        if $z0 == 0 goto label08;

        $r5 = (kotlinx.coroutines.sync.Empty) $r4;

        $r6 = $r5.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        $r7 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getUNLOCKED$p()>();

        if $r6 == $r7 goto label03;

        $r8 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r9 = new kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        $r6 = $r5.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        specialinvoke $r9.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: void <init>(java.lang.Object)>($r6);

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r0, $r4, $r9);

        goto label01;

     label03:
        $r10 = new kotlinx.coroutines.sync.MutexImpl$TryLockDesc;

        specialinvoke $r10.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc: void <init>(kotlinx.coroutines.sync.MutexImpl,java.lang.Object)>(r0, $r3);

        $r11 = (kotlinx.coroutines.internal.AtomicDesc) $r10;

        $r4 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: java.lang.Object performAtomicTrySelect(kotlinx.coroutines.internal.AtomicDesc)>($r11);

        if $r4 != null goto label04;

        $r12 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.Continuation getCompletion()>();

        staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r1, r0, $r12);

        return;

     label04:
        $r6 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

        if $r4 != $r6 goto label05;

        return;

     label05:
        $r7 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getLOCK_FAIL$p()>();

        if $r4 != $r7 goto label06;

        goto label01;

     label06:
        $r6 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

        if $r4 != $r6 goto label07;

        goto label01;

     label07:
        $r13 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("performAtomicTrySelect(TryLockDesc) returned ", $r4);

        $r14 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r15 = (java.lang.Throwable) $r14;

        throw $r15;

     label08:
        $z0 = $r4 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label13;

        $r9 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r4;

        $r6 = $r9.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        if $r6 == $r3 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        if $z0 == 0 goto label12;

        $r16 = new kotlinx.coroutines.sync.MutexImpl$LockSelect;

        specialinvoke $r16.<kotlinx.coroutines.sync.MutexImpl$LockSelect: void <init>(kotlinx.coroutines.sync.MutexImpl,java.lang.Object,kotlinx.coroutines.selects.SelectInstance,kotlin.jvm.functions.Function2)>(r0, $r3, $r2, $r1);

        $r17 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r16;

        virtualinvoke $r9.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: void addLast(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r17);

        $r6 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        if $r6 == $r4 goto label11;

        $z0 = virtualinvoke $r16.<kotlinx.coroutines.sync.MutexImpl$LockSelect: boolean take()>();

        if $z0 != 0 goto label01;

     label11:
        $r18 = (kotlinx.coroutines.DisposableHandle) $r16;

        interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: void disposeOnSelect(kotlinx.coroutines.DisposableHandle)>($r18);

        return;

     label12:
        $r13 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Already locked by ", $r3);

        $r14 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r15 = (java.lang.Throwable) $r14;

        throw $r15;

     label13:
        $z0 = $r4 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label14;

        $r19 = (kotlinx.coroutines.internal.OpDescriptor) $r4;

        virtualinvoke $r19.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label01;

     label14:
        $r13 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r4);

        $r14 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r15 = (java.lang.Throwable) $r14;

        throw $r15;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        kotlinx.coroutines.sync.Empty $r3;
        java.lang.String $r4;
        kotlinx.coroutines.internal.OpDescriptor $r5;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r6;
        java.lang.IllegalStateException $r7;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

     label1:
        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r1 instanceof kotlinx.coroutines.sync.Empty;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mutex[");

        $r3 = (kotlinx.coroutines.sync.Empty) $r1;

        $r1 = $r3.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label3;

        $r5 = (kotlinx.coroutines.internal.OpDescriptor) $r1;

        virtualinvoke $r5.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label1;

     label3:
        $z0 = $r1 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mutex[");

        $r6 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r1;

        $r1 = $r6.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label4:
        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r1);

        $r7 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        $r8 = (java.lang.Throwable) $r7;

        throw $r8;
    }

    public boolean tryLock(java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r2, $r4;
        boolean $z0, $z1;
        kotlinx.coroutines.sync.Empty $r3;
        kotlinx.coroutines.internal.Symbol $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r7;
        java.lang.String $r8;
        java.lang.IllegalStateException $r9;
        java.lang.Throwable $r10;
        kotlinx.coroutines.internal.OpDescriptor $r11;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

     label01:
        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r2 instanceof kotlinx.coroutines.sync.Empty;

        $z1 = 1;

        if $z0 == 0 goto label05;

        $r3 = (kotlinx.coroutines.sync.Empty) $r2;

        $r4 = $r3.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getUNLOCKED$p()>();

        if $r4 == $r5 goto label02;

        return 0;

     label02:
        if $r1 != null goto label03;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_LOCKED$p()>();

        goto label04;

     label03:
        $r3 = new kotlinx.coroutines.sync.Empty;

        specialinvoke $r3.<kotlinx.coroutines.sync.Empty: void <init>(java.lang.Object)>($r1);

     label04:
        $r6 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r0, $r2, $r3);

        if $z1 == 0 goto label01;

        return 1;

     label05:
        $z0 = $r2 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label09;

        $r7 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r2;

        $r2 = $r7.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        if $r2 == $r1 goto label06;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 == 0 goto label08;

        return 0;

     label08:
        $r8 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Already locked by ", $r1);

        $r9 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        $r10 = (java.lang.Throwable) $r9;

        throw $r10;

     label09:
        $z1 = $r2 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z1 == 0 goto label10;

        $r11 = (kotlinx.coroutines.internal.OpDescriptor) $r2;

        virtualinvoke $r11.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label01;

     label10:
        $r8 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r2);

        $r9 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        $r10 = (java.lang.Throwable) $r9;

        throw $r10;
    }

    public void unlock(java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r2, $r4;
        boolean $z0, $z1;
        kotlinx.coroutines.sync.Empty $r3;
        kotlinx.coroutines.internal.Symbol $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9;
        java.lang.StringBuilder $r10;
        kotlinx.coroutines.internal.OpDescriptor $r11;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r12;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r13;
        kotlinx.coroutines.sync.MutexImpl$UnlockOp $r14;
        kotlinx.coroutines.sync.MutexImpl$LockWaiter $r15;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

     label01:
        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object _state>;

        $z0 = $r2 instanceof kotlinx.coroutines.sync.Empty;

        $z1 = 1;

        if $z0 == 0 goto label10;

        if $r1 != null goto label05;

        $r3 = (kotlinx.coroutines.sync.Empty) $r2;

        $r4 = $r3.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getUNLOCKED$p()>();

        if $r4 == $r5 goto label02;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 == 0 goto label04;

        goto label08;

     label04:
        $r6 = new java.lang.IllegalStateException;

        $r7 = "Mutex is not locked";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label05:
        $r3 = (kotlinx.coroutines.sync.Empty) $r2;

        $r4 = $r3.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        if $r4 != $r1 goto label06;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 == 0 goto label09;

     label08:
        $r9 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_UNLOCKED$p()>();

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r9, r0, $r2, $r3);

        if $z1 == 0 goto label01;

        return;

     label09:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mutex is locked by ");

        $r2 = $r3.<kotlinx.coroutines.sync.Empty: java.lang.Object locked>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label10:
        $z0 = $r2 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label11;

        $r11 = (kotlinx.coroutines.internal.OpDescriptor) $r2;

        virtualinvoke $r11.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label01;

     label11:
        $z0 = $r2 instanceof kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        if $z0 == 0 goto label18;

        if $r1 == null goto label15;

        $r12 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r2;

        $r4 = $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        if $r4 != $r1 goto label12;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        if $z1 == 0 goto label14;

        goto label15;

     label14:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mutex is locked by ");

        $r2 = $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;

     label15:
        $r12 = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) $r2;

        $r13 = virtualinvoke $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: kotlinx.coroutines.internal.LockFreeLinkedListNode removeFirstOrNull()>();

        if $r13 != null goto label16;

        $r14 = new kotlinx.coroutines.sync.MutexImpl$UnlockOp;

        specialinvoke $r14.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: void <init>(kotlinx.coroutines.sync.MutexImpl$LockedQueue)>($r12);

        $r9 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r9, r0, $r2, $r14);

        if $z1 == 0 goto label01;

        $r2 = virtualinvoke $r14.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: java.lang.Object perform(java.lang.Object)>(r0);

        if $r2 != null goto label01;

        return;

     label16:
        $r15 = (kotlinx.coroutines.sync.MutexImpl$LockWaiter) $r13;

        $z1 = virtualinvoke $r15.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: boolean tryResumeLockWaiter()>();

        if $z1 == 0 goto label01;

        $r1 = $r15.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: java.lang.Object owner>;

        if $r1 != null goto label17;

        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getLOCKED$p()>();

     label17:
        $r12.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: java.lang.Object owner> = $r1;

        virtualinvoke $r15.<kotlinx.coroutines.sync.MutexImpl$LockWaiter: void completeResumeLockWaiter()>();

        return;

     label18:
        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Illegal state ", $r2);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r6;

        throw $r8;
    }
}
