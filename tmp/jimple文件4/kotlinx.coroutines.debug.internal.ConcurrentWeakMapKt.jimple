public final class kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt extends java.lang.Object
{
    private static final int MAGIC;
    private static final kotlinx.coroutines.debug.internal.Marked MARKED_NULL;
    private static final kotlinx.coroutines.debug.internal.Marked MARKED_TRUE;
    private static final int MIN_CAPACITY;
    private static final kotlinx.coroutines.internal.Symbol REHASH;

    static void <clinit>()
    {
        java.lang.Boolean $r0;
        kotlinx.coroutines.internal.Symbol $r1;
        kotlinx.coroutines.debug.internal.Marked $r2;

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: int MIN_CAPACITY> = 16;

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: int MAGIC> = -1640531527;

        $r1 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r1.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("REHASH");

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol REHASH> = $r1;

        $r2 = new kotlinx.coroutines.debug.internal.Marked;

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.Marked: void <init>(java.lang.Object)>(null);

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.debug.internal.Marked MARKED_NULL> = $r2;

        $r2 = new kotlinx.coroutines.debug.internal.Marked;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.Marked: void <init>(java.lang.Object)>($r0);

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.debug.internal.Marked MARKED_TRUE> = $r2;

        return;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getREHASH$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol REHASH>;

        return r0;
    }

    public static final kotlinx.coroutines.debug.internal.Marked access$mark(java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.Marked $r0;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.debug.internal.Marked mark(java.lang.Object)>($r1);

        return $r0;
    }

    public static final java.lang.Void access$noImpl()
    {
        java.lang.Void $r0;

        $r0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: java.lang.Void noImpl()>();

        return $r0;
    }

    private static final kotlinx.coroutines.debug.internal.Marked mark(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Boolean $r1;
        boolean $z0;
        kotlinx.coroutines.debug.internal.Marked $r2;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        $r2 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.debug.internal.Marked MARKED_NULL>;

        return $r2;

     label1:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z0 == 0 goto label2;

        $r2 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.debug.internal.Marked MARKED_TRUE>;

        return $r2;

     label2:
        $r2 = new kotlinx.coroutines.debug.internal.Marked;

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.Marked: void <init>(java.lang.Object)>($r0);

        return $r2;
    }

    private static final java.lang.Void noImpl()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }
}
