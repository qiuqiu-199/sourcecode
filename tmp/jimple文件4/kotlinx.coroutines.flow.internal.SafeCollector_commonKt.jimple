public final class kotlinx.coroutines.flow.internal.SafeCollector_commonKt extends java.lang.Object
{

    public static final void checkContext(kotlinx.coroutines.flow.internal.SafeCollector, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.flow.internal.SafeCollector $r0;
        kotlin.coroutines.CoroutineContext $r1, $r8;
        java.lang.Integer $r2;
        kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1 $r3;
        kotlin.jvm.functions.Function2 $r4;
        java.lang.Object $r5;
        java.lang.Number $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r7;
        java.lang.String $r9;
        java.lang.IllegalStateException $r10;
        java.lang.Throwable $r11;

        $r0 := @parameter0: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = new kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1: void <init>(kotlinx.coroutines.flow.internal.SafeCollector)>($r0);

        $r4 = (kotlin.jvm.functions.Function2) $r3;

        $r5 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r2, $r4);

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $i1 = $r0.<kotlinx.coroutines.flow.internal.SafeCollector: int collectContextSize>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flow invariant is violated:\n\t\tFlow was collected in ");

        $r8 = $r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext collectContext>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n\t\tbut emission happened in ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n\t\tPlease refer to \'flow\' documentation or use \'flowOn\' instead");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        $r11 = (java.lang.Throwable) $r10;

        throw $r11;
    }

    public static final kotlinx.coroutines.Job transitiveCoroutineParent(kotlinx.coroutines.Job, kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0, $r1;
        boolean $z0;
        kotlinx.coroutines.internal.ScopeCoroutine $r2;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r0 := @parameter1: kotlinx.coroutines.Job;

     label1:
        if $r1 != null goto label2;

        return null;

     label2:
        if $r1 != $r0 goto label3;

        return $r1;

     label3:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.ScopeCoroutine;

        if $z0 != 0 goto label4;

        return $r1;

     label4:
        $r2 = (kotlinx.coroutines.internal.ScopeCoroutine) $r1;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.internal.ScopeCoroutine: kotlinx.coroutines.Job getParent$kotlinx_coroutines_core()>();

        goto label1;
    }

    public static final kotlinx.coroutines.flow.Flow unsafeFlow(kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function2;

        $r1 = new kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1: void <init>(kotlin.jvm.functions.Function2)>($r0);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }
}
