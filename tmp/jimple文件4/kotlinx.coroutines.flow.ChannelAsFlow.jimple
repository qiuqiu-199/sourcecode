final class kotlinx.coroutines.flow.ChannelAsFlow extends kotlinx.coroutines.flow.internal.ChannelFlow
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumed$FU;
    private final kotlinx.coroutines.channels.ReceiveChannel channel;
    private final boolean consume;
    private volatile int consumed;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/flow/ChannelAsFlow;", "consumed");

        <kotlinx.coroutines.flow.ChannelAsFlow: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumed$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        boolean $z0;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlinx.coroutines.channels.ReceiveChannel $r3;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r3 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter3: int;

        $r2 := @parameter4: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: void <init>(kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $i0, $r2);

        r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel> = $r3;

        r0.<kotlinx.coroutines.flow.ChannelAsFlow: boolean consume> = $z0;

        r0.<kotlinx.coroutines.flow.ChannelAsFlow: int consumed> = 0;

        return;
    }

    public void <init>(kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.channels.BufferOverflow $r3;
        kotlin.jvm.internal.DefaultConstructorMarker $r4;
        kotlin.coroutines.EmptyCoroutineContext $r5;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r1 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $i1 := @parameter3: int;

        $r3 := @parameter4: kotlinx.coroutines.channels.BufferOverflow;

        $i0 := @parameter5: int;

        $r4 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = $i0 & 4;

        if $i2 == 0 goto label1;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r2 = (kotlin.coroutines.CoroutineContext) $r5;

     label1:
        $i2 = $i0 & 8;

        if $i2 == 0 goto label2;

        $i1 = -3;

     label2:
        $i0 = $i0 & 16;

        if $i0 == 0 goto label3;

        $r3 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label3:
        specialinvoke r0.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $z0, $r2, $i1, $r3);

        return;
    }

    private final void markConsumed()
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $z0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: boolean consume>;

        if $z0 == 0 goto label4;

        $r1 = <kotlinx.coroutines.flow.ChannelAsFlow: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumed$FU>;

        $z0 = 1;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(r0, 1);

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "ReceiveChannel.consumeAsFlow can be collected just once";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;

     label4:
        return;
    }

    protected java.lang.String additionalToStringProps()
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        java.lang.String $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r2;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r2 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel>;

        $r1 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("channel=", $r2);

        return $r1;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlinx.coroutines.channels.ReceiveChannel $r3;
        boolean $z0;
        java.lang.Object $r4, $r5;
        kotlin.Unit r6;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $i0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: int capacity>;

        if $i0 != -3 goto label2;

        specialinvoke r0.<kotlinx.coroutines.flow.ChannelAsFlow: void markConsumed()>();

        $r3 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel>;

        $z0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: boolean consume>;

        $r4 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ChannelsKt: java.lang.Object access$emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.Continuation)>($r1, $r3, $z0, $r2);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        return $r4;

     label1:
        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r6;

     label2:
        $r4 = specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r1, $r2);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label3;

        return $r4;

     label3:
        r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r6;
    }

    protected java.lang.Object collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        boolean $z0;
        kotlinx.coroutines.channels.ProducerScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.internal.SendingCollector $r3;
        kotlinx.coroutines.channels.SendChannel $r4;
        kotlinx.coroutines.flow.FlowCollector $r5;
        kotlinx.coroutines.channels.ReceiveChannel $r6;
        java.lang.Object $r7, $r8;
        kotlin.Unit r9;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r1 := @parameter0: kotlinx.coroutines.channels.ProducerScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new kotlinx.coroutines.flow.internal.SendingCollector;

        $r4 = (kotlinx.coroutines.channels.SendChannel) $r1;

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.SendingCollector: void <init>(kotlinx.coroutines.channels.SendChannel)>($r4);

        $r5 = (kotlinx.coroutines.flow.FlowCollector) $r3;

        $r6 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel>;

        $z0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: boolean consume>;

        $r7 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ChannelsKt: java.lang.Object access$emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.Continuation)>($r5, $r6, $z0, $r2);

        $r8 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r7 != $r8 goto label1;

        return $r7;

     label1:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;
    }

    protected kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0, $r4;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlinx.coroutines.channels.ReceiveChannel $r3;
        boolean $z0;
        kotlinx.coroutines.flow.internal.ChannelFlow $r5;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = new kotlinx.coroutines.flow.ChannelAsFlow;

        $r3 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel>;

        $z0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: boolean consume>;

        specialinvoke $r4.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r3, $z0, $r1, $i0, $r2);

        $r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r4;

        return $r5;
    }

    public kotlinx.coroutines.flow.Flow dropChannelOperators()
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0, $r2;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        boolean $z0;
        kotlinx.coroutines.flow.Flow $r3;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r2 = new kotlinx.coroutines.flow.ChannelAsFlow;

        $r1 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel>;

        $z0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: boolean consume>;

        specialinvoke $r2.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $z0, null, 0, null, 28, null);

        $r3 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r3;
    }

    public kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.flow.ChannelAsFlow r0;
        int $i0;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        kotlinx.coroutines.CoroutineScope $r2;

        r0 := @this: kotlinx.coroutines.flow.ChannelAsFlow;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        specialinvoke r0.<kotlinx.coroutines.flow.ChannelAsFlow: void markConsumed()>();

        $i0 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: int capacity>;

        if $i0 != -3 goto label1;

        $r1 = r0.<kotlinx.coroutines.flow.ChannelAsFlow: kotlinx.coroutines.channels.ReceiveChannel channel>;

        return $r1;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)>($r2);

        return $r1;
    }
}
