final class kotlinx.coroutines.flow.StateFlowSlot extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot
{
    static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU;
    volatile java.lang.Object _state;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/flow/StateFlowSlot;", class "Ljava/lang/Object;", "_state");

        <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot: void <init>()>();

        r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state> = null;

        return;
    }

    public volatile boolean allocateLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.flow.StateFlowImpl $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlinx.coroutines.flow.StateFlowImpl) $r1;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowSlot: boolean allocateLocked(kotlinx.coroutines.flow.StateFlowImpl)>($r2);

        return $z0;
    }

    public boolean allocateLocked(kotlinx.coroutines.flow.StateFlowImpl)
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        kotlinx.coroutines.internal.Symbol $r1;
        kotlinx.coroutines.flow.StateFlowImpl $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r2 := @parameter0: kotlinx.coroutines.flow.StateFlowImpl;

        $r3 = r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state>;

        if $r3 == null goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state> = $r1;

        return 1;
    }

    public final java.lang.Object awaitPending(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        kotlin.coroutines.Continuation $r1, $r3;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        boolean $z0, $z1;
        kotlinx.coroutines.CancellableContinuation $r4;
        java.lang.Object $r5, $r11;
        java.lang.AssertionError $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r7;
        kotlinx.coroutines.internal.Symbol $r8;
        kotlin.Unit $r9;
        kotlin.Result$Companion $r10;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $z0 = 1;

        specialinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r3, 1);

        virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        $r4 = (kotlinx.coroutines.CancellableContinuation) $r2;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label02;

        $r5 = r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state>;

        $z1 = $r5 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        $z1 = $z1 ^ 1;

        if $z1 == 0 goto label01;

        goto label02;

     label01:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label02:
        $r7 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r8 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r7, r0, $r8, $r4);

        if $z1 == 0 goto label03;

        goto label08;

     label03:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label07;

        $r5 = r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state>;

        $r8 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        if $r5 != $r8 goto label04;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        if $z0 == 0 goto label06;

        goto label07;

     label06:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label07:
        $r3 = (kotlin.coroutines.Continuation) $r4;

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r9);

        interfaceinvoke $r3.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r5);

     label08:
        $r5 = virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r11 goto label09;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label09:
        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r11 goto label10;

        return $r5;

     label10:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r9;
    }

    public volatile kotlin.coroutines.Continuation[] freeLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        kotlin.coroutines.Continuation[] $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.flow.StateFlowImpl $r3;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r2 := @parameter0: java.lang.Object;

        $r3 = (kotlinx.coroutines.flow.StateFlowImpl) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowSlot: kotlin.coroutines.Continuation[] freeLocked(kotlinx.coroutines.flow.StateFlowImpl)>($r3);

        return $r1;
    }

    public kotlin.coroutines.Continuation[] freeLocked(kotlinx.coroutines.flow.StateFlowImpl)
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        kotlinx.coroutines.flow.StateFlowImpl $r1;
        kotlin.coroutines.Continuation[] r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: kotlinx.coroutines.flow.StateFlowImpl;

        r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state> = null;

        r2 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        return r2;
    }

    public final void makePending()
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        boolean $z0;
        kotlinx.coroutines.CancellableContinuationImpl $r4;
        kotlin.coroutines.Continuation $r5;
        kotlin.Unit $r6;
        kotlin.Result$Companion $r7;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

     label1:
        $r1 = r0.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state>;

        if $r1 != null goto label2;

        return;

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        if $r1 != $r2 goto label3;

        return;

     label3:
        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        if $r1 != $r2 goto label4;

        $r3 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r1, $r2);

        if $z0 == 0 goto label1;

        return;

     label4:
        $r3 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r1, $r2);

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.CancellableContinuationImpl) $r1;

        $r5 = (kotlin.coroutines.Continuation) $r4;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;
    }

    public final boolean takePending()
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.AssertionError $r4;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = $r3 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        if $r3 != $r2 goto label3;

        return 1;

     label3:
        return 0;
    }
}
