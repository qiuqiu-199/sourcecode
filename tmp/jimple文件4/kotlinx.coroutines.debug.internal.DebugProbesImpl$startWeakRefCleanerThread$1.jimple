final class kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function0
{
    public static final kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 INSTANCE;

    static void <clinit>()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 $r0;

        $r0 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1;

        specialinvoke $r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1: void <init>()>();

        <kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 r0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 r0;
        kotlin.Unit r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1;

        virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1: void invoke()>();

        r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r1;
    }

    public final void invoke()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 r0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1;

        $r1 = staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap access$getCallerInfoCache$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void runWeakRefQueueCleaningLoopUntilInterrupted()>();

        return;
    }
}
