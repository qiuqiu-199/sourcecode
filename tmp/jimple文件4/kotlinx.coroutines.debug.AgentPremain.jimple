public final class kotlinx.coroutines.debug.AgentPremain extends java.lang.Object
{
    public static final kotlinx.coroutines.debug.AgentPremain INSTANCE;
    private static final boolean enableCreationStackTraces;
    private static boolean isInstalledStatically;

    public static void $r8$lambda$8e1eAWGNJu9vYr96rU9gzKJ_uMQ(sun.misc.Signal)
    {
        sun.misc.Signal $r0;

        $r0 := @parameter0: sun.misc.Signal;

        staticinvoke <kotlinx.coroutines.debug.AgentPremain: void installSignalHandler$lambda-1(sun.misc.Signal)>($r0);

        return;
    }

    static void <clinit>()
    {
        kotlinx.coroutines.debug.AgentPremain $r0;
        java.lang.Object $r1, $r5;
        kotlin.Result$Companion $r2;
        java.lang.String $r3;
        java.lang.Boolean $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r7;

        $r0 = new kotlinx.coroutines.debug.AgentPremain;

        specialinvoke $r0.<kotlinx.coroutines.debug.AgentPremain: void <init>()>();

        <kotlinx.coroutines.debug.AgentPremain: kotlinx.coroutines.debug.AgentPremain INSTANCE> = $r0;

        $r1 = null;

     label01:
        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("kotlinx.coroutines.debug.enable.creation.stack.trace");

     label02:
        if $r3 != null goto label03;

        $r4 = null;

        goto label04;

     label03:
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label04:
        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r5 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r6);

        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

     label07:
        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r5);

        if $z0 == 0 goto label08;

        goto label09;

     label08:
        $r1 = $r5;

     label09:
        $r4 = (java.lang.Boolean) $r1;

        if $r4 != null goto label10;

        $r7 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $z0 = virtualinvoke $r7.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean getEnableCreationStackTraces()>();

        goto label11;

     label10:
        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label11:
        <kotlinx.coroutines.debug.AgentPremain: boolean enableCreationStackTraces> = $z0;

        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
    }

    private void <init>()
    {
        kotlinx.coroutines.debug.AgentPremain r0;

        r0 := @this: kotlinx.coroutines.debug.AgentPremain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final void installSignalHandler()
    {
        kotlinx.coroutines.debug.AgentPremain r0;
        sun.misc.Signal $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.debug.AgentPremain$$ExternalSyntheticLambda0 $r3;

        r0 := @this: kotlinx.coroutines.debug.AgentPremain;

     label1:
        $r1 = new sun.misc.Signal;

        specialinvoke $r1.<sun.misc.Signal: void <init>(java.lang.String)>("TRAP");

        $r3 = new kotlinx.coroutines.debug.AgentPremain$$ExternalSyntheticLambda0;

        specialinvoke $r3.<kotlinx.coroutines.debug.AgentPremain$$ExternalSyntheticLambda0: void <init>()>();

        staticinvoke <sun.misc.Signal: sun.misc.SignalHandler handle(sun.misc.Signal,sun.misc.SignalHandler)>($r1, $r3);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final void installSignalHandler$lambda-1(sun.misc.Signal)
    {
        boolean $z0;
        sun.misc.Signal $r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r1;
        java.io.PrintStream $r2;

        $r0 := @parameter0: sun.misc.Signal;

        $r1 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label1;

        $r1 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void dumpCoroutines(java.io.PrintStream)>($r2);

        return;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>("Cannot perform coroutines dump, debug probes are disabled");

        return;
    }

    public static final void premain(java.lang.String, java.lang.instrument.Instrumentation)
    {
        java.lang.String $r0;
        java.lang.instrument.Instrumentation $r1;
        kotlinx.coroutines.debug.AgentPremain $r2;
        kotlinx.coroutines.debug.AgentPremain$DebugProbesTransformer $r3;
        java.lang.instrument.ClassFileTransformer $r4;
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.instrument.Instrumentation;

        $r2 = <kotlinx.coroutines.debug.AgentPremain: kotlinx.coroutines.debug.AgentPremain INSTANCE>;

        <kotlinx.coroutines.debug.AgentPremain: boolean isInstalledStatically> = 1;

        $r3 = <kotlinx.coroutines.debug.AgentPremain$DebugProbesTransformer: kotlinx.coroutines.debug.AgentPremain$DebugProbesTransformer INSTANCE>;

        $r4 = (java.lang.instrument.ClassFileTransformer) $r3;

        interfaceinvoke $r1.<java.lang.instrument.Instrumentation: void addTransformer(java.lang.instrument.ClassFileTransformer)>($r4);

        $r5 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $z0 = <kotlinx.coroutines.debug.AgentPremain: boolean enableCreationStackTraces>;

        virtualinvoke $r5.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void setEnableCreationStackTraces(boolean)>($z0);

        $r5 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        virtualinvoke $r5.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void install()>();

        specialinvoke $r2.<kotlinx.coroutines.debug.AgentPremain: void installSignalHandler()>();

        return;
    }

    public final boolean isInstalledStatically()
    {
        kotlinx.coroutines.debug.AgentPremain r0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.debug.AgentPremain;

        z0 = <kotlinx.coroutines.debug.AgentPremain: boolean isInstalledStatically>;

        return z0;
    }

    public final void setInstalledStatically(boolean)
    {
        kotlinx.coroutines.debug.AgentPremain r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.AgentPremain;

        $z0 := @parameter0: boolean;

        <kotlinx.coroutines.debug.AgentPremain: boolean isInstalledStatically> = $z0;

        return;
    }
}
