final class kotlinx.coroutines.sync.SemaphoreImpl extends java.lang.Object implements kotlinx.coroutines.sync.Semaphore
{
    static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater deqIdx$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater enqIdx$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU;
    volatile int _availablePermits;
    private volatile long deqIdx;
    private volatile long enqIdx;
    private volatile java.lang.Object head;
    private final kotlin.jvm.functions.Function1 onCancellationRelease;
    private final int permits;
    private volatile java.lang.Object tail;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", class "Ljava/lang/Object;", "head");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", "deqIdx");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater deqIdx$FU> = $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", class "Ljava/lang/Object;", "tail");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", "enqIdx");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater enqIdx$FU> = $r1;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", "_availablePermits");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU> = $r2;

        return;
    }

    public void <init>(int, int)
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        int $i0, $i1;
        boolean $z0, $z1;
        kotlinx.coroutines.sync.SemaphoreSegment $r1;
        kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1 $r2;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Throwable $r7;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits> = $i0;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: long deqIdx> = 0L;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: long enqIdx> = 0L;

        $z0 = 1;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        if $i1 < 0 goto label3;

        if $i1 > $i0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r1 = new kotlinx.coroutines.sync.SemaphoreSegment;

        specialinvoke $r1.<kotlinx.coroutines.sync.SemaphoreSegment: void <init>(long,kotlinx.coroutines.sync.SemaphoreSegment,int)>(0L, null, 2);

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object head> = $r1;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object tail> = $r1;

        $i0 = $i0 - $i1;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: int _availablePermits> = $i0;

        $r2 = new kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1;

        specialinvoke $r2.<kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1: void <init>(kotlinx.coroutines.sync.SemaphoreImpl)>(r0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease> = $r3;

        return;

     label5:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("The number of acquired permits should be in 0..", $r4);

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        $r7 = (java.lang.Throwable) $r6;

        throw $r7;

     label6:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Semaphore should have at least 1 permit, but had ", $r4);

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        $r7 = (java.lang.Throwable) $r6;

        throw $r7;
    }

    public static final java.lang.Object access$acquireSlowPath(kotlinx.coroutines.sync.SemaphoreImpl, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.sync.SemaphoreImpl $r2;

        $r2 := @parameter0: kotlinx.coroutines.sync.SemaphoreImpl;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = specialinvoke $r2.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object acquireSlowPath(kotlin.coroutines.Continuation)>($r0);

        return $r1;
    }

    public static final boolean access$addAcquireToQueue(kotlinx.coroutines.sync.SemaphoreImpl, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.CancellableContinuation $r0;
        boolean $z0;
        kotlinx.coroutines.sync.SemaphoreImpl $r1;

        $r1 := @parameter0: kotlinx.coroutines.sync.SemaphoreImpl;

        $r0 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $z0 = specialinvoke $r1.<kotlinx.coroutines.sync.SemaphoreImpl: boolean addAcquireToQueue(kotlinx.coroutines.CancellableContinuation)>($r0);

        return $z0;
    }

    public static final kotlin.jvm.functions.Function1 access$getOnCancellationRelease$p(kotlinx.coroutines.sync.SemaphoreImpl)
    {
        kotlinx.coroutines.sync.SemaphoreImpl $r0;
        kotlin.jvm.functions.Function1 r1;

        $r0 := @parameter0: kotlinx.coroutines.sync.SemaphoreImpl;

        r1 = $r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease>;

        return r1;
    }

    private final java.lang.Object acquireSlowPath(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        kotlin.coroutines.Continuation $r1, $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;
        kotlinx.coroutines.CancellableContinuation $r4;
        boolean $z0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r5;
        int $i0;
        kotlin.Unit $r6;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Object $r8, $r9;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r2);

        $r4 = (kotlinx.coroutines.CancellableContinuation) $r3;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreImpl: boolean access$addAcquireToQueue(kotlinx.coroutines.sync.SemaphoreImpl,kotlinx.coroutines.CancellableContinuation)>(r0, $r4);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r5 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(java.lang.Object)>(r0);

        if $i0 <= 0 goto label1;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = staticinvoke <kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 access$getOnCancellationRelease$p(kotlinx.coroutines.sync.SemaphoreImpl)>(r0);

        interfaceinvoke $r4.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r6, $r7);

     label3:
        $r8 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label4;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label4:
        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label5;

        return $r8;

     label5:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;
    }

    private final boolean addAcquireToQueue(kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        kotlinx.coroutines.CancellableContinuation $r2;
        java.lang.Object $r3, $r9;
        kotlinx.coroutines.sync.SemaphoreSegment $r4, $r18;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        long $l0, $l2, $l3, $l5;
        int $i1;
        kotlinx.coroutines.internal.Segment $r6, $r10;
        byte $b4;
        boolean $z0, $z1;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r7;
        kotlinx.coroutines.internal.Symbol $r8, $r15;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r11;
        kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler $r12;
        kotlinx.coroutines.CancelHandlerBase $r13;
        kotlin.jvm.functions.Function1 $r14;
        kotlin.Unit $r16;
        java.lang.AssertionError $r17;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r2 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r3 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object tail>;

        $r4 = (kotlinx.coroutines.sync.SemaphoreSegment) $r3;

        $r5 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater enqIdx$FU>;

        $l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $i1 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        $l2 = (long) $i1;

        $l2 = $l0 / $l2;

     label01:
        $r6 = (kotlinx.coroutines.internal.Segment) $r4;

     label02:
        $l3 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: long getId()>();

        $b4 = $l3 cmp $l2;

        if $b4 < 0 goto label04;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: boolean getRemoved()>();

        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r3 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r6);

        goto label05;

     label04:
        $r7 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r6;

        $r3 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r7);

        $r8 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r3 != $r8 goto label18;

        $r8 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r8);

     label05:
        $z1 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r3);

        $z0 = 1;

        if $z1 != 0 goto label12;

        $r6 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r3);

     label06:
        $r9 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object tail>;

        $r10 = (kotlinx.coroutines.internal.Segment) $r9;

        $l3 = virtualinvoke $r10.<kotlinx.coroutines.internal.Segment: long getId()>();

        $l5 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: long getId()>();

        $b4 = $l3 cmp $l5;

        if $b4 < 0 goto label08;

     label07:
        $z1 = 1;

        goto label10;

     label08:
        $z1 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z1 != 0 goto label09;

        $z1 = 0;

        goto label10;

     label09:
        $r11 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU>;

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r11, r0, $r10, $r6);

        if $z1 == 0 goto label11;

        $z1 = virtualinvoke $r10.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z1 == 0 goto label07;

        virtualinvoke $r10.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label07;

     label10:
        if $z1 == 0 goto label01;

        goto label12;

     label11:
        $z1 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z1 == 0 goto label06;

        virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label06;

     label12:
        $r6 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r3);

        $r4 = (kotlinx.coroutines.sync.SemaphoreSegment) $r6;

        $i1 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        $l2 = (long) $i1;

        $l0 = $l0 % $l2;

        $i1 = (int) $l0;

        $r1 = $r4.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $z1 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i1, null, $r2);

        if $z1 == 0 goto label13;

        $r12 = new kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler;

        specialinvoke $r12.<kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler: void <init>(kotlinx.coroutines.sync.SemaphoreSegment,int)>($r4, $i1);

        $r13 = (kotlinx.coroutines.CancelHandlerBase) $r12;

        $r14 = (kotlin.jvm.functions.Function1) $r13;

        interfaceinvoke $r2.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r14);

        return 1;

     label13:
        $r8 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getPERMIT$p()>();

        $r15 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getTAKEN$p()>();

        $r1 = $r4.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $z1 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i1, $r8, $r15);

        if $z1 == 0 goto label14;

        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r14 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease>;

        interfaceinvoke $r2.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r16, $r14);

        return 1;

     label14:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label21;

        $r1 = $r4.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i1);

        $r8 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getBROKEN$p()>();

        if $r3 != $r8 goto label15;

        goto label16;

     label15:
        $z0 = 0;

     label16:
        if $z0 == 0 goto label17;

        return 0;

     label17:
        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label18:
        $r7 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r3;

        $r10 = (kotlinx.coroutines.internal.Segment) $r7;

        if $r10 == null goto label20;

     label19:
        $r6 = $r10;

        goto label02;

     label20:
        $l3 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: long getId()>();

        $l3 = $l3 + 1L;

        $r18 = (kotlinx.coroutines.sync.SemaphoreSegment) $r6;

        $r18 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.sync.SemaphoreSegment access$createSegment(long,kotlinx.coroutines.sync.SemaphoreSegment)>($l3, $r18);

        $r10 = (kotlinx.coroutines.internal.Segment) $r18;

        $r7 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r10;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: boolean trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r7);

        if $z0 == 0 goto label02;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: boolean getRemoved()>();

        if $z0 == 0 goto label19;

        virtualinvoke $r6.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label19;

     label21:
        return 0;
    }

    private final boolean tryResumeAcquire(kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        kotlin.Unit $r4;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r3 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r1 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease>;

        $r2 = interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResume(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, null, $r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r2);

        return 1;
    }

    private final boolean tryResumeNextFromQueue()
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r1, $r7;
        kotlinx.coroutines.sync.SemaphoreSegment $r2, $r13;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        long $l0, $l2, $l3, $l5;
        int $i1, $i6, $i7;
        kotlinx.coroutines.internal.Segment $r4, $r8;
        byte $b4;
        boolean $z0;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r5;
        kotlinx.coroutines.internal.Symbol $r6, $r11;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9;
        java.util.concurrent.atomic.AtomicReferenceArray $r10;
        kotlinx.coroutines.CancellableContinuation $r12;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object head>;

        $r2 = (kotlinx.coroutines.sync.SemaphoreSegment) $r1;

        $r3 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater deqIdx$FU>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $i1 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        $l2 = (long) $i1;

        $l2 = $l0 / $l2;

     label01:
        $r4 = (kotlinx.coroutines.internal.Segment) $r2;

     label02:
        $l3 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: long getId()>();

        $b4 = $l3 cmp $l2;

        if $b4 < 0 goto label04;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean getRemoved()>();

        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r1 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        goto label05;

     label04:
        $r5 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r4;

        $r1 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r5);

        $r6 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r1 != $r6 goto label19;

        $r6 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        $r1 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r6);

     label05:
        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r1);

        $i1 = 0;

        if $z0 != 0 goto label12;

        $r4 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r1);

     label06:
        $r7 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object head>;

        $r8 = (kotlinx.coroutines.internal.Segment) $r7;

        $l3 = virtualinvoke $r8.<kotlinx.coroutines.internal.Segment: long getId()>();

        $l5 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: long getId()>();

        $b4 = $l3 cmp $l5;

        if $b4 < 0 goto label08;

     label07:
        $z0 = 1;

        goto label10;

     label08:
        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label09;

        $z0 = 0;

        goto label10;

     label09:
        $r9 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r9, r0, $r8, $r4);

        if $z0 == 0 goto label11;

        $z0 = virtualinvoke $r8.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label07;

        virtualinvoke $r8.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label07;

     label10:
        if $z0 == 0 goto label01;

        goto label12;

     label11:
        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label06;

        virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label06;

     label12:
        $r4 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r1);

        $r2 = (kotlinx.coroutines.sync.SemaphoreSegment) $r4;

        virtualinvoke $r2.<kotlinx.coroutines.sync.SemaphoreSegment: void cleanPrev()>();

        $l3 = virtualinvoke $r2.<kotlinx.coroutines.sync.SemaphoreSegment: long getId()>();

        $b4 = $l3 cmp $l2;

        if $b4 <= 0 goto label13;

        return 0;

     label13:
        $i6 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        $l2 = (long) $i6;

        $l0 = $l0 % $l2;

        $i6 = (int) $l0;

        $r6 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getPERMIT$p()>();

        $r10 = $r2.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $r1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i6, $r6);

        if $r1 != null goto label17;

        $i7 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getMAX_SPIN_CYCLES$p()>();

     label14:
        if $i1 >= $i7 goto label16;

        $r10 = $r2.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $r1 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i6);

        $r6 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getTAKEN$p()>();

        if $r1 != $r6 goto label15;

        return 1;

     label15:
        $i1 = $i1 + 1;

        goto label14;

     label16:
        $r6 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getPERMIT$p()>();

        $r11 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getBROKEN$p()>();

        $r10 = $r2.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $z0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r10, $i6, $r6, $r11);

        $z0 = $z0 ^ 1;

        return $z0;

     label17:
        $r6 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getCANCELLED$p()>();

        if $r1 != $r6 goto label18;

        return 0;

     label18:
        $r12 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $z0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean tryResumeAcquire(kotlinx.coroutines.CancellableContinuation)>($r12);

        return $z0;

     label19:
        $r5 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r1;

        $r8 = (kotlinx.coroutines.internal.Segment) $r5;

        if $r8 == null goto label21;

     label20:
        $r4 = $r8;

        goto label02;

     label21:
        $l3 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: long getId()>();

        $l3 = $l3 + 1L;

        $r13 = (kotlinx.coroutines.sync.SemaphoreSegment) $r4;

        $r13 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.sync.SemaphoreSegment access$createSegment(long,kotlinx.coroutines.sync.SemaphoreSegment)>($l3, $r13);

        $r8 = (kotlinx.coroutines.internal.Segment) $r13;

        $r5 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r8;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r5);

        if $z0 == 0 goto label02;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean getRemoved()>();

        if $z0 == 0 goto label20;

        virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label20;
    }

    public java.lang.Object acquire(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        kotlin.coroutines.Continuation $r1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        int $i0;
        java.lang.Object $r3, $r4;
        kotlin.Unit r5;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(java.lang.Object)>(r0);

        if $i0 <= 0 goto label1;

        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r5;

     label1:
        $r3 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object acquireSlowPath(kotlin.coroutines.Continuation)>($r1);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label2;

        return $r3;

     label2:
        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r5;
    }

    public int getAvailablePermits()
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        int $i0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int _availablePermits>;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 0);

        return $i0;
    }

    public void release()
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        int $i0, $i1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

     label1:
        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int _availablePermits>;

        $i1 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        if $i0 >= $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label5;

        $i1 = $i0 + 1;

        $r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, $i1);

        if $z0 == 0 goto label1;

        if $i0 < 0 goto label4;

        return;

     label4:
        $z0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean tryResumeNextFromQueue()>();

        if $z0 == 0 goto label1;

        return;

     label5:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("The number of released permits cannot be greater than ", $r2);

        $r4 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        $r5 = (java.lang.Throwable) $r4;

        throw $r5;
    }

    public boolean tryAcquire()
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

     label1:
        $i1 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int _availablePermits>;

        if $i1 > 0 goto label2;

        return 0;

     label2:
        $r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = $i1 + -1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i0);

        if $z0 == 0 goto label1;

        return 1;
    }
}
