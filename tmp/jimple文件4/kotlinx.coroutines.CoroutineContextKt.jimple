public final class kotlinx.coroutines.CoroutineContextKt extends java.lang.Object
{
    public static final java.lang.String COROUTINES_SCHEDULER_PROPERTY_NAME;
    private static final java.lang.String DEBUG_THREAD_NAME_SEPARATOR;
    private static final boolean useCoroutinesScheduler;

    static void <clinit>()
    {
        java.lang.String $r0;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;

        <kotlinx.coroutines.CoroutineContextKt: java.lang.String DEBUG_THREAD_NAME_SEPARATOR> = " @";

        <kotlinx.coroutines.CoroutineContextKt: java.lang.String COROUTINES_SCHEDULER_PROPERTY_NAME> = "kotlinx.coroutines.scheduler";

        $r0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)>("kotlinx.coroutines.scheduler");

        if $r0 == null goto label4;

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        if $i0 == 0 goto label2;

        if $i0 == 3551 goto label1;

        if $i0 != 109935 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z0 == 0 goto label3;

        $z0 = 0;

        goto label5;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z0 == 0 goto label3;

        goto label4;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System property \'kotlinx.coroutines.scheduler\' has unrecognized value \'");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.IllegalStateException;

        $r0 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;

     label4:
        $z0 = 1;

     label5:
        <kotlinx.coroutines.CoroutineContextKt: boolean useCoroutinesScheduler> = $z0;

        return;
    }

    public static final kotlinx.coroutines.CoroutineDispatcher createDefaultDispatcher()
    {
        boolean $z0;
        kotlinx.coroutines.ExecutorCoroutineDispatcher $r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        $z0 = <kotlinx.coroutines.CoroutineContextKt: boolean useCoroutinesScheduler>;

        if $z0 == 0 goto label1;

        $r0 = <kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE>;

        goto label2;

     label1:
        $r0 = <kotlinx.coroutines.CommonPool: kotlinx.coroutines.CommonPool INSTANCE>;

     label2:
        $r1 = (kotlinx.coroutines.CoroutineDispatcher) $r0;

        return $r1;
    }

    public static final java.lang.String getCoroutineName(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;
        boolean $z0;
        kotlinx.coroutines.CoroutineId$Key $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlinx.coroutines.CoroutineId $r4;
        kotlinx.coroutines.CoroutineName$Key $r5;
        kotlinx.coroutines.CoroutineName $r6;
        java.lang.String $r7, $r8;
        java.lang.StringBuilder $r9;
        long $l0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getDEBUG()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = <kotlinx.coroutines.CoroutineId: kotlinx.coroutines.CoroutineId$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r4 = (kotlinx.coroutines.CoroutineId) $r3;

        if $r4 != null goto label2;

        return null;

     label2:
        $r5 = <kotlinx.coroutines.CoroutineName: kotlinx.coroutines.CoroutineName$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r5;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r6 = (kotlinx.coroutines.CoroutineName) $r3;

        $r7 = "coroutine";

        if $r6 != null goto label3;

        goto label5;

     label3:
        $r8 = virtualinvoke $r6.<kotlinx.coroutines.CoroutineName: java.lang.String getName()>();

        if $r8 != null goto label4;

        goto label5;

     label4:
        $r7 = $r8;

     label5:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $l0 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineId: long getId()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static final boolean getUseCoroutinesScheduler()
    {
        boolean z0;

        z0 = <kotlinx.coroutines.CoroutineContextKt: boolean useCoroutinesScheduler>;

        return z0;
    }

    public static final kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        kotlin.coroutines.CoroutineContext $r1, $r2;
        boolean $z0;
        kotlinx.coroutines.CoroutineId $r3;
        java.util.concurrent.atomic.AtomicLong $r4;
        long $l0;
        kotlinx.coroutines.CoroutineDispatcher $r5;
        kotlin.coroutines.ContinuationInterceptor$Key $r6;
        kotlin.coroutines.CoroutineContext$Key $r7;
        kotlin.coroutines.CoroutineContext$Element $r8;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r1);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getDEBUG()>();

        if $z0 == 0 goto label1;

        $r3 = new kotlinx.coroutines.CoroutineId;

        $r4 = staticinvoke <kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong getCOROUTINE_ID()>();

        $l0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        specialinvoke $r3.<kotlinx.coroutines.CoroutineId: void <init>(long)>($l0);

        $r2 = (kotlin.coroutines.CoroutineContext) $r3;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r2);

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        $r5 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>();

        if $r1 == $r5 goto label3;

        $r6 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r7 = (kotlin.coroutines.CoroutineContext$Key) $r6;

        $r8 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r7);

        if $r8 != null goto label3;

        $r5 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>();

        $r1 = (kotlin.coroutines.CoroutineContext) $r5;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r1);

        return $r1;

     label3:
        return $r2;
    }

    public static final kotlinx.coroutines.UndispatchedCoroutine undispatchedCompletion(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r0, $r1;
        boolean $z0;
        kotlinx.coroutines.UndispatchedCoroutine $r2;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.DispatchedCoroutine;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r0 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        $r1 = $r0;

        if $r0 != null goto label3;

        return null;

     label3:
        $z0 = $r0 instanceof kotlinx.coroutines.UndispatchedCoroutine;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.UndispatchedCoroutine) $r0;

        return $r2;
    }

    public static final kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation, kotlin.coroutines.CoroutineContext, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlinx.coroutines.UndispatchedMarker $r3;
        kotlin.coroutines.CoroutineContext$Key $r4;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r6;
        kotlinx.coroutines.UndispatchedCoroutine $r7;

        $r2 := @parameter0: kotlin.coroutines.Continuation;

        $r0 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter2: java.lang.Object;

        $z0 = $r2 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = <kotlinx.coroutines.UndispatchedMarker: kotlinx.coroutines.UndispatchedMarker INSTANCE>;

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r3;

        $r5 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r4);

        if $r5 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        return null;

     label4:
        $r6 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r2;

        $r7 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine undispatchedCompletion(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r6);

        if $r7 != null goto label5;

        return $r7;

     label5:
        virtualinvoke $r7.<kotlinx.coroutines.UndispatchedCoroutine: void saveThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r1);

        return $r7;
    }

    public static final java.lang.Object withContinuationContext(kotlin.coroutines.Continuation, java.lang.Object, kotlin.jvm.functions.Function0)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1, $r6;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        kotlinx.coroutines.UndispatchedCoroutine $r5;
        boolean $z0;
        java.lang.Throwable $r7;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function0;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r1 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r1);

        $r4 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

        if $r1 == $r4 goto label1;

        $r5 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r3, $r1);

        goto label2;

     label1:
        $r5 = null;

     label2:
        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if $r5 == null goto label4;

        $z0 = virtualinvoke $r5.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if $z0 == 0 goto label5;

     label4:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r1);

     label5:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r6;

     label6:
        $r7 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if $r5 == null goto label7;

        $z0 = virtualinvoke $r5.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if $z0 == 0 goto label8;

     label7:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r1);

     label8:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label6;
    }

    public static final java.lang.Object withCoroutineContext(kotlin.coroutines.CoroutineContext, java.lang.Object, kotlin.jvm.functions.Function0)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.lang.Object $r1, $r3;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Throwable $r4;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function0;

        $r1 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r1);

     label1:
        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
