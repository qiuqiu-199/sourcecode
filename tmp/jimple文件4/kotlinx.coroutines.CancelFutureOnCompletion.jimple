final class kotlinx.coroutines.CancelFutureOnCompletion extends kotlinx.coroutines.JobNode
{
    private final java.util.concurrent.Future future;

    public void <init>(java.util.concurrent.Future)
    {
        kotlinx.coroutines.CancelFutureOnCompletion r0;
        java.util.concurrent.Future $r1;

        r0 := @this: kotlinx.coroutines.CancelFutureOnCompletion;

        $r1 := @parameter0: java.util.concurrent.Future;

        specialinvoke r0.<kotlinx.coroutines.JobNode: void <init>()>();

        r0.<kotlinx.coroutines.CancelFutureOnCompletion: java.util.concurrent.Future future> = $r1;

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlinx.coroutines.CancelFutureOnCompletion r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        kotlin.Unit r3;

        r0 := @this: kotlinx.coroutines.CancelFutureOnCompletion;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.CancelFutureOnCompletion: void invoke(java.lang.Throwable)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public void invoke(java.lang.Throwable)
    {
        kotlinx.coroutines.CancelFutureOnCompletion r0;
        java.lang.Throwable $r1;
        java.util.concurrent.Future $r2;

        r0 := @this: kotlinx.coroutines.CancelFutureOnCompletion;

        $r1 := @parameter0: java.lang.Throwable;

        if $r1 == null goto label1;

        $r2 = r0.<kotlinx.coroutines.CancelFutureOnCompletion: java.util.concurrent.Future future>;

        interfaceinvoke $r2.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label1:
        return;
    }
}
