final class kotlinx.coroutines.sync.SemaphoreSegment extends kotlinx.coroutines.internal.Segment
{
    java.util.concurrent.atomic.AtomicReferenceArray acquirers;

    public void <init>(long, kotlinx.coroutines.sync.SemaphoreSegment, int)
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0, $r1;
        int $i0;
        long $l1;
        kotlinx.coroutines.internal.Segment $r2;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $l1 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 := @parameter2: int;

        $r2 = (kotlinx.coroutines.internal.Segment) $r1;

        specialinvoke r0.<kotlinx.coroutines.internal.Segment: void <init>(long,kotlinx.coroutines.internal.Segment,int)>($l1, $r2, $i0);

        $r3 = new java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers> = $r3;

        return;
    }

    public final void cancel(int)
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        int $i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 := @parameter0: int;

        $r2 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getCANCELLED$p()>();

        $r1 = r0.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r2);

        virtualinvoke r0.<kotlinx.coroutines.sync.SemaphoreSegment: void onSlotCleaned()>();

        return;
    }

    public final boolean cas(int, java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        java.lang.Object $r1, $r2;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        boolean $z0;
        int $i0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $z0 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r3, $i0, $r1, $r2);

        return $z0;
    }

    public final java.lang.Object get(int)
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        java.lang.Object $r2;
        int $i0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 := @parameter0: int;

        $r1 = r0.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        return $r2;
    }

    public final java.lang.Object getAndSet(int, java.lang.Object)
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;
        int $i0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i0, $r1);

        return $r1;
    }

    public int getMaxSlots()
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        int $i0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        return $i0;
    }

    public final void set(int, java.lang.Object)
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        int $i0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray acquirers>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.sync.SemaphoreSegment r0;
        java.lang.StringBuilder $r1;
        long $l0;
        int $i1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreSegment;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SemaphoreSegment[id=");

        $l0 = virtualinvoke r0.<kotlinx.coroutines.sync.SemaphoreSegment: long getId()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hashCode=");

        $i1 = virtualinvoke r0.<kotlinx.coroutines.sync.SemaphoreSegment: int hashCode()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
