public class kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc extends kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _affectedNode$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _originalNext$FU;
    private volatile java.lang.Object _affectedNode;
    private volatile java.lang.Object _originalNext;
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode queue;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;", class "Ljava/lang/Object;", "_affectedNode");

        <kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _affectedNode$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;", class "Ljava/lang/Object;", "_originalNext");

        <kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _originalNext$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: void <init>()>();

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue> = $r1;

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.lang.Object _affectedNode> = null;

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.lang.Object _originalNext> = null;

        return;
    }

    public static void getResult$annotations()
    {
        return;
    }

    protected java.lang.Object failure(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r3 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        if $r3 != $r1 goto label1;

        $r2 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListKt: java.lang.Object getLIST_EMPTY()>();

        return $r2;

     label1:
        return null;
    }

    protected final void finishOnSuccess(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode access$correctPrev(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.OpDescriptor)>($r1, null);

        return;
    }

    public void finishPrepare(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _affectedNode$FU>;

        $r1 = $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode affected>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, null, $r1);

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _originalNext$FU>;

        $r1 = $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode next>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, null, $r1);

        return;
    }

    protected final kotlinx.coroutines.internal.LockFreeLinkedListNode getAffectedNode()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.lang.Object _affectedNode>;

        $r2 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        return $r2;
    }

    protected final kotlinx.coroutines.internal.LockFreeLinkedListNode getOriginalNext()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: java.lang.Object _originalNext>;

        $r2 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        return $r2;
    }

    public final java.lang.Object getResult()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode getAffectedNode()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    protected final boolean retry(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        java.lang.Object $r2;
        boolean $z0;
        kotlinx.coroutines.internal.Removed $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: java.lang.Object;

        $z0 = $r2 instanceof kotlinx.coroutines.internal.Removed;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = (kotlinx.coroutines.internal.Removed) $r2;

        $r1 = $r3.<kotlinx.coroutines.internal.Removed: kotlinx.coroutines.internal.LockFreeLinkedListNode ref>;

        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpRemovePrev()>();

        return 1;
    }

    protected final kotlinx.coroutines.internal.LockFreeLinkedListNode takeAffectedNode(kotlinx.coroutines.internal.OpDescriptor)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r5;
        boolean $z0;
        kotlinx.coroutines.internal.OpDescriptor $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.OpDescriptor;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

     label1:
        $r3 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next>;

        $z0 = $r3 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label3;

        $r4 = (kotlinx.coroutines.internal.OpDescriptor) $r3;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.OpDescriptor: boolean isEarlierThan(kotlinx.coroutines.internal.OpDescriptor)>($r4);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r5 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        virtualinvoke $r4.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>($r5);

        goto label1;

     label3:
        $r1 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        return $r1;
    }

    public final java.lang.Object updatedNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r3;
        kotlinx.coroutines.internal.Removed $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc;

        $r3 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed access$removed(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1);

        return $r2;
    }
}
