public final class kotlinx.coroutines.JobKt extends java.lang.Object
{

    public static final kotlinx.coroutines.DisposableHandle DisposableHandle(kotlin.jvm.functions.Function0)
    {
        kotlinx.coroutines.DisposableHandle $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.DisposableHandle DisposableHandle(kotlin.jvm.functions.Function0)>($r1);

        return $r0;
    }

    public static final kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.CompletableJob $r0;
        kotlinx.coroutines.Job $r1;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r1);

        return $r0;
    }

    public static final kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>($r0);

        return $r0;
    }

    public static kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.CompletableJob $r1;
        kotlinx.coroutines.Job $r2;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>($r2, $i0, $r0);

        return $r1;
    }

    public static kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.Job $r1;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>($r1, $i0, $r0);

        return $r1;
    }

    public static final void cancel(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancel(kotlin.coroutines.CoroutineContext)>($r0);

        return;
    }

    public static final void cancel(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.util.concurrent.CancellationException $r1;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r0, $r1);

        return;
    }

    public static final void cancel(kotlinx.coroutines.Job, java.lang.String, java.lang.Throwable)
    {
        kotlinx.coroutines.Job $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancel(kotlinx.coroutines.Job,java.lang.String,java.lang.Throwable)>($r0, $r1, $r2);

        return;
    }

    public static final boolean cancel(kotlin.coroutines.CoroutineContext, java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        boolean $z0;
        kotlin.coroutines.CoroutineContext $r1;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r0 := @parameter1: java.lang.Throwable;

        $z0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: boolean cancel(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r1, $r0);

        return $z0;
    }

    public static void cancel$default(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.util.concurrent.CancellationException $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancel$default(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException,int,java.lang.Object)>($r0, $r1, $i0, $r2);

        return;
    }

    public static void cancel$default(kotlinx.coroutines.Job, java.lang.String, java.lang.Throwable, int, java.lang.Object)
    {
        kotlinx.coroutines.Job $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        int $i0;
        java.lang.Object $r3;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancel$default(kotlinx.coroutines.Job,java.lang.String,java.lang.Throwable,int,java.lang.Object)>($r0, $r1, $r2, $i0, $r3);

        return;
    }

    public static boolean cancel$default(kotlin.coroutines.CoroutineContext, java.lang.Throwable, int, java.lang.Object)
    {
        java.lang.Throwable $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        kotlin.coroutines.CoroutineContext $r2;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r0 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: boolean cancel$default(kotlin.coroutines.CoroutineContext,java.lang.Throwable,int,java.lang.Object)>($r2, $r0, $i0, $r1);

        return $z0;
    }

    public static final java.lang.Object cancelAndJoin(kotlinx.coroutines.Job, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.Job $r2;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: java.lang.Object cancelAndJoin(kotlinx.coroutines.Job,kotlin.coroutines.Continuation)>($r2, $r0);

        return $r1;
    }

    public static final void cancelChildren(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren(kotlin.coroutines.CoroutineContext)>($r0);

        return;
    }

    public static final void cancelChildren(kotlin.coroutines.CoroutineContext, java.lang.Throwable)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r0, $r1);

        return;
    }

    public static final void cancelChildren(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.util.concurrent.CancellationException $r1;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r0, $r1);

        return;
    }

    public static final void cancelChildren(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren(kotlinx.coroutines.Job)>($r0);

        return;
    }

    public static final void cancelChildren(kotlinx.coroutines.Job, java.lang.Throwable)
    {
        kotlinx.coroutines.Job $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren(kotlinx.coroutines.Job,java.lang.Throwable)>($r0, $r1);

        return;
    }

    public static final void cancelChildren(kotlinx.coroutines.Job, java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.Job $r0;
        java.util.concurrent.CancellationException $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren(kotlinx.coroutines.Job,java.util.concurrent.CancellationException)>($r0, $r1);

        return;
    }

    public static void cancelChildren$default(kotlin.coroutines.CoroutineContext, java.lang.Throwable, int, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.lang.Throwable $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren$default(kotlin.coroutines.CoroutineContext,java.lang.Throwable,int,java.lang.Object)>($r0, $r1, $i0, $r2);

        return;
    }

    public static void cancelChildren$default(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext $r0;
        java.util.concurrent.CancellationException $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren$default(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException,int,java.lang.Object)>($r0, $r1, $i0, $r2);

        return;
    }

    public static void cancelChildren$default(kotlinx.coroutines.Job, java.lang.Throwable, int, java.lang.Object)
    {
        kotlinx.coroutines.Job $r0;
        java.lang.Throwable $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren$default(kotlinx.coroutines.Job,java.lang.Throwable,int,java.lang.Object)>($r0, $r1, $i0, $r2);

        return;
    }

    public static void cancelChildren$default(kotlinx.coroutines.Job, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        kotlinx.coroutines.Job $r0;
        java.util.concurrent.CancellationException $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void cancelChildren$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r0, $r1, $i0, $r2);

        return;
    }

    public static final void cancelFutureOnCancellation(kotlinx.coroutines.CancellableContinuation, java.util.concurrent.Future)
    {
        kotlinx.coroutines.CancellableContinuation $r0;
        java.util.concurrent.Future $r1;

        $r0 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r1 := @parameter1: java.util.concurrent.Future;

        staticinvoke <kotlinx.coroutines.JobKt__FutureKt: void cancelFutureOnCancellation(kotlinx.coroutines.CancellableContinuation,java.util.concurrent.Future)>($r0, $r1);

        return;
    }

    public static final kotlinx.coroutines.DisposableHandle cancelFutureOnCompletion(kotlinx.coroutines.Job, java.util.concurrent.Future)
    {
        java.util.concurrent.Future $r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.Job $r2;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        $r0 := @parameter1: java.util.concurrent.Future;

        $r1 = staticinvoke <kotlinx.coroutines.JobKt__FutureKt: kotlinx.coroutines.DisposableHandle cancelFutureOnCompletion(kotlinx.coroutines.Job,java.util.concurrent.Future)>($r2, $r0);

        return $r1;
    }

    public static final kotlinx.coroutines.DisposableHandle disposeOnCompletion(kotlinx.coroutines.Job, kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r0;
        kotlinx.coroutines.Job $r1;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r0 := @parameter1: kotlinx.coroutines.DisposableHandle;

        $r0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.DisposableHandle disposeOnCompletion(kotlinx.coroutines.Job,kotlinx.coroutines.DisposableHandle)>($r1, $r0);

        return $r0;
    }

    public static final void ensureActive(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void ensureActive(kotlin.coroutines.CoroutineContext)>($r0);

        return;
    }

    public static final void ensureActive(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        staticinvoke <kotlinx.coroutines.JobKt__JobKt: void ensureActive(kotlinx.coroutines.Job)>($r0);

        return;
    }

    public static final kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.Job $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)>($r1);

        return $r0;
    }

    public static final boolean isActive(kotlin.coroutines.CoroutineContext)
    {
        boolean $z0;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $z0 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: boolean isActive(kotlin.coroutines.CoroutineContext)>($r0);

        return $z0;
    }
}
