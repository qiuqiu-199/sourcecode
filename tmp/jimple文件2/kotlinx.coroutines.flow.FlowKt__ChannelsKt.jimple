final class kotlinx.coroutines.flow.FlowKt__ChannelsKt extends java.lang.Object
{

    public static final java.lang.Object access$emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.ReceiveChannel $r0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.flow.FlowCollector $r3;

        $r3 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r0 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ChannelsKt: java.lang.Object emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.Continuation)>($r3, $r0, $z0, $r1);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow asFlow(kotlinx.coroutines.channels.BroadcastChannel)
    {
        kotlinx.coroutines.channels.BroadcastChannel $r0;
        kotlinx.coroutines.flow.FlowKt__ChannelsKt$asFlow$$inlined$unsafeFlow$1 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.BroadcastChannel;

        $r1 = new kotlinx.coroutines.flow.FlowKt__ChannelsKt$asFlow$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$asFlow$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.channels.BroadcastChannel)>($r0);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static final kotlinx.coroutines.channels.BroadcastChannel broadcastIn(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.CoroutineStart)
    {
        kotlinx.coroutines.CoroutineStart $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlinx.coroutines.flow.internal.ChannelFlow $r4;
        kotlinx.coroutines.channels.BufferOverflow $r5;
        int[] $r6;
        int $i0;
        kotlin.NoWhenBranchMatchedException $r7;
        java.lang.IllegalArgumentException $r8;
        kotlinx.coroutines.flow.FlowKt__ChannelsKt$broadcastIn$1 $r9;
        kotlin.jvm.functions.Function2 $r10;
        kotlinx.coroutines.channels.BroadcastChannel $r11;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r3 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r0 := @parameter2: kotlinx.coroutines.CoroutineStart;

        $r4 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: kotlinx.coroutines.flow.internal.ChannelFlow asChannelFlow(kotlinx.coroutines.flow.Flow)>($r2);

        $r5 = $r4.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r6 = <kotlinx.coroutines.flow.FlowKt__ChannelsKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r5.<kotlinx.coroutines.channels.BufferOverflow: int ordinal()>();

        $i0 = $r6[$i0];

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        $r7 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r7.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r7;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Broadcast channel does not support BufferOverflow.DROP_LATEST");

        throw $r8;

     label2:
        $i0 = -1;

        goto label4;

     label3:
        $i0 = virtualinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelFlow: int getProduceCapacity$kotlinx_coroutines_core()>();

     label4:
        $r1 = $r4.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        $r9 = new kotlinx.coroutines.flow.FlowKt__ChannelsKt$broadcastIn$1;

        specialinvoke $r9.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$broadcastIn$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r2, null);

        $r10 = (kotlin.jvm.functions.Function2) $r9;

        $r11 = staticinvoke <kotlinx.coroutines.channels.BroadcastKt: kotlinx.coroutines.channels.BroadcastChannel broadcast$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r3, $r1, $i0, $r0, null, $r10, 8, null);

        return $r11;
    }

    public static kotlinx.coroutines.channels.BroadcastChannel broadcastIn$default(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.CoroutineStart, int, java.lang.Object)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BroadcastChannel $r2;
        kotlinx.coroutines.flow.Flow $r3;
        kotlinx.coroutines.CoroutineStart $r4;
        int $i0;

        $r3 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r4 := @parameter2: kotlinx.coroutines.CoroutineStart;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r4 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY>;

     label1:
        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.channels.BroadcastChannel broadcastIn(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.CoroutineStart)>($r3, $r0, $r4);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow consumeAsFlow(kotlinx.coroutines.channels.ReceiveChannel)
    {
        kotlinx.coroutines.channels.ReceiveChannel $r0;
        kotlinx.coroutines.flow.ChannelAsFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $r1 = new kotlinx.coroutines.flow.ChannelAsFlow;

        specialinvoke $r1.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, 1, null, 0, null, 28, null);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static final java.lang.Object emitAll(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r2;
        java.lang.Object $r3, $r4;
        kotlin.Unit r5;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ChannelsKt: java.lang.Object emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.Continuation)>($r1, $r2, 1, $r0);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label1;

        return $r3;

     label1:
        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r5;
    }

    private static final java.lang.Object emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        boolean $z0, $z1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1 $r3;
        int $i0;
        java.lang.Object $r4, $r5, $r6;
        java.lang.IllegalStateException $r7;
        kotlinx.coroutines.channels.ChannelResult $r8;
        java.lang.Throwable $r9, $r10, $r11;
        kotlin.Unit r12;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $z1 = $r2 instanceof kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1;

        if $z1 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: void <init>(kotlin.coroutines.Continuation)>($r2);

     label02:
        $r4 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label>;

        if $i0 == 0 goto label10;

        if $i0 == 1 goto label06;

        if $i0 != 2 goto label05;

        $z0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0>;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1>;

        $r1 = (kotlinx.coroutines.channels.ReceiveChannel) $r6;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0>;

        $r0 = (kotlinx.coroutines.flow.FlowCollector) $r6;

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label04:
        goto label11;

     label05:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;

     label06:
        $z0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0>;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1>;

        $r1 = (kotlinx.coroutines.channels.ReceiveChannel) $r6;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0>;

        $r0 = (kotlinx.coroutines.flow.FlowCollector) $r6;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r8 = (kotlinx.coroutines.channels.ChannelResult) $r4;

        $r4 = virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelResult: java.lang.Object unbox-impl()>();

     label08:
        goto label13;

     label09:
        $r9 := @caughtexception;

        goto label22;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        staticinvoke <kotlinx.coroutines.flow.FlowKt: void ensureActive(kotlinx.coroutines.flow.FlowCollector)>($r0);

     label11:
        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0> = $r0;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0> = $z0;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label> = 1;

        $r6 = interfaceinvoke $r1.<kotlinx.coroutines.channels.ReceiveChannel: java.lang.Object receiveCatching-JP2dKIU(kotlin.coroutines.Continuation)>($r3);

     label12:
        $r4 = $r6;

        if $r6 != $r5 goto label13;

        return $r5;

     label13:
        $z1 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: boolean isClosed-impl(java.lang.Object)>($r4);

     label14:
        if $z1 == 0 goto label19;

     label15:
        $r9 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r4);

     label16:
        if $r9 != null goto label18;

        if $z0 == 0 goto label17;

        staticinvoke <kotlinx.coroutines.channels.ChannelsKt: void cancelConsumed(kotlinx.coroutines.channels.ReceiveChannel,java.lang.Throwable)>($r1, null);

     label17:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;

     label18:
        throw $r9;

     label19:
        $r4 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: java.lang.Object getOrThrow-impl(java.lang.Object)>($r4);

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0> = $r0;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0> = $z0;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label> = 2;

        $r4 = interfaceinvoke $r0.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r4, $r3);

     label20:
        if $r4 != $r5 goto label04;

        return $r5;

     label21:
        $r10 := @caughtexception;

        $r9 = $r10;

     label22:
        throw $r9;

     label23:
        $r11 := @caughtexception;

        if $z0 == 0 goto label24;

        staticinvoke <kotlinx.coroutines.channels.ChannelsKt: void cancelConsumed(kotlinx.coroutines.channels.ReceiveChannel,java.lang.Throwable)>($r1, $r9);

     label24:
        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label15 to label16 with label09;
        catch java.lang.Throwable from label18 to label20 with label09;
        catch java.lang.Throwable from label22 to label23 with label23;
    }

    public static final kotlinx.coroutines.channels.ReceiveChannel produceIn(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.CoroutineScope $r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.flow.internal.ChannelFlow $r2;
        kotlinx.coroutines.channels.ReceiveChannel $r3;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: kotlinx.coroutines.flow.internal.ChannelFlow asChannelFlow(kotlinx.coroutines.flow.Flow)>($r1);

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)>($r0);

        return $r3;
    }

    public static final kotlinx.coroutines.flow.Flow receiveAsFlow(kotlinx.coroutines.channels.ReceiveChannel)
    {
        kotlinx.coroutines.channels.ReceiveChannel $r0;
        kotlinx.coroutines.flow.ChannelAsFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $r1 = new kotlinx.coroutines.flow.ChannelAsFlow;

        specialinvoke $r1.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, 0, null, 0, null, 28, null);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }
}
