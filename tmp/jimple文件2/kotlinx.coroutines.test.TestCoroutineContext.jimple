public final class kotlinx.coroutines.test.TestCoroutineContext extends java.lang.Object implements kotlin.coroutines.CoroutineContext
{
    private long counter;
    private final kotlinx.coroutines.test.TestCoroutineContext$Dispatcher ctxDispatcher;
    private final kotlinx.coroutines.CoroutineExceptionHandler ctxHandler;
    private final java.lang.String name;
    private final kotlinx.coroutines.internal.ThreadSafeHeap queue;
    private long time;
    private final java.util.List uncaughtExceptions;

    public void <init>()
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        specialinvoke r0.<kotlinx.coroutines.test.TestCoroutineContext: void <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        return;
    }

    public void <init>(java.lang.String)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        kotlinx.coroutines.test.TestCoroutineContext$Dispatcher $r4;
        kotlinx.coroutines.CoroutineExceptionHandler$Key $r5;
        kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1 $r6;
        kotlinx.coroutines.CoroutineExceptionHandler $r7;
        kotlinx.coroutines.internal.ThreadSafeHeap $r8;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.test.TestCoroutineContext: java.lang.String name> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = (java.util.List) $r2;

        r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions> = $r3;

        $r4 = new kotlinx.coroutines.test.TestCoroutineContext$Dispatcher;

        specialinvoke $r4.<kotlinx.coroutines.test.TestCoroutineContext$Dispatcher: void <init>(kotlinx.coroutines.test.TestCoroutineContext)>(r0);

        r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.test.TestCoroutineContext$Dispatcher ctxDispatcher> = $r4;

        $r5 = <kotlinx.coroutines.CoroutineExceptionHandler: kotlinx.coroutines.CoroutineExceptionHandler$Key Key>;

        $r6 = new kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1;

        specialinvoke $r6.<kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1: void <init>(kotlinx.coroutines.CoroutineExceptionHandler$Key,kotlinx.coroutines.test.TestCoroutineContext)>($r5, r0);

        $r7 = (kotlinx.coroutines.CoroutineExceptionHandler) $r6;

        r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.CoroutineExceptionHandler ctxHandler> = $r7;

        $r8 = new kotlinx.coroutines.internal.ThreadSafeHeap;

        specialinvoke $r8.<kotlinx.coroutines.internal.ThreadSafeHeap: void <init>()>();

        r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue> = $r8;

        return;
    }

    public void <init>(java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r2 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        specialinvoke r0.<kotlinx.coroutines.test.TestCoroutineContext: void <init>(java.lang.String)>($r2);

        return;
    }

    public static final void access$enqueue(kotlinx.coroutines.test.TestCoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter1: java.lang.Runnable;

        specialinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: void enqueue(java.lang.Runnable)>($r1);

        return;
    }

    public static final kotlinx.coroutines.internal.ThreadSafeHeap access$getQueue$p(kotlinx.coroutines.test.TestCoroutineContext)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        kotlinx.coroutines.internal.ThreadSafeHeap r1;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        r1 = $r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        return r1;
    }

    public static final java.util.List access$getUncaughtExceptions$p(kotlinx.coroutines.test.TestCoroutineContext)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        java.util.List r1;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        r1 = $r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        return r1;
    }

    public static final kotlinx.coroutines.test.TimedRunnableObsolete access$postDelayed(kotlinx.coroutines.test.TestCoroutineContext, java.lang.Runnable, long)
    {
        java.lang.Runnable $r0;
        long $l0;
        kotlinx.coroutines.test.TimedRunnableObsolete $r1;
        kotlinx.coroutines.test.TestCoroutineContext $r2;

        $r2 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r0 := @parameter1: java.lang.Runnable;

        $l0 := @parameter2: long;

        $r1 = specialinvoke $r2.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.test.TimedRunnableObsolete postDelayed(java.lang.Runnable,long)>($r0, $l0);

        return $r1;
    }

    public static final long access$processNextEvent(kotlinx.coroutines.test.TestCoroutineContext)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 = specialinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: long processNextEvent()>();

        return $l0;
    }

    public static long advanceTimeBy$default(kotlinx.coroutines.test.TestCoroutineContext, long, java.util.concurrent.TimeUnit, int, java.lang.Object)
    {
        long $l0;
        java.lang.Object $r0;
        kotlinx.coroutines.test.TestCoroutineContext $r1;
        java.util.concurrent.TimeUnit $r2;
        int $i1;

        $r1 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label1:
        $l0 = virtualinvoke $r1.<kotlinx.coroutines.test.TestCoroutineContext: long advanceTimeBy(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l0;
    }

    public static void advanceTimeTo$default(kotlinx.coroutines.test.TestCoroutineContext, long, java.util.concurrent.TimeUnit, int, java.lang.Object)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        long $l0;
        java.lang.Object $r1;
        java.util.concurrent.TimeUnit $r2;
        int $i1;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: void advanceTimeTo(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return;
    }

    public static void assertAllUnhandledExceptions$default(kotlinx.coroutines.test.TestCoroutineContext, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = "";

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: void assertAllUnhandledExceptions(java.lang.String,kotlin.jvm.functions.Function1)>($r3, $r1);

        return;
    }

    public static void assertAnyUnhandledException$default(kotlinx.coroutines.test.TestCoroutineContext, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = "";

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: void assertAnyUnhandledException(java.lang.String,kotlin.jvm.functions.Function1)>($r3, $r1);

        return;
    }

    public static void assertExceptions$default(kotlinx.coroutines.test.TestCoroutineContext, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = "";

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: void assertExceptions(java.lang.String,kotlin.jvm.functions.Function1)>($r3, $r1);

        return;
    }

    public static void assertUnhandledException$default(kotlinx.coroutines.test.TestCoroutineContext, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlinx.coroutines.test.TestCoroutineContext $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = "";

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.test.TestCoroutineContext: void assertUnhandledException(java.lang.String,kotlin.jvm.functions.Function1)>($r3, $r1);

        return;
    }

    private final void enqueue(java.lang.Runnable)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.internal.ThreadSafeHeap $r2;
        long $l0, $l1;
        kotlinx.coroutines.test.TimedRunnableObsolete $r3;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r4;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        $r3 = new kotlinx.coroutines.test.TimedRunnableObsolete;

        $l0 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long counter>;

        $l1 = 1L + $l0;

        r0.<kotlinx.coroutines.test.TestCoroutineContext: long counter> = $l1;

        specialinvoke $r3.<kotlinx.coroutines.test.TimedRunnableObsolete: void <init>(java.lang.Runnable,long,long,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $l0, 0L, 4, null);

        $r4 = (kotlinx.coroutines.internal.ThreadSafeHeapNode) $r3;

        virtualinvoke $r2.<kotlinx.coroutines.internal.ThreadSafeHeap: void addLast(kotlinx.coroutines.internal.ThreadSafeHeapNode)>($r4);

        return;
    }

    public static long now$default(kotlinx.coroutines.test.TestCoroutineContext, java.util.concurrent.TimeUnit, int, java.lang.Object)
    {
        java.lang.Object $r0;
        long $l0;
        kotlinx.coroutines.test.TestCoroutineContext $r1;
        java.util.concurrent.TimeUnit $r2;
        int $i1;

        $r1 := @parameter0: kotlinx.coroutines.test.TestCoroutineContext;

        $r2 := @parameter1: java.util.concurrent.TimeUnit;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label1:
        $l0 = virtualinvoke $r1.<kotlinx.coroutines.test.TestCoroutineContext: long now(java.util.concurrent.TimeUnit)>($r2);

        return $l0;
    }

    private final kotlinx.coroutines.test.TimedRunnableObsolete postDelayed(java.lang.Runnable, long)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        long $l0, $l1, $l2;
        kotlinx.coroutines.test.TimedRunnableObsolete $r1;
        java.lang.Runnable $r2;
        java.util.concurrent.TimeUnit $r3;
        kotlinx.coroutines.internal.ThreadSafeHeap $r4;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r5;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r2 := @parameter0: java.lang.Runnable;

        $l1 := @parameter1: long;

        $r1 = new kotlinx.coroutines.test.TimedRunnableObsolete;

        $l0 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long counter>;

        $l2 = 1L + $l0;

        r0.<kotlinx.coroutines.test.TestCoroutineContext: long counter> = $l2;

        $l2 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long time>;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

        $l1 = $l2 + $l1;

        specialinvoke $r1.<kotlinx.coroutines.test.TimedRunnableObsolete: void <init>(java.lang.Runnable,long,long)>($r2, $l0, $l1);

        $r4 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        $r5 = (kotlinx.coroutines.internal.ThreadSafeHeapNode) $r1;

        virtualinvoke $r4.<kotlinx.coroutines.internal.ThreadSafeHeap: void addLast(kotlinx.coroutines.internal.ThreadSafeHeapNode)>($r5);

        return $r1;
    }

    private final long processNextEvent()
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        kotlinx.coroutines.internal.ThreadSafeHeap $r1;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r2;
        kotlinx.coroutines.test.TimedRunnableObsolete $r3;
        long $l0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode peek()>();

        $r3 = (kotlinx.coroutines.test.TimedRunnableObsolete) $r2;

        if $r3 == null goto label1;

        $l0 = $r3.<kotlinx.coroutines.test.TimedRunnableObsolete: long time>;

        specialinvoke r0.<kotlinx.coroutines.test.TestCoroutineContext: void triggerActions(long)>($l0);

     label1:
        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return 9223372036854775807L;

     label2:
        return 0L;
    }

    private final void triggerActions(long)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        long $l0, $l1;
        kotlinx.coroutines.internal.ThreadSafeHeap $r1;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r2, $r3;
        kotlinx.coroutines.test.TimedRunnableObsolete $r4;
        byte $b2;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 := @parameter0: long;

     label01:
        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        entermonitor $r1;

     label02:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode firstImpl()>();

     label03:
        $r3 = null;

        if $r2 != null goto label04;

        exitmonitor $r1;

        goto label08;

     label04:
        $r4 = (kotlinx.coroutines.test.TimedRunnableObsolete) $r2;

        $l1 = $r4.<kotlinx.coroutines.test.TimedRunnableObsolete: long time>;

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label07;

        $r3 = virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeAtImpl(int)>(0);

        goto label07;

     label07:
        exitmonitor $r1;

     label08:
        $r4 = (kotlinx.coroutines.test.TimedRunnableObsolete) $r3;

        if $r4 != null goto label09;

        return;

     label09:
        $l1 = $r4.<kotlinx.coroutines.test.TimedRunnableObsolete: long time>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label10;

        $l1 = $r4.<kotlinx.coroutines.test.TimedRunnableObsolete: long time>;

        r0.<kotlinx.coroutines.test.TestCoroutineContext: long time> = $l1;

     label10:
        virtualinvoke $r4.<kotlinx.coroutines.test.TimedRunnableObsolete: void run()>();

        goto label01;

     label11:
        $r5 := @caughtexception;

        exitmonitor $r1;

        throw $r5;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label07 with label11;
    }

    public final long advanceTimeBy(long, java.util.concurrent.TimeUnit)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.util.concurrent.TimeUnit $r1, $r2;
        long $l0, $l1;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long time>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $l0 = $l0 + $l1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke r0.<kotlinx.coroutines.test.TestCoroutineContext: void advanceTimeTo(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        $l0 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long time>;

        $l0 = $l0 - $l1;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l0;
    }

    public final void advanceTimeTo(long, java.util.concurrent.TimeUnit)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        long $l0, $l1;
        java.util.concurrent.TimeUnit $r1;
        byte $b2;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        specialinvoke r0.<kotlinx.coroutines.test.TestCoroutineContext: void triggerActions(long)>($l1);

        $l0 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long time>;

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label1;

        r0.<kotlinx.coroutines.test.TestCoroutineContext: long time> = $l1;

     label1:
        return;
    }

    public final void assertAllUnhandledExceptions(java.lang.String, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.lang.String $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.util.List $r3;
        java.lang.Iterable $r4;
        boolean $z0, $z1;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.lang.Boolean $r8;
        java.lang.AssertionError $r9;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        $r4 = (java.lang.Iterable) $r3;

        $z0 = $r4 instanceof java.util.Collection;

        $z1 = 1;

        if $z0 == 0 goto label1;

        $r5 = (java.util.Collection) $r4;

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $r6 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $z1 = 0;

     label3:
        if $z1 == 0 goto label4;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;

     label4:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

        throw $r9;
    }

    public final void assertAnyUnhandledException(java.lang.String, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.lang.String $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.util.List $r3;
        java.lang.Iterable $r4;
        boolean $z0, $z1;
        java.util.Collection $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        java.lang.Boolean $r8;
        java.lang.AssertionError $r9;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        $r4 = (java.lang.Iterable) $r3;

        $z0 = $r4 instanceof java.util.Collection;

        $z1 = 0;

        if $z0 == 0 goto label1;

        $r5 = (java.util.Collection) $r4;

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $r6 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $z1 = 1;

     label3:
        if $z1 == 0 goto label4;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;

     label4:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

        throw $r9;
    }

    public final void assertExceptions(java.lang.String, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.util.List $r1;
        java.lang.String $r2;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: kotlin.jvm.functions.Function1;

        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r6;
    }

    public final void assertUnhandledException(java.lang.String, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.lang.String $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

        throw $r6;
    }

    public final void cancelAllActions()
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        boolean $z0;
        kotlinx.coroutines.internal.ThreadSafeHeap $r1;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.internal.ThreadSafeHeap queue>;

        virtualinvoke $r1.<kotlinx.coroutines.internal.ThreadSafeHeap: void clear()>();

     label1:
        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.test.TestCoroutineContext$Dispatcher $r3;
        kotlinx.coroutines.CoroutineExceptionHandler $r4;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.test.TestCoroutineContext$Dispatcher ctxDispatcher>;

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.CoroutineExceptionHandler ctxHandler>;

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlin.coroutines.ContinuationInterceptor$Key $r2;
        kotlinx.coroutines.test.TestCoroutineContext$Dispatcher $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.CoroutineExceptionHandler$Key $r5;
        kotlinx.coroutines.CoroutineExceptionHandler $r6;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        if $r1 != $r2 goto label1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.test.TestCoroutineContext$Dispatcher ctxDispatcher>;

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r3;

        return $r4;

     label1:
        $r5 = <kotlinx.coroutines.CoroutineExceptionHandler: kotlinx.coroutines.CoroutineExceptionHandler$Key Key>;

        if $r1 != $r5 goto label2;

        $r6 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.CoroutineExceptionHandler ctxHandler>;

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r6;

        return $r4;

     label2:
        return null;
    }

    public final java.util.List getExceptions()
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.util.List r1;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.util.List uncaughtExceptions>;

        return r1;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlin.coroutines.ContinuationInterceptor$Key $r2;
        kotlinx.coroutines.CoroutineExceptionHandler $r3;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.CoroutineExceptionHandler$Key $r5;
        kotlinx.coroutines.test.TestCoroutineContext$Dispatcher $r6;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        if $r1 != $r2 goto label1;

        $r3 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.CoroutineExceptionHandler ctxHandler>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r3;

        return $r4;

     label1:
        $r5 = <kotlinx.coroutines.CoroutineExceptionHandler: kotlinx.coroutines.CoroutineExceptionHandler$Key Key>;

        if $r1 != $r5 goto label2;

        $r6 = r0.<kotlinx.coroutines.test.TestCoroutineContext: kotlinx.coroutines.test.TestCoroutineContext$Dispatcher ctxDispatcher>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r6;

        return $r4;

     label2:
        $r4 = (kotlin.coroutines.CoroutineContext) r0;

        return $r4;
    }

    public final long now(java.util.concurrent.TimeUnit)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.util.concurrent.TimeUnit $r1, $r2;
        long $l0;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: java.util.concurrent.TimeUnit;

        $l0 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long time>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l0;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>(r0, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $r1 = r0.<kotlinx.coroutines.test.TestCoroutineContext: java.lang.String name>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        $r1 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("TestCoroutineContext@", $r1);

     label1:
        return $r1;
    }

    public final void triggerActions()
    {
        kotlinx.coroutines.test.TestCoroutineContext r0;
        long $l0;

        r0 := @this: kotlinx.coroutines.test.TestCoroutineContext;

        $l0 = r0.<kotlinx.coroutines.test.TestCoroutineContext: long time>;

        specialinvoke r0.<kotlinx.coroutines.test.TestCoroutineContext: void triggerActions(long)>($l0);

        return;
    }
}
