class kotlinx.coroutines.channels.ActorCoroutine extends kotlinx.coroutines.channels.ChannelCoroutine implements kotlinx.coroutines.channels.ActorScope
{

    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.Channel, boolean)
    {
        kotlinx.coroutines.channels.ActorCoroutine r0;
        boolean $z0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.channels.Channel $r3;
        kotlinx.coroutines.Job$Key $r4;
        kotlin.coroutines.CoroutineContext$Key $r5;
        kotlinx.coroutines.Job $r6;

        r0 := @this: kotlinx.coroutines.channels.ActorCoroutine;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter1: kotlinx.coroutines.channels.Channel;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<kotlinx.coroutines.channels.ChannelCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlinx.coroutines.channels.Channel,boolean,boolean)>($r2, $r3, 0, $z0);

        $r4 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r5 = (kotlin.coroutines.CoroutineContext$Key) $r4;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r5);

        $r6 = (kotlinx.coroutines.Job) $r1;

        virtualinvoke r0.<kotlinx.coroutines.channels.ActorCoroutine: void initParentJob(kotlinx.coroutines.Job)>($r6);

        return;
    }

    protected boolean handleJobException(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ActorCoroutine r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.channels.ActorCoroutine;

        $r2 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ActorCoroutine: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r1, $r2);

        return 1;
    }

    protected void onCancelling(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ActorCoroutine r0;
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.Channel $r2;
        java.util.concurrent.CancellationException $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: kotlinx.coroutines.channels.ActorCoroutine;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.ActorCoroutine: kotlinx.coroutines.channels.Channel get_channel()>();

        $r3 = null;

        if $r1 != null goto label1;

        goto label3;

     label1:
        $z0 = $r1 instanceof java.util.concurrent.CancellationException;

        if $z0 == 0 goto label2;

        $r3 = (java.util.concurrent.CancellationException) $r1;

     label2:
        if $r3 != null goto label3;

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>($r4, " was cancelled");

        $r3 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>($r4, $r1);

     label3:
        interfaceinvoke $r2.<kotlinx.coroutines.channels.Channel: void cancel(java.util.concurrent.CancellationException)>($r3);

        return;
    }
}
