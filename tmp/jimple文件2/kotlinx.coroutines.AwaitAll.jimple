final class kotlinx.coroutines.AwaitAll extends java.lang.Object
{
    static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater notCompletedCount$FU;
    private final kotlinx.coroutines.Deferred[] deferreds;
    volatile int notCompletedCount;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/AwaitAll;", "notCompletedCount");

        <kotlinx.coroutines.AwaitAll: java.util.concurrent.atomic.AtomicIntegerFieldUpdater notCompletedCount$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.Deferred[])
    {
        kotlinx.coroutines.AwaitAll r0;
        kotlinx.coroutines.Deferred[] $r1;
        int $i0;

        r0 := @this: kotlinx.coroutines.AwaitAll;

        $r1 := @parameter0: kotlinx.coroutines.Deferred[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.AwaitAll: kotlinx.coroutines.Deferred[] deferreds> = $r1;

        $i0 = lengthof $r1;

        r0.<kotlinx.coroutines.AwaitAll: int notCompletedCount> = $i0;

        return;
    }

    public static final kotlinx.coroutines.Deferred[] access$getDeferreds$p(kotlinx.coroutines.AwaitAll)
    {
        kotlinx.coroutines.AwaitAll $r0;
        kotlinx.coroutines.Deferred[] r1;

        $r0 := @parameter0: kotlinx.coroutines.AwaitAll;

        r1 = $r0.<kotlinx.coroutines.AwaitAll: kotlinx.coroutines.Deferred[] deferreds>;

        return r1;
    }

    public final java.lang.Object await(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.AwaitAll r0;
        kotlin.coroutines.Continuation $r1, $r5;
        kotlinx.coroutines.AwaitAll$AwaitAllNode[] $r2;
        kotlinx.coroutines.AwaitAll$AwaitAllNode $r3;
        kotlinx.coroutines.CancellableContinuationImpl $r4;
        kotlinx.coroutines.CancellableContinuation $r6;
        kotlinx.coroutines.Deferred[] $r7;
        int $i0, $i1, $i2;
        kotlinx.coroutines.Deferred $r8;
        kotlinx.coroutines.CompletionHandlerBase $r9;
        kotlin.jvm.functions.Function1 $r10;
        kotlinx.coroutines.DisposableHandle $r11;
        kotlin.Unit $r12;
        kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel $r13;
        boolean $z0;
        kotlinx.coroutines.CancelHandlerBase $r14;
        java.lang.Object $r15, $r16;

        r0 := @this: kotlinx.coroutines.AwaitAll;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r4 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        specialinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r5, 1);

        virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        $r6 = (kotlinx.coroutines.CancellableContinuation) $r4;

        $r7 = staticinvoke <kotlinx.coroutines.AwaitAll: kotlinx.coroutines.Deferred[] access$getDeferreds$p(kotlinx.coroutines.AwaitAll)>(r0);

        $i0 = lengthof $r7;

        $r2 = newarray (kotlinx.coroutines.AwaitAll$AwaitAllNode)[$i0];

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r7 = staticinvoke <kotlinx.coroutines.AwaitAll: kotlinx.coroutines.Deferred[] access$getDeferreds$p(kotlinx.coroutines.AwaitAll)>(r0);

        $r8 = $r7[$i2];

        interfaceinvoke $r8.<kotlinx.coroutines.Deferred: boolean start()>();

        $r3 = new kotlinx.coroutines.AwaitAll$AwaitAllNode;

        specialinvoke $r3.<kotlinx.coroutines.AwaitAll$AwaitAllNode: void <init>(kotlinx.coroutines.AwaitAll,kotlinx.coroutines.CancellableContinuation)>(r0, $r6);

        $r9 = (kotlinx.coroutines.CompletionHandlerBase) $r3;

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        $r11 = interfaceinvoke $r8.<kotlinx.coroutines.Deferred: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r10);

        virtualinvoke $r3.<kotlinx.coroutines.AwaitAll$AwaitAllNode: void setHandle(kotlinx.coroutines.DisposableHandle)>($r11);

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2[$i2] = $r3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r13 = new kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel;

        specialinvoke $r13.<kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel: void <init>(kotlinx.coroutines.AwaitAll,kotlinx.coroutines.AwaitAll$AwaitAllNode[])>(r0, $r2);

     label3:
        if $i1 >= $i0 goto label4;

        $r3 = $r2[$i1];

        virtualinvoke $r3.<kotlinx.coroutines.AwaitAll$AwaitAllNode: void setDisposer(kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel)>($r13);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $z0 = interfaceinvoke $r6.<kotlinx.coroutines.CancellableContinuation: boolean isCompleted()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r13.<kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel: void disposeAll()>();

        goto label6;

     label5:
        $r14 = (kotlinx.coroutines.CancelHandlerBase) $r13;

        $r10 = (kotlin.jvm.functions.Function1) $r14;

        interfaceinvoke $r6.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r10);

     label6:
        $r15 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r16 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r15 != $r16 goto label7;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label7:
        return $r15;
    }
}
