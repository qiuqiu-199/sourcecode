final class kotlinx.coroutines.flow.SharedFlowImpl extends kotlinx.coroutines.flow.internal.AbstractSharedFlow implements kotlinx.coroutines.flow.MutableSharedFlow, kotlinx.coroutines.flow.CancellableFlow, kotlinx.coroutines.flow.internal.FusibleFlow
{
    private java.lang.Object[] buffer;
    private final int bufferCapacity;
    private int bufferSize;
    private long minCollectorIndex;
    private final kotlinx.coroutines.channels.BufferOverflow onBufferOverflow;
    private int queueSize;
    private final int replay;
    private long replayIndex;

    public void <init>(int, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0, $i1;
        kotlinx.coroutines.channels.BufferOverflow $r1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: void <init>()>();

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int replay> = $i0;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity> = $i1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow> = $r1;

        return;
    }

    public static final java.lang.Object access$awaitValue(kotlinx.coroutines.flow.SharedFlowImpl, kotlinx.coroutines.flow.SharedFlowSlot, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlowSlot $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.flow.SharedFlowImpl $r3;

        $r3 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r0 := @parameter1: kotlinx.coroutines.flow.SharedFlowSlot;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r3.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object awaitValue(kotlinx.coroutines.flow.SharedFlowSlot,kotlin.coroutines.Continuation)>($r0, $r1);

        return $r2;
    }

    public static final void access$cancelEmitter(kotlinx.coroutines.flow.SharedFlowImpl, kotlinx.coroutines.flow.SharedFlowImpl$Emitter)
    {
        kotlinx.coroutines.flow.SharedFlowImpl $r0;
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter1: kotlinx.coroutines.flow.SharedFlowImpl$Emitter;

        specialinvoke $r0.<kotlinx.coroutines.flow.SharedFlowImpl: void cancelEmitter(kotlinx.coroutines.flow.SharedFlowImpl$Emitter)>($r1);

        return;
    }

    public static final java.lang.Object access$emitSuspend(kotlinx.coroutines.flow.SharedFlowImpl, java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Object $r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.SharedFlowImpl $r2;

        $r2 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r0 = specialinvoke $r2.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object emitSuspend(java.lang.Object,kotlin.coroutines.Continuation)>($r0, $r1);

        return $r0;
    }

    public static final void access$enqueueLocked(kotlinx.coroutines.flow.SharedFlowImpl, java.lang.Object)
    {
        kotlinx.coroutines.flow.SharedFlowImpl $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<kotlinx.coroutines.flow.SharedFlowImpl: void enqueueLocked(java.lang.Object)>($r1);

        return;
    }

    public static final kotlin.coroutines.Continuation[] access$findSlotsToResumeLocked(kotlinx.coroutines.flow.SharedFlowImpl, kotlin.coroutines.Continuation[])
    {
        kotlin.coroutines.Continuation[] $r0;
        kotlinx.coroutines.flow.SharedFlowImpl $r1;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r0 := @parameter1: kotlin.coroutines.Continuation[];

        $r0 = specialinvoke $r1.<kotlinx.coroutines.flow.SharedFlowImpl: kotlin.coroutines.Continuation[] findSlotsToResumeLocked(kotlin.coroutines.Continuation[])>($r0);

        return $r0;
    }

    public static final int access$getBufferCapacity$p(kotlinx.coroutines.flow.SharedFlowImpl)
    {
        kotlinx.coroutines.flow.SharedFlowImpl $r0;
        int i0;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        i0 = $r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        return i0;
    }

    public static final long access$getHead(kotlinx.coroutines.flow.SharedFlowImpl)
    {
        kotlinx.coroutines.flow.SharedFlowImpl $r0;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 = specialinvoke $r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        return $l0;
    }

    public static final int access$getQueueSize$p(kotlinx.coroutines.flow.SharedFlowImpl)
    {
        kotlinx.coroutines.flow.SharedFlowImpl $r0;
        int i0;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        i0 = $r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        return i0;
    }

    public static final int access$getTotalSize(kotlinx.coroutines.flow.SharedFlowImpl)
    {
        int $i0;
        kotlinx.coroutines.flow.SharedFlowImpl $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $i0 = specialinvoke $r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getTotalSize()>();

        return $i0;
    }

    public static final void access$setQueueSize$p(kotlinx.coroutines.flow.SharedFlowImpl, int)
    {
        kotlinx.coroutines.flow.SharedFlowImpl $r0;
        int $i0;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $i0 := @parameter1: int;

        $r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize> = $i0;

        return;
    }

    public static final boolean access$tryEmitLocked(kotlinx.coroutines.flow.SharedFlowImpl, java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;
        kotlinx.coroutines.flow.SharedFlowImpl $r1;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r0 := @parameter1: java.lang.Object;

        $z0 = specialinvoke $r1.<kotlinx.coroutines.flow.SharedFlowImpl: boolean tryEmitLocked(java.lang.Object)>($r0);

        return $z0;
    }

    public static final long access$tryPeekLocked(kotlinx.coroutines.flow.SharedFlowImpl, kotlinx.coroutines.flow.SharedFlowSlot)
    {
        kotlinx.coroutines.flow.SharedFlowSlot $r0;
        long $l0;
        kotlinx.coroutines.flow.SharedFlowImpl $r1;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl;

        $r0 := @parameter1: kotlinx.coroutines.flow.SharedFlowSlot;

        $l0 = specialinvoke $r1.<kotlinx.coroutines.flow.SharedFlowImpl: long tryPeekLocked(kotlinx.coroutines.flow.SharedFlowSlot)>($r0);

        return $l0;
    }

    private final java.lang.Object awaitValue(kotlinx.coroutines.flow.SharedFlowSlot, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.flow.SharedFlowSlot $r1;
        kotlin.coroutines.Continuation $r2, $r4;
        kotlinx.coroutines.CancellableContinuationImpl $r3;
        kotlinx.coroutines.CancellableContinuation $r5;
        long $l0;
        byte $b1;
        kotlin.Unit $r6;
        kotlin.Result$Companion $r7;
        java.lang.Object $r8, $r9;
        java.lang.Throwable $r10;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowSlot;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        specialinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r4, 1);

        virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        $r5 = (kotlinx.coroutines.CancellableContinuation) $r3;

        entermonitor r0;

     label1:
        $l0 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: long access$tryPeekLocked(kotlinx.coroutines.flow.SharedFlowImpl,kotlinx.coroutines.flow.SharedFlowSlot)>(r0, $r1);

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r1.<kotlinx.coroutines.flow.SharedFlowSlot: kotlin.coroutines.Continuation cont> = $r4;

        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r1.<kotlinx.coroutines.flow.SharedFlowSlot: kotlin.coroutines.Continuation cont> = $r4;

        goto label3;

     label2:
        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

     label3:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r0;

        $r8 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label5;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label5:
        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label6;

        return $r8;

     label6:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label7:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label1 to label4 with label7;
    }

    private final void cancelEmitter(kotlinx.coroutines.flow.SharedFlowImpl$Emitter)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter $r1;
        long $l0, $l1;
        byte $b2;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        kotlin.Unit $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowImpl$Emitter;

        entermonitor r0;

     label1:
        $l0 = $r1.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: long index>;

        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

     label2:
        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

        exitmonitor r0;

        return;

     label3:
        $r2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $l0 = $r1.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: long index>;

        $r3 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r2, $l0);

     label4:
        if $r3 == $r1 goto label5;

        exitmonitor r0;

        return;

     label5:
        $l0 = $r1.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: long index>;

        $r4 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r2, $l0, $r4);

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void cleanupTailLocked()>();

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label6:
        exitmonitor r0;

        return;

     label7:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private final void cleanupTailLocked()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.internal.Symbol $r1;
        int $i0;
        java.lang.Object[] $r2;
        long $l1, $l2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $i0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        if $i0 != 0 goto label1;

        $i0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        if $i0 > 1 goto label1;

        return;

     label1:
        $r2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

     label2:
        $i0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        if $i0 <= 0 goto label3;

        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getTotalSize()>();

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        $l1 = $l1 - 1L;

        $r3 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r2, $l1);

        $r1 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        if $r3 != $r1 goto label3;

        $i0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        $i0 = $i0 + -1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize> = $i0;

        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getTotalSize()>();

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r2, $l1, null);

        goto label2;

     label3:
        return;
    }

    private final void correctCollectorIndexesOnDropOldest(long)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l3;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow $r1;
        int $i1, $i2;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r2;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r3;
        kotlinx.coroutines.flow.SharedFlowSlot $r4;
        byte $b4;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 := @parameter0: long;

        $r1 = (kotlinx.coroutines.flow.internal.AbstractSharedFlow) r0;

        $i1 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: int access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>($r1);

        if $i1 != 0 goto label1;

        goto label5;

     label1:
        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>($r1);

        if $r2 != null goto label2;

        goto label5;

     label2:
        $i1 = lengthof $r2;

        $i2 = 0;

     label3:
        if $i2 >= $i1 goto label5;

        $r3 = $r2[$i2];

        if $r3 == null goto label4;

        $r4 = (kotlinx.coroutines.flow.SharedFlowSlot) $r3;

        $l3 = $r4.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label4;

        $l3 = $r4.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

        $b4 = $l3 cmp $l0;

        if $b4 >= 0 goto label4;

        $r4.<kotlinx.coroutines.flow.SharedFlowSlot: long index> = $l0;

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex> = $l0;

        return;
    }

    private final void dropOldestLocked()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        java.lang.Object[] $r1;
        long $l0, $l2;
        int $i1;
        byte $b3;
        boolean $z0;
        java.lang.AssertionError $r2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $l0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r1, $l0, null);

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $i1 = $i1 + -1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize> = $i1;

        $l0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $l0 = $l0 + 1L;

        $l2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $b3 = $l2 cmp $l0;

        if $b3 >= 0 goto label1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex> = $l0;

     label1:
        $l2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $b3 = $l2 cmp $l0;

        if $b3 >= 0 goto label2;

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void correctCollectorIndexesOnDropOldest(long)>($l0);

     label2:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label6;

        $l2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $b3 = $l2 cmp $l0;

        if $b3 != 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        return;

     label5:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    private final java.lang.Object emitSuspend(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter $r1;
        java.lang.Object $r2, $r11;
        kotlin.coroutines.Continuation $r3, $r5;
        kotlinx.coroutines.CancellableContinuationImpl $r4;
        kotlinx.coroutines.CancellableContinuation $r6;
        kotlin.coroutines.Continuation[] $r7;
        boolean $z0;
        kotlin.Unit $r8;
        kotlin.Result$Companion $r9;
        long $l0, $l2;
        int $i1, $i3;
        kotlinx.coroutines.DisposableHandle $r10;
        java.lang.Throwable $r12;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r3);

        specialinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r5, 1);

        virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        $r6 = (kotlinx.coroutines.CancellableContinuation) $r4;

        $r7 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        entermonitor r0;

     label01:
        $z0 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: boolean access$tryEmitLocked(kotlinx.coroutines.flow.SharedFlowImpl,java.lang.Object)>(r0, $r2);

        if $z0 == 0 goto label02;

        $r5 = (kotlin.coroutines.Continuation) $r6;

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r9 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        $r7 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: kotlin.coroutines.Continuation[] access$findSlotsToResumeLocked(kotlinx.coroutines.flow.SharedFlowImpl,kotlin.coroutines.Continuation[])>(r0, $r7);

        $r1 = null;

        goto label03;

     label02:
        $r1 = new kotlinx.coroutines.flow.SharedFlowImpl$Emitter;

        $l0 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: long access$getHead(kotlinx.coroutines.flow.SharedFlowImpl)>(r0);

        $i1 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: int access$getTotalSize(kotlinx.coroutines.flow.SharedFlowImpl)>(r0);

        $l2 = (long) $i1;

        $l0 = $l2 + $l0;

        $r5 = (kotlin.coroutines.Continuation) $r6;

        specialinvoke $r1.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: void <init>(kotlinx.coroutines.flow.SharedFlowImpl,long,java.lang.Object,kotlin.coroutines.Continuation)>(r0, $l0, $r2, $r5);

        staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: void access$enqueueLocked(kotlinx.coroutines.flow.SharedFlowImpl,java.lang.Object)>(r0, $r1);

        $i1 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: int access$getQueueSize$p(kotlinx.coroutines.flow.SharedFlowImpl)>(r0);

        $i1 = $i1 + 1;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: void access$setQueueSize$p(kotlinx.coroutines.flow.SharedFlowImpl,int)>(r0, $i1);

        $i1 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: int access$getBufferCapacity$p(kotlinx.coroutines.flow.SharedFlowImpl)>(r0);

        if $i1 != 0 goto label03;

        $r7 = staticinvoke <kotlinx.coroutines.flow.SharedFlowImpl: kotlin.coroutines.Continuation[] access$findSlotsToResumeLocked(kotlinx.coroutines.flow.SharedFlowImpl,kotlin.coroutines.Continuation[])>(r0, $r7);

     label03:
        exitmonitor r0;

        if $r1 != null goto label04;

        goto label05;

     label04:
        $r10 = (kotlinx.coroutines.DisposableHandle) $r1;

        staticinvoke <kotlinx.coroutines.CancellableContinuationKt: void disposeOnCancellation(kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.DisposableHandle)>($r6, $r10);

     label05:
        $i1 = 0;

        $i3 = lengthof $r7;

     label06:
        if $i1 >= $i3 goto label08;

        $r5 = $r7[$i1];

        $i1 = $i1 + 1;

        if $r5 != null goto label07;

        goto label06;

     label07:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r9 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        goto label06;

     label08:
        $r2 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r11 goto label09;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r3);

     label09:
        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r11 goto label10;

        return $r2;

     label10:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label11:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label01 to label03 with label11;
    }

    private final void enqueueLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        java.lang.Object $r1;
        long $l0, $l3;
        int $i1, $i2;
        java.lang.Object[] $r2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $i1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getTotalSize()>();

        $r2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        if $r2 != null goto label1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] growBuffer(java.lang.Object[],int,int)>(null, 0, 2);

        goto label2;

     label1:
        $i2 = lengthof $r2;

        if $i1 < $i2 goto label2;

        $i2 = lengthof $r2;

        $i2 = $i2 * 2;

        $r2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] growBuffer(java.lang.Object[],int,int)>($r2, $i1, $i2);

     label2:
        $l3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $l0 = (long) $i1;

        $l0 = $l3 + $l0;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r2, $l0, $r1);

        return;
    }

    private final kotlin.coroutines.Continuation[] findSlotsToResumeLocked(kotlin.coroutines.Continuation[])
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object[] $r2, $r7;
        int $i0, $i1, $i2, $i5;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow $r3;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r4;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r5;
        kotlinx.coroutines.flow.SharedFlowSlot $r6;
        long $l3;
        byte $b4;
        kotlin.coroutines.Continuation[] $r8;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r2 := @parameter0: kotlin.coroutines.Continuation[];

        $i0 = lengthof $r2;

        $r3 = (kotlinx.coroutines.flow.internal.AbstractSharedFlow) r0;

        $i1 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: int access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>($r3);

        if $i1 != 0 goto label1;

        goto label8;

     label1:
        $r4 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>($r3);

        if $r4 != null goto label2;

        goto label8;

     label2:
        $i1 = lengthof $r4;

        $i2 = 0;

     label3:
        if $i2 >= $i1 goto label8;

        $r5 = $r4[$i2];

        if $r5 == null goto label7;

        $r6 = (kotlinx.coroutines.flow.SharedFlowSlot) $r5;

        $r1 = $r6.<kotlinx.coroutines.flow.SharedFlowSlot: kotlin.coroutines.Continuation cont>;

        if $r1 != null goto label4;

        goto label7;

     label4:
        $l3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long tryPeekLocked(kotlinx.coroutines.flow.SharedFlowSlot)>($r6);

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label5;

        goto label7;

     label5:
        $i5 = lengthof $r2;

        if $i0 < $i5 goto label6;

        $i5 = lengthof $r2;

        $i5 = $i5 * 2;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i5);

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5);

        $r2 = $r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "java.util.Arrays.copyOf(this, newSize)");

     label6:
        $r8 = (kotlin.coroutines.Continuation[]) $r2;

        $r8[$i0] = $r1;

        $r6.<kotlinx.coroutines.flow.SharedFlowSlot: kotlin.coroutines.Continuation cont> = null;

        $i0 = $i0 + 1;

     label7:
        $i2 = $i2 + 1;

        goto label3;

     label8:
        $r8 = (kotlin.coroutines.Continuation[]) $r2;

        return $r8;
    }

    private final long getBufferEndIndex()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        return $l0;
    }

    private final long getHead()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        return $l0;
    }

    private final java.lang.Object getPeekedValueLockedAt(long)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        long $l0;
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter $r3;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r1, $l0);

        $z0 = $r2 instanceof kotlinx.coroutines.flow.SharedFlowImpl$Emitter;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.flow.SharedFlowImpl$Emitter) $r2;

        $r2 = $r3.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: java.lang.Object value>;

     label1:
        return $r2;
    }

    private final long getQueueEndIndex()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        return $l0;
    }

    private final int getReplaySize()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        $l2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $l0 = $l0 - $l2;

        $i1 = (int) $l0;

        return $i1;
    }

    private final int getTotalSize()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0, $i1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $i0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        $i0 = $i1 + $i0;

        return $i0;
    }

    private final java.lang.Object[] growBuffer(java.lang.Object[], int, int)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0, $i1, $i2;
        java.lang.Object[] $r1, $r2;
        boolean $z0;
        long $l3, $l4;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: java.lang.Object[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 = 0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label7;

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer> = $r2;

        if $r1 != null goto label3;

        return $r2;

     label3:
        $l3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        if $i1 <= 0 goto label6;

     label4:
        $i0 = $i2 + 1;

        $l4 = (long) $i2;

        $l4 = $l4 + $l3;

        $r3 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r1, $l4);

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r2, $l4, $r3);

        if $i0 < $i1 goto label5;

        return $r2;

     label5:
        $i2 = $i0;

        goto label4;

     label6:
        return $r2;

     label7:
        $r4 = new java.lang.IllegalStateException;

        $r5 = "Buffer size overflow";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;
    }

    private final boolean tryEmitLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l1, $l5, $l6;
        java.lang.Object $r1;
        int $i2, $i3;
        boolean $z0;
        byte $b4;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        int[] $r3;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $i2 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getNCollectors()>();

        if $i2 != 0 goto label1;

        $z0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: boolean tryEmitNoCollectorsLocked(java.lang.Object)>($r1);

        return $z0;

     label1:
        $i2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $i3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        if $i2 < $i3 goto label4;

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $l1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $b4 = $l0 cmp $l1;

        if $b4 > 0 goto label4;

        $r2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r3 = <kotlinx.coroutines.flow.SharedFlowImpl$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i2 = virtualinvoke $r2.<kotlinx.coroutines.channels.BufferOverflow: int ordinal()>();

        $i2 = $r3[$i2];

        if $i2 == 1 goto label3;

        if $i2 == 2 goto label2;

        goto label4;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void enqueueLocked(java.lang.Object)>($r1);

        $i2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $i2 = $i2 + 1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize> = $i2;

        $i3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        if $i2 <= $i3 goto label5;

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void dropOldestLocked()>();

     label5:
        $i2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getReplaySize()>();

        $i3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int replay>;

        if $i2 <= $i3 goto label6;

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $l0 = $l0 + 1L;

        $l1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $l5 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getBufferEndIndex()>();

        $l6 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getQueueEndIndex()>();

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void updateBufferLocked(long,long,long,long)>($l0, $l1, $l5, $l6);

     label6:
        return 1;
    }

    private final boolean tryEmitNoCollectorsLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l3;
        java.lang.Object $r1;
        boolean $z0;
        int $i1, $i2;
        java.lang.AssertionError $r2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getNCollectors()>();

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int replay>;

        if $i1 != 0 goto label5;

        return 1;

     label5:
        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void enqueueLocked(java.lang.Object)>($r1);

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $i1 = $i1 + 1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize> = $i1;

        $i2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int replay>;

        if $i1 <= $i2 goto label6;

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void dropOldestLocked()>();

     label6:
        $l3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $l0 = (long) $i1;

        $l0 = $l3 + $l0;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex> = $l0;

        return 1;
    }

    private final long tryPeekLocked(kotlinx.coroutines.flow.SharedFlowSlot)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l1;
        kotlinx.coroutines.flow.SharedFlowSlot $r1;
        byte $b2;
        int $i3;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowSlot;

        $l0 = $r1.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getBufferEndIndex()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        return $l0;

     label1:
        $i3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        if $i3 <= 0 goto label2;

        return -1L;

     label2:
        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label3;

        return -1L;

     label3:
        $i3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        if $i3 != 0 goto label4;

        return -1L;

     label4:
        return $l0;
    }

    private final java.lang.Object tryTakeValue(kotlinx.coroutines.flow.SharedFlowSlot)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0, $i4;
        kotlinx.coroutines.flow.SharedFlowSlot $r1;
        kotlin.coroutines.Continuation[] $r2;
        long $l1, $l3;
        byte $b2;
        java.lang.Object $r3, $r7;
        kotlin.coroutines.Continuation $r4;
        kotlin.Unit $r5;
        kotlin.Result$Companion $r6;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlowSlot;

        $r2 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        entermonitor r0;

     label1:
        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long tryPeekLocked(kotlinx.coroutines.flow.SharedFlowSlot)>($r1);

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label2;

        $r3 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        goto label3;

     label2:
        $l3 = $r1.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

        $r3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object getPeekedValueLockedAt(long)>($l1);

        $l1 = $l1 + 1L;

        $r1.<kotlinx.coroutines.flow.SharedFlowSlot: long index> = $l1;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlin.coroutines.Continuation[] updateCollectorIndexLocked$kotlinx_coroutines_core(long)>($l3);

     label3:
        exitmonitor r0;

        $i4 = 0;

        $i0 = lengthof $r2;

     label4:
        if $i4 >= $i0 goto label6;

        $r4 = $r2[$i4];

        $i4 = $i4 + 1;

        if $r4 != null goto label5;

        goto label4;

     label5:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r7 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r7);

        goto label4;

     label6:
        return $r3;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label7;
    }

    private final void updateBufferLocked(long, long, long, long)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l7;
        boolean $z0, $z1;
        byte $b6;
        java.lang.AssertionError $r1;
        java.lang.Object[] $r2;
        int $i8;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $l3 := @parameter3: long;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l0);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label04;

        $l5 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $b6 = $l4 cmp $l5;

        if $b6 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label04:
        $l7 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $l5 = $l7;

        $b6 = $l7 cmp $l4;

        if $b6 >= 0 goto label07;

     label05:
        $l7 = 1L + $l5;

        $r2 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r2, $l5, null);

        $b6 = $l7 cmp $l4;

        if $b6 < 0 goto label06;

        goto label07;

     label06:
        $l5 = $l7;

        goto label05;

     label07:
        r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex> = $l0;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex> = $l1;

        $l0 = $l2 - $l4;

        $i8 = (int) $l0;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize> = $i8;

        $l0 = $l3 - $l2;

        $i8 = (int) $l0;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize> = $i8;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label11;

        $i8 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        if $i8 < 0 goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        if $z0 == 0 goto label10;

        goto label11;

     label10:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label11:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label15;

        $i8 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        if $i8 < 0 goto label12;

        $z0 = 1;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        if $z0 == 0 goto label14;

        goto label15;

     label14:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label15:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label19;

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i8 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $l2 = (long) $i8;

        $l1 = $l1 + $l2;

        $b6 = $l0 cmp $l1;

        if $b6 > 0 goto label16;

        goto label17;

     label16:
        $z1 = 0;

     label17:
        if $z1 == 0 goto label18;

        return;

     label18:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label19:
        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.internal.Symbol $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        kotlin.coroutines.Continuation $r3;
        boolean $z0;
        kotlinx.coroutines.flow.SharedFlowImpl$collect$1 $r4;
        int $i0;
        java.lang.Object $r5, $r6, $r7;
        kotlinx.coroutines.Job $r8;
        kotlinx.coroutines.flow.SharedFlowSlot $r9;
        java.lang.IllegalStateException $r10;
        java.lang.Throwable $r11;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r12;
        kotlinx.coroutines.flow.SubscribedFlowCollector $r13;
        kotlin.coroutines.CoroutineContext $r14;
        kotlinx.coroutines.Job$Key $r15;
        kotlin.coroutines.CoroutineContext$Key $r16;
        kotlin.coroutines.CoroutineContext$Element $r17;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r2 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r3 instanceof kotlinx.coroutines.flow.SharedFlowImpl$collect$1;

        if $z0 == 0 goto label01;

        $r4 = (kotlinx.coroutines.flow.SharedFlowImpl$collect$1) $r3;

        $i0 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label>;

        $i0 = $i0 - -2147483648;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label> = $i0;

        goto label02;

     label01:
        $r4 = new kotlinx.coroutines.flow.SharedFlowImpl$collect$1;

        specialinvoke $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: void <init>(kotlinx.coroutines.flow.SharedFlowImpl,kotlin.coroutines.Continuation)>(r0, $r3);

     label02:
        $r5 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label>;

        if $i0 == 0 goto label13;

        if $i0 == 1 goto label09;

        if $i0 == 2 goto label06;

        if $i0 != 3 goto label05;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$3>;

        $r8 = (kotlinx.coroutines.Job) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$2>;

        $r9 = (kotlinx.coroutines.flow.SharedFlowSlot) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$1>;

        $r2 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.SharedFlowImpl) $r7;

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label04:
        goto label19;

     label05:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;

     label06:
        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$3>;

        $r8 = (kotlinx.coroutines.Job) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$2>;

        $r9 = (kotlinx.coroutines.flow.SharedFlowSlot) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$1>;

        $r2 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.SharedFlowImpl) $r7;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label08:
        goto label19;

     label09:
        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$2>;

        $r9 = (kotlinx.coroutines.flow.SharedFlowSlot) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$1>;

        $r2 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        $r7 = $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.SharedFlowImpl) $r7;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label11:
        goto label18;

     label12:
        $r11 := @caughtexception;

        goto label27;

     label13:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r12 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot allocateSlot()>();

        $r9 = (kotlinx.coroutines.flow.SharedFlowSlot) $r12;

     label14:
        $z0 = $r2 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector;

     label15:
        if $z0 == 0 goto label18;

     label16:
        $r13 = (kotlinx.coroutines.flow.SubscribedFlowCollector) $r2;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$1> = $r2;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$2> = $r9;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label> = 1;

        $r5 = virtualinvoke $r13.<kotlinx.coroutines.flow.SubscribedFlowCollector: java.lang.Object onSubscription(kotlin.coroutines.Continuation)>($r4);

     label17:
        if $r5 != $r6 goto label18;

        return $r6;

     label18:
        $r14 = interfaceinvoke $r4.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r15 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r16 = (kotlin.coroutines.CoroutineContext$Key) $r15;

        $r17 = interfaceinvoke $r14.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r16);

        $r8 = (kotlinx.coroutines.Job) $r17;

     label19:
        $r5 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object tryTakeValue(kotlinx.coroutines.flow.SharedFlowSlot)>($r9);

        $r1 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

     label20:
        if $r5 == $r1 goto label24;

        if $r8 != null goto label21;

        goto label22;

     label21:
        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)>($r8);

     label22:
        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$1> = $r2;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$2> = $r9;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$3> = $r8;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label> = 3;

        $r5 = interfaceinvoke $r2.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r5, $r4);

     label23:
        if $r5 != $r6 goto label04;

        return $r6;

     label24:
        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$1> = $r2;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$2> = $r9;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: java.lang.Object L$3> = $r8;

        $r4.<kotlinx.coroutines.flow.SharedFlowImpl$collect$1: int label> = 2;

        $r5 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object awaitValue(kotlinx.coroutines.flow.SharedFlowSlot,kotlin.coroutines.Continuation)>($r9, $r4);

     label25:
        if $r5 != $r6 goto label19;

        return $r6;

     label26:
        $r11 := @caughtexception;

     label27:
        $r12 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot) $r9;

        virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void freeSlot(kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)>($r12);

        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label18 to label19 with label12;
        catch java.lang.Throwable from label19 to label20 with label12;
        catch java.lang.Throwable from label21 to label23 with label12;
        catch java.lang.Throwable from label24 to label25 with label12;
    }

    protected kotlinx.coroutines.flow.SharedFlowSlot createSlot()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.flow.SharedFlowSlot $r1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 = new kotlinx.coroutines.flow.SharedFlowSlot;

        specialinvoke $r1.<kotlinx.coroutines.flow.SharedFlowSlot: void <init>()>();

        return $r1;
    }

    public volatile kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot createSlot()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.flow.SharedFlowSlot $r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlinx.coroutines.flow.SharedFlowSlot createSlot()>();

        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot) $r1;

        return $r2;
    }

    protected kotlinx.coroutines.flow.SharedFlowSlot[] createSlotArray(int)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0;
        kotlinx.coroutines.flow.SharedFlowSlot[] $r1;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $i0 := @parameter0: int;

        $r1 = newarray (kotlinx.coroutines.flow.SharedFlowSlot)[$i0];

        return $r1;
    }

    public volatile kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] createSlotArray(int)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        kotlinx.coroutines.flow.SharedFlowSlot[] $r1;
        int $i0;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlinx.coroutines.flow.SharedFlowSlot[] createSlotArray(int)>($i0);

        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) $r1;

        return $r2;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        java.lang.Object $r1, $r3;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlin.Unit r4;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: boolean tryEmit(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object emitSuspend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label2;

        return $r1;

     label2:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    public kotlinx.coroutines.flow.Flow fuse(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        kotlinx.coroutines.flow.Flow $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.flow.SharedFlow $r4;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r3 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = (kotlinx.coroutines.flow.SharedFlow) r0;

        $r2 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.Flow fuseSharedFlow(kotlinx.coroutines.flow.SharedFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r4, $r3, $i0, $r1);

        return $r2;
    }

    public java.util.List getReplayCache()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        java.lang.Object[] $r1;
        int $i0, $i2, $i3;
        long $l1, $l4;
        java.util.List $r2;
        java.util.ArrayList $r3;
        java.util.Collection $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        entermonitor r0;

     label1:
        $i2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getReplaySize()>();

        if $i2 != 0 goto label3;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        $r1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $i3 = 0;

        if $i2 <= 0 goto label7;

     label4:
        $i0 = $i3 + 1;

        $r4 = (java.util.Collection) $r3;

        $l4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $l1 = (long) $i3;

        $l1 = $l4 + $l1;

        $r5 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r1, $l1);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r5);

     label5:
        if $i0 < $i2 goto label6;

        goto label7;

     label6:
        $i3 = $i0;

        goto label4;

     label7:
        exitmonitor r0;

        $r2 = (java.util.List) $r3;

        return $r2;

     label8:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
    }

    public void resetReplayCache()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l1, $l2, $l3;
        kotlin.Unit $r1;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        entermonitor r0;

     label1:
        $l1 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getBufferEndIndex()>();

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $l2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getBufferEndIndex()>();

        $l3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getQueueEndIndex()>();

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void updateBufferLocked(long,long,long,long)>($l1, $l0, $l2, $l3);

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean tryEmit(java.lang.Object)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r1;
        kotlin.Result$Companion $r2;
        java.lang.Object $r3;
        kotlin.coroutines.Continuation[] $r4;
        boolean $z0;
        kotlin.Unit $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $r3 := @parameter0: java.lang.Object;

        $r4 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        entermonitor r0;

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: boolean tryEmitLocked(java.lang.Object)>($r3);

        $i1 = 0;

        if $z0 == 0 goto label3;

        $r4 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlin.coroutines.Continuation[] findSlotsToResumeLocked(kotlin.coroutines.Continuation[])>($r4);

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        exitmonitor r0;

        $i0 = lengthof $r4;

     label5:
        if $i1 >= $i0 goto label7;

        $r1 = $r4[$i1];

        $i1 = $i1 + 1;

        if $r1 != null goto label6;

        goto label5;

     label6:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r3);

        goto label5;

     label7:
        return $z0;

     label8:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
    }

    public final kotlin.coroutines.Continuation[] updateCollectorIndexLocked$kotlinx_coroutines_core(long)
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l2, $l3, $l5, $l7, $l9;
        byte $b1;
        boolean $z0;
        java.lang.AssertionError $r1;
        int $i4, $i6, $i8;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow $r2;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r3;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r4;
        kotlinx.coroutines.flow.SharedFlowSlot $r5;
        kotlin.coroutines.Continuation[] $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        kotlinx.coroutines.internal.Symbol $r9;
        kotlinx.coroutines.flow.SharedFlowImpl$Emitter $r10;
        kotlin.coroutines.Continuation $r11;
        java.lang.NullPointerException $r12;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label04;

        $l3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $b1 = $l0 cmp $l3;

        if $b1 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label04:
        $l3 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $b1 = $l0 cmp $l3;

        if $b1 <= 0 goto label05;

        $r6 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        return $r6;

     label05:
        $l3 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getHead()>();

        $i4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferSize>;

        $l0 = (long) $i4;

        $l5 = $l0 + $l3;

        $i4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        if $i4 != 0 goto label06;

        $i4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        if $i4 <= 0 goto label06;

        $l5 = $l5 + 1L;

     label06:
        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlow) r0;

        $i4 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: int access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>($r2);

        if $i4 != 0 goto label07;

        goto label11;

     label07:
        $r3 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>($r2);

        if $r3 != null goto label08;

        goto label11;

     label08:
        $i4 = lengthof $r3;

        $i6 = 0;

     label09:
        if $i6 >= $i4 goto label11;

        $r4 = $r3[$i6];

        if $r4 == null goto label10;

        $r5 = (kotlinx.coroutines.flow.SharedFlowSlot) $r4;

        $l0 = $r5.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label10;

        $l0 = $r5.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

        $b1 = $l0 cmp $l5;

        if $b1 >= 0 goto label10;

        $l5 = $r5.<kotlinx.coroutines.flow.SharedFlowSlot: long index>;

     label10:
        $i6 = $i6 + 1;

        goto label09;

     label11:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label15;

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $b1 = $l5 cmp $l0;

        if $b1 < 0 goto label12;

        $z0 = 1;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        if $z0 == 0 goto label14;

        goto label15;

     label14:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label15:
        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $b1 = $l5 cmp $l0;

        if $b1 > 0 goto label16;

        $r6 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        return $r6;

     label16:
        $l2 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: long getBufferEndIndex()>();

        $l0 = $l2;

        $i4 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getNCollectors()>();

        if $i4 <= 0 goto label17;

        $l7 = $l2 - $l5;

        $i6 = (int) $l7;

        $i4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        $i8 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        $i6 = $i8 - $i6;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        goto label18;

     label17:
        $i4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

     label18:
        $r6 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        $i6 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int queueSize>;

        $l7 = (long) $i6;

        $l7 = $l7 + $l2;

        if $i4 <= 0 goto label24;

        $r6 = newarray (kotlin.coroutines.Continuation)[$i4];

        $r7 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        $b1 = $l2 cmp $l7;

        if $b1 >= 0 goto label24;

        $l9 = $l2;

        $i6 = 0;

     label19:
        $l2 = $l0 + 1L;

        $r8 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r7, $l0);

        $r9 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        if $r8 == $r9 goto label22;

        if $r8 == null goto label21;

        $r10 = (kotlinx.coroutines.flow.SharedFlowImpl$Emitter) $r8;

        $i8 = $i6 + 1;

        $r11 = $r10.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: kotlin.coroutines.Continuation cont>;

        $r6[$i6] = $r11;

        $r9 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r7, $l0, $r9);

        $r8 = $r10.<kotlinx.coroutines.flow.SharedFlowImpl$Emitter: java.lang.Object value>;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void access$setBufferAt(java.lang.Object[],long,java.lang.Object)>($r7, $l9, $r8);

        $l0 = $l9 + 1L;

        if $i8 < $i4 goto label20;

        goto label24;

     label20:
        $i6 = $i8;

        $l9 = $l0;

        goto label22;

     label21:
        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.flow.SharedFlowImpl.Emitter");

        throw $r12;

     label22:
        $b1 = $l2 cmp $l7;

        if $b1 < 0 goto label23;

        $l0 = $l9;

        goto label24;

     label23:
        $l0 = $l2;

        goto label19;

     label24:
        $l3 = $l0 - $l3;

        $i4 = (int) $l3;

        $i6 = virtualinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: int getNCollectors()>();

        if $i6 != 0 goto label25;

        $l3 = $l0;

        goto label26;

     label25:
        $l3 = $l5;

     label26:
        $l5 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $i6 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int replay>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i4);

        $l2 = (long) $i4;

        $l2 = $l0 - $l2;

        $l5 = staticinvoke <java.lang.Math: long max(long,long)>($l5, $l2);

        $l2 = $l5;

        $i4 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: int bufferCapacity>;

        if $i4 != 0 goto label27;

        $b1 = $l5 cmp $l7;

        if $b1 >= 0 goto label27;

        $r7 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: java.lang.Object[] buffer>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        $r8 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object access$getBufferAt(java.lang.Object[],long)>($r7, $l5);

        $r9 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $z0 == 0 goto label27;

        $l0 = $l0 + 1L;

        $l2 = $l5 + 1L;

     label27:
        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void updateBufferLocked(long,long,long,long)>($l2, $l3, $l0, $l7);

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void cleanupTailLocked()>();

        $i4 = lengthof $r6;

        if $i4 != 0 goto label28;

        $b1 = 1;

        goto label29;

     label28:
        $b1 = 0;

     label29:
        $i4 = 1 ^ $b1;

        if $i4 == 0 goto label30;

        $r6 = specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: kotlin.coroutines.Continuation[] findSlotsToResumeLocked(kotlin.coroutines.Continuation[])>($r6);

     label30:
        return $r6;
    }

    public final long updateNewCollectorIndexLocked$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.flow.SharedFlowImpl r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: kotlinx.coroutines.flow.SharedFlowImpl;

        $l0 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long replayIndex>;

        $l1 = r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex>;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        r0.<kotlinx.coroutines.flow.SharedFlowImpl: long minCollectorIndex> = $l0;

     label1:
        return $l0;
    }
}
