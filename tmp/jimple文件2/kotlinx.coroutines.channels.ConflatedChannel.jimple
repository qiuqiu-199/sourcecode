public class kotlinx.coroutines.channels.ConflatedChannel extends kotlinx.coroutines.channels.AbstractChannel
{
    private final java.util.concurrent.locks.ReentrantLock lock;
    private java.lang.Object value;

    public void <init>(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        kotlinx.coroutines.internal.Symbol $r3;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void <init>(kotlin.jvm.functions.Function1)>($r1);

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value> = $r3;

        return;
    }

    private final kotlinx.coroutines.internal.UndeliveredElementException updateValueLocked(java.lang.Object)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.internal.UndeliveredElementException $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        $r3 = null;

        if $r2 != $r4 goto label1;

        goto label3;

     label1:
        $r5 = r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r5 != null goto label2;

        goto label3;

     label2:
        $r3 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException$default(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException,int,java.lang.Object)>($r5, $r2, null, 2, null);

     label3:
        r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value> = $r1;

        return $r3;
    }

    protected boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        boolean $z0;
        kotlinx.coroutines.channels.Receive $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.Receive;

        $r2 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)>($r1);

     label2:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.String getBufferDebugString()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(value=");

        $r3 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    protected final boolean isBufferAlwaysEmpty()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        return 0;
    }

    protected final boolean isBufferAlwaysFull()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        return 0;
    }

    protected final boolean isBufferEmpty()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r2 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected final boolean isBufferFull()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        return 0;
    }

    public boolean isEmpty()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.util.concurrent.locks.Lock $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r1 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: boolean isEmptyImpl()>();

     label2:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.Object offerInternal(java.lang.Object)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        java.lang.Object $r1, $r5;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        kotlinx.coroutines.channels.Closed $r4;
        kotlinx.coroutines.internal.Symbol $r6, $r8;
        kotlinx.coroutines.channels.ReceiveOrClosed $r7;
        boolean $z0;
        java.lang.AssertionError $r9;
        kotlin.Unit $r10;
        kotlinx.coroutines.internal.UndeliveredElementException $r11;
        java.lang.Throwable $r12;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label02:
        if $r4 != null goto label25;

     label03:
        $r5 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r6 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

     label04:
        if $r5 != $r6 goto label20;

     label05:
        $r7 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()>();

     label06:
        if $r7 != null goto label07;

        goto label20;

     label07:
        $z0 = $r7 instanceof kotlinx.coroutines.channels.Closed;

     label08:
        if $z0 == 0 goto label09;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r7;

     label09:
        $r6 = interfaceinvoke $r7.<kotlinx.coroutines.channels.ReceiveOrClosed: kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object,kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>($r1, null);

     label10:
        if $r6 == null goto label05;

     label11:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label12:
        if $z0 == 0 goto label18;

     label13:
        $r8 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

     label14:
        if $r6 != $r8 goto label15;

        $z0 = 1;

        goto label16;

     label15:
        $z0 = 0;

     label16:
        if $z0 == 0 goto label17;

        goto label18;

     label17:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label18:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label19:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        interfaceinvoke $r7.<kotlinx.coroutines.channels.ReceiveOrClosed: void completeResumeReceive(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r7.<kotlinx.coroutines.channels.ReceiveOrClosed: java.lang.Object getOfferResult()>();

        return $r1;

     label20:
        $r11 = specialinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.internal.UndeliveredElementException updateValueLocked(java.lang.Object)>($r1);

     label21:
        if $r11 != null goto label24;

     label22:
        $r6 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

     label23:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label24:
        throw $r11;

     label25:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label26:
        $r12 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label17 to label19 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    protected java.lang.Object offerSelectInternal(java.lang.Object, kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        java.lang.Object $r1, $r6, $r12;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        kotlinx.coroutines.channels.Closed $r5;
        kotlinx.coroutines.internal.Symbol $r7;
        kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc $r8;
        kotlinx.coroutines.internal.AtomicDesc $r9;
        kotlin.Unit $r10;
        kotlinx.coroutines.channels.ReceiveOrClosed $r11;
        boolean $z0;
        java.lang.String $r13;
        java.lang.IllegalStateException $r14;
        java.lang.Throwable $r15;
        kotlinx.coroutines.internal.UndeliveredElementException $r16;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $r3 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label02:
        if $r5 != null goto label28;

     label03:
        $r6 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r7 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

     label04:
        if $r6 != $r7 goto label19;

     label05:
        $r8 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc describeTryOffer(java.lang.Object)>($r1);

        $r9 = (kotlinx.coroutines.internal.AtomicDesc) $r8;

        $r6 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: java.lang.Object performAtomicTrySelect(kotlinx.coroutines.internal.AtomicDesc)>($r9);

     label06:
        if $r6 != null goto label09;

     label07:
        $r6 = virtualinvoke $r8.<kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc: java.lang.Object getResult()>();

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r11 = (kotlinx.coroutines.channels.ReceiveOrClosed) $r6;

        interfaceinvoke $r11.<kotlinx.coroutines.channels.ReceiveOrClosed: void completeResumeReceive(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r11.<kotlinx.coroutines.channels.ReceiveOrClosed: java.lang.Object getOfferResult()>();

        return $r1;

     label09:
        $r7 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_FAILED>;

     label10:
        if $r6 != $r7 goto label11;

        goto label19;

     label11:
        $r12 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

     label12:
        if $r6 != $r12 goto label13;

        goto label05;

     label13:
        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label14:
        if $r6 == $r1 goto label18;

     label15:
        $z0 = $r6 instanceof kotlinx.coroutines.channels.Closed;

     label16:
        if $z0 == 0 goto label17;

        goto label18;

     label17:
        $r13 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("performAtomicTrySelect(describeTryOffer) returned ", $r6);

        $r14 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r15 = (java.lang.Throwable) $r14;

        throw $r15;

     label18:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label19:
        $z0 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

     label20:
        if $z0 != 0 goto label23;

     label21:
        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label22:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label23:
        $r16 = specialinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.internal.UndeliveredElementException updateValueLocked(java.lang.Object)>($r1);

     label24:
        if $r16 != null goto label27;

     label25:
        $r7 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

     label26:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r7;

     label27:
        throw $r16;

     label28:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label29:
        $r15 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
    }

    protected void onCancelIdempotent(boolean)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        kotlin.Unit $r1;
        kotlinx.coroutines.internal.UndeliveredElementException $r2;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        kotlinx.coroutines.internal.Symbol $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $z0 := @parameter0: boolean;

        $r3 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r5 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        $r2 = specialinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.internal.UndeliveredElementException updateValueLocked(java.lang.Object)>($r5);

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void onCancelIdempotent(boolean)>($z0);

        if $r2 != null goto label3;

        return;

     label3:
        throw $r2;

     label4:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected java.lang.Object pollInternal()
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        kotlinx.coroutines.channels.Closed $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.internal.Symbol $r5;
        kotlin.Unit $r6;
        java.lang.Throwable $r7;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r2 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r5 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

     label2:
        if $r4 != $r5 goto label7;

     label3:
        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label4:
        $r4 = $r1;

        if $r1 != null goto label6;

     label5:
        $r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label6:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label7:
        $r4 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r5 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value> = $r5;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label8:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label9:
        $r7 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    protected java.lang.Object pollSelectInternal(kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.ConflatedChannel r0;
        kotlinx.coroutines.internal.Symbol $r1;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        java.lang.Object $r5;
        kotlinx.coroutines.channels.Closed $r6;
        boolean $z0;
        kotlin.Unit $r7;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.channels.ConflatedChannel;

        $r2 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r3 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r5 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

     label02:
        if $r5 != $r1 goto label07;

     label03:
        $r6 = virtualinvoke r0.<kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label04:
        $r5 = $r6;

        if $r6 != null goto label06;

     label05:
        $r5 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label06:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label07:
        $z0 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

     label08:
        if $z0 != 0 goto label11;

     label09:
        $r5 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label10:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label11:
        $r5 = r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value>;

        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        r0.<kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value> = $r1;

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label12:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label13:
        $r8 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }
}
