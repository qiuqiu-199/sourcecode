final class kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final kotlinx.coroutines.flow.FlowCollector $collector;
    private java.lang.Object L$0;
    int label;
    final kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest this$0;

    void <init>(kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        $r3 := @parameter0: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        $r1 := @parameter1: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest this$0> = $r3;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.FlowCollector $collector> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 r0, $r5;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = new kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest this$0>;

        $r4 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.FlowCollector $collector>;

        specialinvoke $r5.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: void <init>(kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest,kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r3, $r4, $r2);

        $r5.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r5;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 r0;
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        java.lang.Object $r3, $r4;
        int $i0;
        java.lang.IllegalStateException $r5;
        kotlinx.coroutines.CoroutineScope $r6;
        kotlin.jvm.internal.Ref$ObjectRef $r7;
        kotlinx.coroutines.flow.Flow $r8;
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3$invokeSuspend$$inlined$collect$1 $r9;
        kotlin.coroutines.Continuation $r10;
        kotlin.Unit r11;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        $r3 := @parameter0: java.lang.Object;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: int label>;

        if $i0 == 0 goto label2;

        if $i0 != 1 goto label1;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        goto label3;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: java.lang.Object L$0>;

        $r6 = (kotlinx.coroutines.CoroutineScope) $r3;

        $r7 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r7.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        $r1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest this$0>;

        $r8 = $r1.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: kotlinx.coroutines.flow.Flow flow>;

        $r1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest this$0>;

        $r2 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: kotlinx.coroutines.flow.FlowCollector $collector>;

        $r9 = new kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3$invokeSuspend$$inlined$collect$1;

        specialinvoke $r9.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3$invokeSuspend$$inlined$collect$1: void <init>(kotlin.jvm.internal.Ref$ObjectRef,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest,kotlinx.coroutines.flow.FlowCollector)>($r7, $r6, $r1, $r2);

        $r2 = (kotlinx.coroutines.flow.FlowCollector) $r9;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: int label> = 1;

        $r3 = interfaceinvoke $r8.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r2, $r10);

        if $r3 != $r4 goto label3;

        return $r4;

     label3:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;
    }
}
