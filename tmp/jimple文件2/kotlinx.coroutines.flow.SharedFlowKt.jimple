public final class kotlinx.coroutines.flow.SharedFlowKt extends java.lang.Object
{
    public static final kotlinx.coroutines.internal.Symbol NO_VALUE;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("NO_VALUE");

        <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE> = $r0;

        return;
    }

    public static final kotlinx.coroutines.flow.MutableSharedFlow MutableSharedFlow(int, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.channels.BufferOverflow $r0, $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        kotlinx.coroutines.flow.SharedFlowImpl $r2;
        kotlinx.coroutines.flow.MutableSharedFlow $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6;
        java.lang.Integer $r7;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $z0 = 1;

        if $i0 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label10;

        if $i1 < 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        if $z1 == 0 goto label09;

        if $i0 > 0 goto label06;

        if $i1 > 0 goto label06;

        $r1 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if $r0 != $r1 goto label05;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label08;

        $i1 = $i1 + $i0;

        if $i1 >= 0 goto label07;

        $i1 = 2147483647;

     label07:
        $r2 = new kotlinx.coroutines.flow.SharedFlowImpl;

        specialinvoke $r2.<kotlinx.coroutines.flow.SharedFlowImpl: void <init>(int,int,kotlinx.coroutines.channels.BufferOverflow)>($i0, $i1, $r0);

        $r3 = (kotlinx.coroutines.flow.MutableSharedFlow) $r2;

        return $r3;

     label08:
        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("replay or extraBufferCapacity must be positive with non-default onBufferOverflow strategy ", $r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;

     label09:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("extraBufferCapacity cannot be negative, but was ", $r7);

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;

     label10:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("replay cannot be negative, but was ", $r7);

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;
    }

    public static kotlinx.coroutines.flow.MutableSharedFlow MutableSharedFlow$default(int, int, kotlinx.coroutines.channels.BufferOverflow, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.MutableSharedFlow $r0;
        int $i0, $i1, $i2, $i3;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        java.lang.Object $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $i2 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        $i1 = 0;

     label2:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label3;

        $r1 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label3:
        $r0 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.MutableSharedFlow MutableSharedFlow(int,int,kotlinx.coroutines.channels.BufferOverflow)>($i0, $i1, $r1);

        return $r0;
    }

    public static final java.lang.Object access$getBufferAt(java.lang.Object[], long)
    {
        long $l0;
        java.lang.Object $r0;
        java.lang.Object[] $r1;

        $r1 := @parameter0: java.lang.Object[];

        $l0 := @parameter1: long;

        $r0 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: java.lang.Object getBufferAt(java.lang.Object[],long)>($r1, $l0);

        return $r0;
    }

    public static final void access$setBufferAt(java.lang.Object[], long, java.lang.Object)
    {
        java.lang.Object[] $r0;
        long $l0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.lang.Object;

        staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: void setBufferAt(java.lang.Object[],long,java.lang.Object)>($r0, $l0, $r1);

        return;
    }

    public static final kotlinx.coroutines.flow.Flow fuseSharedFlow(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlin.coroutines.CoroutineContext $r0;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r1, $r3;
        kotlinx.coroutines.flow.SharedFlow $r2;
        kotlinx.coroutines.flow.Flow $r4;
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl $r5;

        $r2 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r0 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r1 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        if $i0 == 0 goto label1;

        if $i0 != -3 goto label2;

     label1:
        $r3 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if $r1 != $r3 goto label2;

        $r4 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r4;

     label2:
        $r5 = new kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        $r4 = (kotlinx.coroutines.flow.Flow) $r2;

        specialinvoke $r5.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r4, $r0, $i0, $r1);

        $r4 = (kotlinx.coroutines.flow.Flow) $r5;

        return $r4;
    }

    private static final java.lang.Object getBufferAt(java.lang.Object[], long)
    {
        java.lang.Object[] $r0;
        long $l0;
        int $i1, $i2;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        $l0 := @parameter1: long;

        $i1 = (int) $l0;

        $i2 = lengthof $r0;

        $i2 = $i2 + -1;

        $i1 = $i1 & $i2;

        $r1 = $r0[$i1];

        return $r1;
    }

    public static void getNO_VALUE$annotations()
    {
        return;
    }

    private static final void setBufferAt(java.lang.Object[], long, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;
        long $l0;
        int $i1, $i2;

        $r0 := @parameter0: java.lang.Object[];

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.lang.Object;

        $i1 = (int) $l0;

        $i2 = lengthof $r0;

        $i2 = $i2 + -1;

        $i1 = $i1 & $i2;

        $r0[$i1] = $r1;

        return;
    }
}
