final class kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner extends java.lang.Object implements kotlin.coroutines.Continuation, kotlin.coroutines.jvm.internal.CoroutineStackFrame
{
    public final kotlin.coroutines.Continuation delegate;
    private final kotlin.coroutines.jvm.internal.CoroutineStackFrame frame;
    public final kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info;

    public void <init>(kotlin.coroutines.Continuation, kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r2;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r3 := @parameter2: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate> = $r1;

        r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info> = $r2;

        r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.jvm.internal.CoroutineStackFrame frame> = $r3;

        return;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r0;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r1 = r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.jvm.internal.CoroutineStackFrame frame>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r2 = r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate>;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r0;
        java.lang.StackTraceElement $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r2 = r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.jvm.internal.CoroutineStackFrame frame>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke $r2.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>();

        return $r1;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r0;
        java.lang.Object $r1;
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImpl: void access$probeCoroutineCompleted(kotlinx.coroutines.debug.internal.DebugProbesImpl,kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)>($r2, r0);

        $r3 = r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate>;

        interfaceinvoke $r3.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r0;
        java.lang.String $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r2 = r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
}
