final class kotlinx.coroutines.BuildersKt__Builders_commonKt extends java.lang.Object
{
    private static final int RESUMED;
    private static final int SUSPENDED;
    private static final int UNDECIDED;

    public static final kotlinx.coroutines.Deferred async(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.CoroutineStart $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.coroutines.CoroutineContext $r3;
        boolean $z0;
        kotlinx.coroutines.LazyDeferredCoroutine $r4;
        kotlinx.coroutines.DeferredCoroutine $r5;
        kotlinx.coroutines.Deferred $r6;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r3 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r0 := @parameter2: kotlinx.coroutines.CoroutineStart;

        $r1 := @parameter3: kotlin.jvm.functions.Function2;

        $r3 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>($r2, $r3);

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.CoroutineStart: boolean isLazy()>();

        if $z0 == 0 goto label1;

        $r4 = new kotlinx.coroutines.LazyDeferredCoroutine;

        specialinvoke $r4.<kotlinx.coroutines.LazyDeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r3, $r1);

        $r5 = (kotlinx.coroutines.DeferredCoroutine) $r4;

        goto label2;

     label1:
        $r5 = new kotlinx.coroutines.DeferredCoroutine;

        specialinvoke $r5.<kotlinx.coroutines.DeferredCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>($r3, 1);

     label2:
        virtualinvoke $r5.<kotlinx.coroutines.DeferredCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>($r0, $r5, $r1);

        $r6 = (kotlinx.coroutines.Deferred) $r5;

        return $r6;
    }

    public static kotlinx.coroutines.Deferred async$default(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlinx.coroutines.Deferred $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.CoroutineStart $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        kotlin.coroutines.EmptyCoroutineContext $r6;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r3 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r4 := @parameter2: kotlinx.coroutines.CoroutineStart;

        $r0 := @parameter3: kotlin.jvm.functions.Function2;

        $i0 := @parameter4: int;

        $r5 := @parameter5: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r6 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r3 = (kotlin.coroutines.CoroutineContext) $r6;

     label1:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $r4 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT>;

     label2:
        $r1 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Deferred async(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>($r2, $r3, $r4, $r0);

        return $r1;
    }

    public static final java.lang.Object invoke(kotlinx.coroutines.CoroutineDispatcher, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        kotlin.coroutines.CoroutineContext $r4;

        $r3 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r4 = (kotlin.coroutines.CoroutineContext) $r3;

        $r2 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r4, $r0, $r1);

        return $r2;
    }

    private static final java.lang.Object invoke$$forInline(kotlinx.coroutines.CoroutineDispatcher, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.coroutines.CoroutineContext $r4;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r3 := @parameter1: kotlin.jvm.functions.Function2;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $r4 = (kotlin.coroutines.CoroutineContext) $r2;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        $r1 = staticinvoke <kotlinx.coroutines.BuildersKt: java.lang.Object withContext(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r4, $r3, $r0);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r1;
    }

    public static final kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.CoroutineStart $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.coroutines.CoroutineContext $r3;
        boolean $z0;
        kotlinx.coroutines.LazyStandaloneCoroutine $r4;
        kotlinx.coroutines.StandaloneCoroutine $r5;
        kotlinx.coroutines.Job $r6;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r3 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r0 := @parameter2: kotlinx.coroutines.CoroutineStart;

        $r1 := @parameter3: kotlin.jvm.functions.Function2;

        $r3 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)>($r2, $r3);

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.CoroutineStart: boolean isLazy()>();

        if $z0 == 0 goto label1;

        $r4 = new kotlinx.coroutines.LazyStandaloneCoroutine;

        specialinvoke $r4.<kotlinx.coroutines.LazyStandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)>($r3, $r1);

        $r5 = (kotlinx.coroutines.StandaloneCoroutine) $r4;

        goto label2;

     label1:
        $r5 = new kotlinx.coroutines.StandaloneCoroutine;

        specialinvoke $r5.<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>($r3, 1);

     label2:
        virtualinvoke $r5.<kotlinx.coroutines.StandaloneCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)>($r0, $r5, $r1);

        $r6 = (kotlinx.coroutines.Job) $r5;

        return $r6;
    }

    public static kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function2 $r0;
        kotlinx.coroutines.Job $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.CoroutineStart $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        kotlin.coroutines.EmptyCoroutineContext $r6;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r3 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r4 := @parameter2: kotlinx.coroutines.CoroutineStart;

        $r0 := @parameter3: kotlin.jvm.functions.Function2;

        $i0 := @parameter4: int;

        $r5 := @parameter5: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r6 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r3 = (kotlin.coroutines.CoroutineContext) $r6;

     label1:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $r4 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT>;

     label2:
        $r1 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>($r2, $r3, $r4, $r0);

        return $r1;
    }

    public static final java.lang.Object withContext(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0, $r14;
        kotlin.coroutines.CoroutineContext $r1, $r3;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.internal.ScopeCoroutine $r4;
        java.lang.Object $r5, $r11;
        kotlin.coroutines.ContinuationInterceptor$Key $r6;
        kotlin.coroutines.CoroutineContext$Key $r7;
        kotlin.coroutines.CoroutineContext$Element $r8, $r9;
        boolean $z0;
        kotlinx.coroutines.UndispatchedCoroutine $r10;
        java.lang.Throwable $r12;
        kotlinx.coroutines.DispatchedCoroutine $r13;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r0 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r1 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r1);

        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlin.coroutines.CoroutineContext)>($r1);

        if $r1 != $r3 goto label1;

        $r4 = new kotlinx.coroutines.internal.ScopeCoroutine;

        specialinvoke $r4.<kotlinx.coroutines.internal.ScopeCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r1, $r0);

        $r5 = staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: java.lang.Object startUndispatchedOrReturn(kotlinx.coroutines.internal.ScopeCoroutine,java.lang.Object,kotlin.jvm.functions.Function2)>($r4, $r4, $r2);

        goto label6;

     label1:
        $r6 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r7 = (kotlin.coroutines.CoroutineContext$Key) $r6;

        $r8 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r7);

        $r6 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r7 = (kotlin.coroutines.CoroutineContext$Key) $r6;

        $r9 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r7);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $z0 == 0 goto label5;

        $r10 = new kotlinx.coroutines.UndispatchedCoroutine;

        specialinvoke $r10.<kotlinx.coroutines.UndispatchedCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r1, $r0);

        $r5 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, null);

     label2:
        $r4 = (kotlinx.coroutines.internal.ScopeCoroutine) $r10;

        $r11 = staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: java.lang.Object startUndispatchedOrReturn(kotlinx.coroutines.internal.ScopeCoroutine,java.lang.Object,kotlin.jvm.functions.Function2)>($r4, $r10, $r2);

     label3:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r5);

        $r5 = $r11;

        goto label6;

     label4:
        $r12 := @caughtexception;

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r5);

        throw $r12;

     label5:
        $r13 = new kotlinx.coroutines.DispatchedCoroutine;

        specialinvoke $r13.<kotlinx.coroutines.DispatchedCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r1, $r0);

        $r14 = (kotlin.coroutines.Continuation) $r13;

        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable$default(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, $r13, $r14, null, 4, null);

        $r5 = virtualinvoke $r13.<kotlinx.coroutines.DispatchedCoroutine: java.lang.Object getResult()>();

     label6:
        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r11 goto label7;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r0);

     label7:
        return $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static void <clinit>()
    {
        <kotlinx.coroutines.BuildersKt__Builders_commonKt: int SUSPENDED> = 1;

        <kotlinx.coroutines.BuildersKt__Builders_commonKt: int RESUMED> = 2;

        return;
    }
}
