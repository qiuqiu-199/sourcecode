public final class kotlinx.coroutines.channels.AbstractChannel$TryPollDesc extends kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc
{

    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListHead)
    {
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$TryPollDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r2 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r2);

        return;
    }

    protected java.lang.Object failure(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc r0;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.internal.Symbol r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$TryPollDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.channels.Send;

        if $z0 != 0 goto label2;

        r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        return r2;

     label2:
        return null;
    }

    public java.lang.Object onPrepare(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;
        kotlinx.coroutines.channels.Send $r3;
        kotlinx.coroutines.internal.Symbol $r4, $r6;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.AssertionError $r7;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$TryPollDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r2 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode affected>;

        $r3 = (kotlinx.coroutines.channels.Send) $r2;

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.channels.Send: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>($r1);

        if $r4 != null goto label1;

        $r5 = <kotlinx.coroutines.internal.LockFreeLinkedList_commonKt: java.lang.Object REMOVE_PREPARED>;

        return $r5;

     label1:
        $r5 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

        if $r4 != $r5 goto label2;

        $r5 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

        return $r5;

     label2:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label6;

        $r6 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r4 != $r6 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        return null;
    }

    public void onRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.channels.Send $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$TryPollDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 = (kotlinx.coroutines.channels.Send) $r1;

        virtualinvoke $r2.<kotlinx.coroutines.channels.Send: void undeliveredElement()>();

        return;
    }
}
