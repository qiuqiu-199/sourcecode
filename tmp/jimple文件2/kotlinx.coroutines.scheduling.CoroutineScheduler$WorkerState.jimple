public final enum class kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState extends java.lang.Enum
{
    private static final kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES;
    public static final enum kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING;
    public static final enum kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED;
    public static final enum kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT;
    public static final enum kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING;
    public static final enum kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED;

    private static final kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $values()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;

        $r0 = newarray (kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)[5];

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        $r0[0] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $r0[1] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        $r0[2] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        $r0[3] = $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        $r0[4] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("CPU_ACQUIRED", 0);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("BLOCKING", 1);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("PARKING", 2);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("DORMANT", 3);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT> = $r1;

        $r1 = new kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: void <init>(java.lang.String,int)>("TERMINATED", 4);

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED> = $r1;

        $r0 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $values()>();

        <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
    {
        java.lang.Enum $r0;
        java.lang.String $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;", $r1);

        $r2 = (kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) $r0;

        return $r2;
    }

    public static kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
    {
        java.lang.Object $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $r1;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[]) $r0;

        return $r1;
    }
}
