final class kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final kotlinx.coroutines.flow.Flow[] $flows;
    final int $i;
    final java.util.concurrent.atomic.AtomicInteger $nonClosed;
    final kotlinx.coroutines.channels.Channel $resultChannel;
    int label;

    void <init>(kotlinx.coroutines.flow.Flow[], int, java.util.concurrent.atomic.AtomicInteger, kotlinx.coroutines.channels.Channel, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1 r0;
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        kotlinx.coroutines.channels.Channel $r2;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.Flow[] $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1;

        $r4 := @parameter0: kotlinx.coroutines.flow.Flow[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.concurrent.atomic.AtomicInteger;

        $r2 := @parameter3: kotlinx.coroutines.channels.Channel;

        $r3 := @parameter4: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.flow.Flow[] $flows> = $r4;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: int $i> = $i0;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: java.util.concurrent.atomic.AtomicInteger $nonClosed> = $r1;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.channels.Channel $resultChannel> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1 r0, $r6;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.Flow[] $r2;
        int $i0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        kotlinx.coroutines.channels.Channel $r4;
        java.lang.Object $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1;

        $r5 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r6 = new kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1;

        $r2 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.flow.Flow[] $flows>;

        $i0 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: int $i>;

        $r3 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: java.util.concurrent.atomic.AtomicInteger $nonClosed>;

        $r4 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.channels.Channel $resultChannel>;

        specialinvoke $r6.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: void <init>(kotlinx.coroutines.flow.Flow[],int,java.util.concurrent.atomic.AtomicInteger,kotlinx.coroutines.channels.Channel,kotlin.coroutines.Continuation)>($r2, $i0, $r3, $r4, $r1);

        $r1 = (kotlin.coroutines.Continuation) $r6;

        return $r1;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1 r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1 r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1 r0;
        kotlinx.coroutines.channels.Channel $r1;
        java.lang.Object $r2, $r3;
        int $i0;
        java.lang.IllegalStateException $r4;
        kotlinx.coroutines.flow.Flow[] $r5;
        kotlinx.coroutines.flow.Flow $r6;
        kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1$invokeSuspend$$inlined$collect$1 $r7;
        kotlinx.coroutines.flow.FlowCollector $r8;
        kotlin.coroutines.Continuation $r9;
        java.util.concurrent.atomic.AtomicInteger $r10;
        kotlinx.coroutines.channels.SendChannel $r11;
        java.lang.Throwable $r12;
        kotlin.Unit r13;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: int label>;

        if $i0 == 0 goto label04;

        if $i0 != 1 goto label03;

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label02:
        goto label07;

     label03:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;

     label04:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label05:
        $r5 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.flow.Flow[] $flows>;

        $i0 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: int $i>;

        $r6 = $r5[$i0];

        $r1 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.channels.Channel $resultChannel>;

        $r7 = new kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1$invokeSuspend$$inlined$collect$1;

        specialinvoke $r7.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1$invokeSuspend$$inlined$collect$1: void <init>(kotlinx.coroutines.channels.Channel,int)>($r1, $i0);

        $r8 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: int label> = 1;

        $r2 = interfaceinvoke $r6.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r8, $r9);

     label06:
        if $r2 != $r3 goto label07;

        return $r3;

     label07:
        $r10 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: java.util.concurrent.atomic.AtomicInteger $nonClosed>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label08;

        $r1 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.channels.Channel $resultChannel>;

        $r11 = (kotlinx.coroutines.channels.SendChannel) $r1;

        staticinvoke <kotlinx.coroutines.channels.SendChannel$DefaultImpls: boolean close$default(kotlinx.coroutines.channels.SendChannel,java.lang.Throwable,int,java.lang.Object)>($r11, null, 1, null);

     label08:
        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r13;

     label09:
        $r12 := @caughtexception;

        $r10 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: java.util.concurrent.atomic.AtomicInteger $nonClosed>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label10;

        $r1 = r0.<kotlinx.coroutines.flow.internal.CombineKt$combineInternal$2$1: kotlinx.coroutines.channels.Channel $resultChannel>;

        $r11 = (kotlinx.coroutines.channels.SendChannel) $r1;

        staticinvoke <kotlinx.coroutines.channels.SendChannel$DefaultImpls: boolean close$default(kotlinx.coroutines.channels.SendChannel,java.lang.Throwable,int,java.lang.Object)>($r11, null, 1, null);

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
    }
}
