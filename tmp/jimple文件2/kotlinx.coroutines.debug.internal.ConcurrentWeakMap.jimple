public final class kotlinx.coroutines.debug.internal.ConcurrentWeakMap extends kotlin.collections.AbstractMutableMap
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _size$FU;
    private volatile int _size;
    volatile java.lang.Object core;
    private final java.lang.ref.ReferenceQueue weakRefQueue;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;", "_size");

        <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _size$FU> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void <init>(boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        return;
    }

    public void <init>(boolean)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        boolean $z0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r1;
        java.lang.ref.ReferenceQueue $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<kotlin.collections.AbstractMutableMap: void <init>()>();

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: int _size> = 0;

        $r1 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core;

        specialinvoke $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap,int)>(r0, 16);

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core> = $r1;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.ref.ReferenceQueue weakRefQueue> = $r2;

        return;
    }

    public void <init>(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        boolean $z0;
        int $i0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void <init>(boolean)>($z0);

        return;
    }

    public static final void access$decrementSize(kotlinx.coroutines.debug.internal.ConcurrentWeakMap)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r0;

        $r0 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        specialinvoke $r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void decrementSize()>();

        return;
    }

    public static final java.lang.ref.ReferenceQueue access$getWeakRefQueue$p(kotlinx.coroutines.debug.internal.ConcurrentWeakMap)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r0;
        java.lang.ref.ReferenceQueue r1;

        $r0 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        r1 = $r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.ref.ReferenceQueue weakRefQueue>;

        return r1;
    }

    private final void cleanWeakRef(kotlinx.coroutines.debug.internal.HashedWeakRef)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.HashedWeakRef;

        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core>;

        $r3 = (kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) $r2;

        virtualinvoke $r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: void cleanWeakRef(kotlinx.coroutines.debug.internal.HashedWeakRef)>($r1);

        return;
    }

    private final void decrementSize()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _size$FU>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>(r0);

        return;
    }

    private final java.lang.Object putSynchronized(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.lang.Object $r1, $r2, $r3;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r4, $r6;
        kotlinx.coroutines.internal.Symbol $r5;
        java.lang.Throwable $r7;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core>;

        $r4 = (kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) $r3;

     label2:
        $r3 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.lang.Object putImpl$default(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core,java.lang.Object,java.lang.Object,kotlinx.coroutines.debug.internal.HashedWeakRef,int,java.lang.Object)>($r4, $r2, $r1, null, 4, null);

        $r5 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol access$getREHASH$p()>();

     label3:
        if $r3 == $r5 goto label4;

        exitmonitor r0;

        return $r3;

     label4:
        $r6 = virtualinvoke $r4.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core rehash()>();

        $r4 = $r6;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core> = $r6;

     label5:
        goto label2;

     label6:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void clear()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.util.Set $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object remove(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core>;

        $r3 = (kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) $r2;

        $r1 = virtualinvoke $r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.lang.Object getImpl(java.lang.Object)>($r1);

        return $r1;
    }

    public java.util.Set getEntries()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$entries$1 $r2;
        kotlin.jvm.functions.Function2 $r3;
        java.util.Set $r4;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet;

        $r2 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$entries$1: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$entries$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        specialinvoke $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap,kotlin.jvm.functions.Function2)>(r0, $r3);

        $r4 = (java.util.Set) $r1;

        return $r4;
    }

    public java.util.Set getKeys()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$keys$1 $r2;
        kotlin.jvm.functions.Function2 $r3;
        java.util.Set $r4;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet;

        $r2 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$keys$1: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$keys$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        specialinvoke $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap,kotlin.jvm.functions.Function2)>(r0, $r3);

        $r4 = (java.util.Set) $r1;

        return $r4;
    }

    public int getSize()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        int i0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        i0 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: int _size>;

        return i0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.lang.Object $r1, $r2, $r3, $r5;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r4;
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r7;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core>;

        $r4 = (kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) $r3;

        $r3 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.lang.Object putImpl$default(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core,java.lang.Object,java.lang.Object,kotlinx.coroutines.debug.internal.HashedWeakRef,int,java.lang.Object)>($r4, $r2, $r1, null, 4, null);

        $r5 = $r3;

        $r6 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol access$getREHASH$p()>();

        if $r3 != $r6 goto label1;

        $r5 = specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object putSynchronized(java.lang.Object,java.lang.Object)>($r2, $r1);

     label1:
        if $r5 != null goto label2;

        $r7 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _size$FU>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(r0);

     label2:
        return $r5;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.lang.Object $r1, $r2, $r4;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r3;
        kotlinx.coroutines.internal.Symbol $r5;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r6;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object core>;

        $r3 = (kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) $r2;

        $r2 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.lang.Object putImpl$default(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core,java.lang.Object,java.lang.Object,kotlinx.coroutines.debug.internal.HashedWeakRef,int,java.lang.Object)>($r3, $r1, null, null, 4, null);

        $r4 = $r2;

        $r5 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: kotlinx.coroutines.internal.Symbol access$getREHASH$p()>();

        if $r2 != $r5 goto label2;

        $r4 = specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object putSynchronized(java.lang.Object,java.lang.Object)>($r1, null);

     label2:
        if $r4 == null goto label3;

        $r6 = <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _size$FU>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>(r0);

     label3:
        return $r4;
    }

    public final void runWeakRefQueueCleaningLoopUntilInterrupted()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;
        java.lang.InterruptedException $r1;
        java.lang.ref.ReferenceQueue $r2;
        boolean $z0;
        java.lang.ref.Reference $r3;
        kotlinx.coroutines.debug.internal.HashedWeakRef $r4;
        java.lang.NullPointerException $r5;
        java.lang.Thread $r6;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.ref.ReferenceQueue weakRefQueue>;

        if $r2 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label12;

     label03:
        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.ref.ReferenceQueue weakRefQueue>;

     label04:
        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

     label05:
        if $r3 == null goto label08;

        $r4 = (kotlinx.coroutines.debug.internal.HashedWeakRef) $r3;

     label06:
        specialinvoke r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void cleanWeakRef(kotlinx.coroutines.debug.internal.HashedWeakRef)>($r4);

     label07:
        goto label03;

     label08:
        $r5 = new java.lang.NullPointerException;

     label09:
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.debug.internal.HashedWeakRef<*>");

     label10:
        throw $r5;

     label11:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        return;

     label12:
        $r7 = new java.lang.IllegalStateException;

        $r8 = "Must be created with weakRefQueue = true";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        $r9 = (java.lang.Throwable) $r7;

        throw $r9;

     label13:
        $r1 := @caughtexception;

        goto label11;

        catch java.lang.InterruptedException from label04 to label05 with label13;
        catch java.lang.InterruptedException from label06 to label07 with label13;
        catch java.lang.InterruptedException from label09 to label10 with label13;
    }
}
