public final class kotlinx.coroutines.internal.ExceptionsConstuctorKt extends java.lang.Object
{
    private static final java.util.concurrent.locks.ReentrantReadWriteLock cacheLock;
    private static final java.util.WeakHashMap exceptionCtors;
    private static final int throwableFields;

    static void <clinit>()
    {
        int $i0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r0;
        java.util.WeakHashMap $r1;

        $i0 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCountOrDefault(java.lang.Class,int)>(class "Ljava/lang/Throwable;", -1);

        <kotlinx.coroutines.internal.ExceptionsConstuctorKt: int throwableFields> = $i0;

        $r0 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock> = $r0;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.WeakHashMap exceptionCtors> = $r1;

        return;
    }

    private static final kotlin.jvm.functions.Function1 createConstructor(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor $r0;
        java.lang.Class[] $r1;
        int $i0;
        java.lang.Class $r2;
        boolean $z0;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1 $r3;
        kotlin.jvm.functions.Function1 $r4;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2 $r5;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3 $r6;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4 $r7;

        $r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke $r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 == 0 goto label4;

        if $i0 == 1 goto label2;

        if $i0 == 2 goto label1;

        return null;

     label1:
        $r2 = $r1[0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/String;");

        if $z0 == 0 goto label5;

        $r2 = $r1[1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/Throwable;");

        if $z0 == 0 goto label5;

        $r3 = new kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1;

        specialinvoke $r3.<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: void <init>(java.lang.reflect.Constructor)>($r0);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        return $r4;

     label2:
        $r2 = $r1[0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/Throwable;");

        if $z0 == 0 goto label3;

        $r5 = new kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2;

        specialinvoke $r5.<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: void <init>(java.lang.reflect.Constructor)>($r0);

        $r4 = (kotlin.jvm.functions.Function1) $r5;

        return $r4;

     label3:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/String;");

        if $z0 == 0 goto label5;

        $r6 = new kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3;

        specialinvoke $r6.<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: void <init>(java.lang.reflect.Constructor)>($r0);

        $r4 = (kotlin.jvm.functions.Function1) $r6;

        return $r4;

     label4:
        $r7 = new kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4;

        specialinvoke $r7.<kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: void <init>(java.lang.reflect.Constructor)>($r0);

        $r4 = (kotlin.jvm.functions.Function1) $r7;

        return $r4;

     label5:
        return null;
    }

    private static final int fieldsCount(java.lang.Class, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r0, $r3;
        java.lang.reflect.Field[] $r1;
        java.lang.reflect.Field $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $i1 := @parameter1: int;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r1;

        $i2 = 0;

        $i3 = 0;

     label2:
        if $i2 >= $i0 goto label4;

        $r2 = $r1[$i2];

        $i4 = virtualinvoke $r2.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i4);

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label3;

        $i3 = $i3 + 1;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $i1 = $i1 + $i3;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r0 = $r3;

        if $r3 != null goto label1;

        return $i1;
    }

    static int fieldsCount$default(java.lang.Class, int, int, java.lang.Object)
    {
        java.lang.Object $r0;
        int $i0, $i1;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $i0 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCount(java.lang.Class,int)>($r1, $i0);

        return $i0;
    }

    private static final int fieldsCountOrDefault(java.lang.Class, int)
    {
        java.lang.Class $r0;
        int $i0, $i1;
        kotlin.Result$Companion $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        boolean $z0;
        java.lang.Number $r5;

        $r0 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.JvmClassMappingKt: kotlin.reflect.KClass getKotlinClass(java.lang.Class)>($r0);

     label1:
        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $i1 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCount$default(java.lang.Class,int,int,java.lang.Object)>($r0, 0, 1, null);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r4);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r3);

     label4:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        $r3 = $r2;

     label5:
        $r5 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        return $i0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final kotlin.jvm.functions.Function1 safeCtor(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$safeCtor$1 $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 = new kotlinx.coroutines.internal.ExceptionsConstuctorKt$safeCtor$1;

        specialinvoke $r1.<kotlinx.coroutines.internal.ExceptionsConstuctorKt$safeCtor$1: void <init>(kotlin.jvm.functions.Function1)>($r0);

        $r0 = (kotlin.jvm.functions.Function1) $r1;

        return $r0;
    }

    public static final java.lang.Throwable tryCopyException(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r5, $r15, $r24, $r25;
        boolean $z0;
        java.lang.Object $r1, $r4;
        kotlin.Result$Companion $r2;
        kotlinx.coroutines.CopyableThrowable $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock $r6;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r7;
        java.util.WeakHashMap $r8;
        java.lang.Class $r9;
        kotlin.jvm.functions.Function1 $r10, $r22;
        int $i0, $i1, $i2;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r11;
        java.util.Map $r12;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1 $r13;
        kotlin.Unit $r14;
        java.lang.reflect.Constructor[] $r16;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1 $r17;
        java.util.Comparator $r18;
        java.util.List $r19;
        java.util.Iterator $r20;
        java.lang.reflect.Constructor $r21;
        kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1 $r23;

        $r0 := @parameter0: java.lang.Throwable;

        $z0 = $r0 instanceof kotlinx.coroutines.CopyableThrowable;

        $r1 = null;

        if $z0 == 0 goto label07;

     label01:
        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = (kotlinx.coroutines.CopyableThrowable) $r0;

        $r0 = interfaceinvoke $r3.<kotlinx.coroutines.CopyableThrowable: java.lang.Throwable createCopy()>();

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r4 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r5);

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

     label04:
        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r4);

        if $z0 == 0 goto label05;

        goto label06;

     label05:
        $r1 = $r4;

     label06:
        $r0 = (java.lang.Throwable) $r1;

        return $r0;

     label07:
        $r6 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

     label08:
        $r8 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.WeakHashMap exceptionCtors>;

        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r8.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r10 = (kotlin.jvm.functions.Function1) $r1;

     label09:
        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        if $r10 != null goto label39;

        $i0 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt: int throwableFields>;

        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = 0;

        $i2 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCountOrDefault(java.lang.Class,int)>($r9, 0);

        if $i0 == $i2 goto label20;

        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        $i0 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>();

        if $i0 != 0 goto label10;

        $i0 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>();

        goto label11;

     label10:
        $i0 = 0;

     label11:
        $i2 = 0;

     label12:
        if $i2 >= $i0 goto label13;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $i2 = $i2 + 1;

        goto label12;

     label13:
        $r11 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label14:
        $r8 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.WeakHashMap exceptionCtors>;

        $r12 = (java.util.Map) $r8;

        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1 INSTANCE>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r13);

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label15:
        if $i1 >= $i0 goto label16;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label15;

     label16:
        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return null;

     label17:
        $r15 := @caughtexception;

     label18:
        if $i1 >= $i0 goto label19;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label18;

     label19:
        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r15;

     label20:
        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r17 = new kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1;

        specialinvoke $r17.<kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1: void <init>()>();

        $r18 = (java.util.Comparator) $r17;

        $r19 = staticinvoke <kotlin.collections.ArraysKt: java.util.List sortedWith(java.lang.Object[],java.util.Comparator)>($r16, $r18);

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

        $r10 = null;

     label21:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $r1 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.lang.reflect.Constructor) $r1;

        $r22 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstuctorKt: kotlin.jvm.functions.Function1 createConstructor(java.lang.reflect.Constructor)>($r21);

        $r10 = $r22;

        if $r22 == null goto label21;

     label22:
        $r6 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        $i0 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>();

        if $i0 != 0 goto label23;

        $i0 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>();

        goto label24;

     label23:
        $i0 = 0;

     label24:
        $i2 = 0;

     label25:
        if $i2 >= $i0 goto label26;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $i2 = $i2 + 1;

        goto label25;

     label26:
        $r11 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label27:
        $r8 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.WeakHashMap exceptionCtors>;

        $r12 = (java.util.Map) $r8;

        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

     label28:
        if $r10 != null goto label31;

     label29:
        $r23 = <kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1 INSTANCE>;

        $r22 = (kotlin.jvm.functions.Function1) $r23;

     label30:
        goto label32;

     label31:
        $r22 = $r10;

     label32:
        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r22);

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label33:
        if $i1 >= $i0 goto label34;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label33;

     label34:
        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        if $r10 != null goto label35;

        return null;

     label35:
        $r1 = interfaceinvoke $r10.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        $r0 = (java.lang.Throwable) $r1;

        return $r0;

     label36:
        $r24 := @caughtexception;

     label37:
        if $i1 >= $i0 goto label38;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label37;

     label38:
        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r24;

     label39:
        $r1 = interfaceinvoke $r10.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        $r0 = (java.lang.Throwable) $r1;

        return $r0;

     label40:
        $r25 := @caughtexception;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label08 to label09 with label40;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label27 to label28 with label36;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label32 to label33 with label36;
    }
}
