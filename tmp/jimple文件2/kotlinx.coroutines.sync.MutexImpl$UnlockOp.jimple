final class kotlinx.coroutines.sync.MutexImpl$UnlockOp extends kotlinx.coroutines.internal.AtomicOp
{
    public final kotlinx.coroutines.sync.MutexImpl$LockedQueue queue;

    public void <init>(kotlinx.coroutines.sync.MutexImpl$LockedQueue)
    {
        kotlinx.coroutines.sync.MutexImpl$UnlockOp r0;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$UnlockOp;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl$LockedQueue;

        specialinvoke r0.<kotlinx.coroutines.internal.AtomicOp: void <init>()>();

        r0.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: kotlinx.coroutines.sync.MutexImpl$LockedQueue queue> = $r1;

        return;
    }

    public volatile void complete(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$UnlockOp r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.sync.MutexImpl $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$UnlockOp;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.sync.MutexImpl) $r2;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: void complete(kotlinx.coroutines.sync.MutexImpl,java.lang.Object)>($r3, $r1);

        return;
    }

    public void complete(kotlinx.coroutines.sync.MutexImpl, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$UnlockOp r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$UnlockOp;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r3 := @parameter1: java.lang.Object;

        if $r3 != null goto label1;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_UNLOCKED$p()>();

        goto label2;

     label1:
        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: kotlinx.coroutines.sync.MutexImpl$LockedQueue queue>;

     label2:
        $r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r1, r0, $r3);

        return;
    }

    public volatile java.lang.Object prepare(java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$UnlockOp r0;
        java.lang.Object $r1;
        kotlinx.coroutines.sync.MutexImpl $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$UnlockOp;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlinx.coroutines.sync.MutexImpl) $r1;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: java.lang.Object prepare(kotlinx.coroutines.sync.MutexImpl)>($r2);

        return $r1;
    }

    public java.lang.Object prepare(kotlinx.coroutines.sync.MutexImpl)
    {
        kotlinx.coroutines.sync.MutexImpl$UnlockOp r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        kotlinx.coroutines.sync.MutexImpl$LockedQueue $r2;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$UnlockOp;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$UnlockOp: kotlinx.coroutines.sync.MutexImpl$LockedQueue queue>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.sync.MutexImpl$LockedQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getUNLOCK_FAIL$p()>();

        return $r3;
    }
}
