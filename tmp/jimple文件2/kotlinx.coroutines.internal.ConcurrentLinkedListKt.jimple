public final class kotlinx.coroutines.internal.ConcurrentLinkedListKt extends java.lang.Object
{
    private static final kotlinx.coroutines.internal.Symbol CLOSED;
    private static final int POINTERS_SHIFT;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        <kotlinx.coroutines.internal.ConcurrentLinkedListKt: int POINTERS_SHIFT> = 16;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("CLOSED");

        <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol CLOSED> = $r0;

        return;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getCLOSED$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol CLOSED>;

        return r0;
    }

    public static final kotlinx.coroutines.internal.ConcurrentLinkedListNode close(kotlinx.coroutines.internal.ConcurrentLinkedListNode)
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r0, $r3;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r0);

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r1 != $r2 goto label2;

        return $r0;

     label2:
        $r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r1;

        if $r3 != null goto label3;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean markAsClosed()>();

        if $z0 == 0 goto label1;

        return $r0;

     label3:
        $r0 = $r3;

        goto label1;
    }

    private static final java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment, long, kotlin.jvm.functions.Function2)
    {
        long $l0, $l1;
        kotlin.jvm.functions.Function2 $r0;
        kotlinx.coroutines.internal.Segment $r1, $r5;
        byte $b2;
        boolean $z0;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        java.lang.Long $r6;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $l0 := @parameter1: long;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

     label1:
        $l1 = virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: long getId()>();

        $b2 = $l1 cmp $l0;

        if $b2 < 0 goto label3;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: boolean getRemoved()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        return $r2;

     label3:
        $r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r1;

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r3);

        $r4 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r2 != $r4 goto label4;

        $r4 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        $r2 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        return $r2;

     label4:
        $r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r2;

        $r5 = (kotlinx.coroutines.internal.Segment) $r3;

        if $r5 == null goto label6;

     label5:
        $r1 = $r5;

        goto label1;

     label6:
        $l1 = virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: long getId()>();

        $l1 = $l1 + 1L;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r1);

        $r5 = (kotlinx.coroutines.internal.Segment) $r2;

        $r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r5;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: boolean trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r3);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: boolean getRemoved()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: void remove()>();

        goto label5;
    }

    private static void getCLOSED$annotations()
    {
        return;
    }
}
