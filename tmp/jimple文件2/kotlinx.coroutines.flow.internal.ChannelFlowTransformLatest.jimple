public final class kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest extends kotlinx.coroutines.flow.internal.ChannelFlowOperator
{
    private final kotlin.jvm.functions.Function3 transform;

    public void <init>(kotlin.jvm.functions.Function3, kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.Flow $r2;
        kotlin.coroutines.CoroutineContext $r3;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        $r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 := @parameter1: kotlinx.coroutines.flow.Flow;

        $r3 := @parameter2: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter3: int;

        $r4 := @parameter4: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowOperator: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r2, $r3, $i0, $r4);

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: kotlin.jvm.functions.Function3 transform> = $r1;

        return;
    }

    public void <init>(kotlin.jvm.functions.Function3, kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.Flow $r2;
        int $i0, $i1, $i2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.channels.BufferOverflow $r4;
        kotlin.jvm.internal.DefaultConstructorMarker $r5;
        kotlin.coroutines.EmptyCoroutineContext $r6;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        $r1 := @parameter0: kotlin.jvm.functions.Function3;

        $r2 := @parameter1: kotlinx.coroutines.flow.Flow;

        $r3 := @parameter2: kotlin.coroutines.CoroutineContext;

        $i1 := @parameter3: int;

        $r4 := @parameter4: kotlinx.coroutines.channels.BufferOverflow;

        $i0 := @parameter5: int;

        $r5 := @parameter6: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = $i0 & 4;

        if $i2 == 0 goto label1;

        $r6 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r3 = (kotlin.coroutines.CoroutineContext) $r6;

     label1:
        $i2 = $i0 & 8;

        if $i2 == 0 goto label2;

        $i1 = -2;

     label2:
        $i0 = $i0 & 16;

        if $i0 == 0 goto label3;

        $r4 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label3:
        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: void <init>(kotlin.jvm.functions.Function3,kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $r2, $r3, $i1, $r4);

        return;
    }

    public static final kotlin.jvm.functions.Function3 access$getTransform$p(kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest $r0;
        kotlin.jvm.functions.Function3 r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        r1 = $r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: kotlin.jvm.functions.Function3 transform>;

        return r1;
    }

    protected kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest r0, $r5;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlin.jvm.functions.Function3 $r3;
        kotlinx.coroutines.flow.Flow $r4;
        kotlinx.coroutines.flow.internal.ChannelFlow $r6;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r5 = new kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: kotlin.jvm.functions.Function3 transform>;

        $r4 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: kotlinx.coroutines.flow.Flow flow>;

        specialinvoke $r5.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: void <init>(kotlin.jvm.functions.Function3,kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r3, $r4, $r1, $i0, $r2);

        $r6 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r5;

        return $r6;
    }

    protected java.lang.Object flowCollect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        java.lang.AssertionError $r3;
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3 $r4;
        kotlin.jvm.functions.Function2 $r5;
        java.lang.Object $r6, $r7;
        kotlin.Unit r8;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof kotlinx.coroutines.flow.internal.SendingCollector;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r4 = new kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3: void <init>(kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest,kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r0, $r1, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        $r6 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: java.lang.Object flowScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r5, $r2);

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label3;

        return $r6;

     label3:
        r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r8;
    }
}
