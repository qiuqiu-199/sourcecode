public final class kotlinx.coroutines.flow.SharingStarted$Companion extends java.lang.Object
{
    static final kotlinx.coroutines.flow.SharingStarted$Companion $$INSTANCE;
    private static final kotlinx.coroutines.flow.SharingStarted Eagerly;
    private static final kotlinx.coroutines.flow.SharingStarted Lazily;

    static void <clinit>()
    {
        kotlinx.coroutines.flow.SharingStarted$Companion $r0;
        kotlinx.coroutines.flow.StartedEagerly $r1;
        kotlinx.coroutines.flow.SharingStarted $r2;
        kotlinx.coroutines.flow.StartedLazily $r3;

        $r0 = new kotlinx.coroutines.flow.SharingStarted$Companion;

        specialinvoke $r0.<kotlinx.coroutines.flow.SharingStarted$Companion: void <init>()>();

        <kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted$Companion $$INSTANCE> = $r0;

        $r1 = new kotlinx.coroutines.flow.StartedEagerly;

        specialinvoke $r1.<kotlinx.coroutines.flow.StartedEagerly: void <init>()>();

        $r2 = (kotlinx.coroutines.flow.SharingStarted) $r1;

        <kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted Eagerly> = $r2;

        $r3 = new kotlinx.coroutines.flow.StartedLazily;

        specialinvoke $r3.<kotlinx.coroutines.flow.StartedLazily: void <init>()>();

        $r2 = (kotlinx.coroutines.flow.SharingStarted) $r3;

        <kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted Lazily> = $r2;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.flow.SharingStarted$Companion r0;

        r0 := @this: kotlinx.coroutines.flow.SharingStarted$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static kotlinx.coroutines.flow.SharingStarted WhileSubscribed$default(kotlinx.coroutines.flow.SharingStarted$Companion, long, long, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.SharingStarted $r0;
        kotlinx.coroutines.flow.SharingStarted$Companion $r1;
        long $l0, $l1;
        int $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharingStarted$Companion;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $i2 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $l0 = 0L;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $l1 = 9223372036854775807L;

     label2:
        $r0 = virtualinvoke $r1.<kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted WhileSubscribed(long,long)>($l0, $l1);

        return $r0;
    }

    public final kotlinx.coroutines.flow.SharingStarted WhileSubscribed(long, long)
    {
        kotlinx.coroutines.flow.SharingStarted$Companion r0;
        long $l0, $l1;
        kotlinx.coroutines.flow.StartedWhileSubscribed $r1;
        kotlinx.coroutines.flow.SharingStarted $r2;

        r0 := @this: kotlinx.coroutines.flow.SharingStarted$Companion;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = new kotlinx.coroutines.flow.StartedWhileSubscribed;

        specialinvoke $r1.<kotlinx.coroutines.flow.StartedWhileSubscribed: void <init>(long,long)>($l0, $l1);

        $r2 = (kotlinx.coroutines.flow.SharingStarted) $r1;

        return $r2;
    }

    public final kotlinx.coroutines.flow.SharingStarted getEagerly()
    {
        kotlinx.coroutines.flow.SharingStarted$Companion r0;
        kotlinx.coroutines.flow.SharingStarted r1;

        r0 := @this: kotlinx.coroutines.flow.SharingStarted$Companion;

        r1 = <kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted Eagerly>;

        return r1;
    }

    public final kotlinx.coroutines.flow.SharingStarted getLazily()
    {
        kotlinx.coroutines.flow.SharingStarted$Companion r0;
        kotlinx.coroutines.flow.SharingStarted r1;

        r0 := @this: kotlinx.coroutines.flow.SharingStarted$Companion;

        r1 = <kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted Lazily>;

        return r1;
    }
}
