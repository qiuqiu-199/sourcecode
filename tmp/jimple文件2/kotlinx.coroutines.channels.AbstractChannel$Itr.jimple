final class kotlinx.coroutines.channels.AbstractChannel$Itr extends java.lang.Object implements kotlinx.coroutines.channels.ChannelIterator
{
    public final kotlinx.coroutines.channels.AbstractChannel channel;
    private java.lang.Object result;

    public void <init>(kotlinx.coroutines.channels.AbstractChannel)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        kotlinx.coroutines.channels.AbstractChannel $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel> = $r1;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r2;

        return;
    }

    public static final java.lang.Object access$hasNextSuspend(kotlinx.coroutines.channels.AbstractChannel$Itr, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r2;

        $r2 := @parameter0: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r0 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = specialinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object hasNextSuspend(kotlin.coroutines.Continuation)>($r0);

        return $r1;
    }

    private final boolean hasNextResult(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.channels.Closed $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label2;

        $r2 = (kotlinx.coroutines.channels.Closed) $r1;

        $r3 = $r2.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r3 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r2.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r3);

        throw $r3;

     label2:
        return 1;
    }

    private final java.lang.Object hasNextSuspend(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        kotlin.coroutines.Continuation $r1, $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;
        kotlinx.coroutines.CancellableContinuation $r4;
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r5;
        kotlinx.coroutines.channels.AbstractChannel $r6;
        kotlinx.coroutines.channels.Receive $r7;
        boolean $z0;
        java.lang.Object $r8, $r16;
        kotlinx.coroutines.channels.Closed $r9;
        java.lang.Throwable $r10;
        java.lang.Boolean $r11;
        kotlin.Result$Companion $r12;
        kotlinx.coroutines.internal.Symbol $r13;
        kotlin.jvm.functions.Function1 $r14;
        kotlin.coroutines.CoroutineContext $r15;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r2);

        $r4 = (kotlinx.coroutines.CancellableContinuation) $r3;

        $r5 = new kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        specialinvoke $r5.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: void <init>(kotlinx.coroutines.channels.AbstractChannel$Itr,kotlinx.coroutines.CancellableContinuation)>(r0, $r4);

     label1:
        $r6 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r7 = (kotlinx.coroutines.channels.Receive) $r5;

        $z0 = staticinvoke <kotlinx.coroutines.channels.AbstractChannel: boolean access$enqueueReceive(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)>($r6, $r7);

        if $z0 == 0 goto label2;

        $r6 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        staticinvoke <kotlinx.coroutines.channels.AbstractChannel: void access$removeReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)>($r6, $r4, $r7);

        goto label7;

     label2:
        $r6 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r8 = virtualinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r8);

        $z0 = $r8 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label4;

        $r9 = (kotlinx.coroutines.channels.Closed) $r8;

        $r10 = $r9.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r10 != null goto label3;

        $r2 = (kotlin.coroutines.Continuation) $r4;

        $r11 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(0);

        $r12 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r11);

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

        goto label7;

     label3:
        $r2 = (kotlin.coroutines.Continuation) $r4;

        $r10 = virtualinvoke $r9.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r12 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r10);

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

        goto label7;

     label4:
        $r13 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r8 == $r13 goto label1;

        $r11 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        $r6 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r14 = $r6.<kotlinx.coroutines.channels.AbstractChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r14 != null goto label5;

        $r14 = null;

        goto label6;

     label5:
        $r15 = interfaceinvoke $r4.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r14 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r14, $r8, $r15);

     label6:
        interfaceinvoke $r4.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r11, $r14);

     label7:
        $r8 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r16 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r16 goto label8;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label8:
        return $r8;
    }

    public final java.lang.Object getResult()
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        java.lang.Object r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        r1 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>;

        return r1;
    }

    public java.lang.Object hasNext(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        boolean $z0;
        java.lang.Boolean $r4;
        kotlinx.coroutines.channels.AbstractChannel $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object getResult()>();

        $r3 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r2 == $r3 goto label1;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object getResult()>();

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: boolean hasNextResult(java.lang.Object)>($r2);

        $r4 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r4;

     label1:
        $r5 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r2 = virtualinvoke $r5.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r2);

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object getResult()>();

        $r3 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r2 == $r3 goto label2;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object getResult()>();

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: boolean hasNextResult(java.lang.Object)>($r2);

        $r4 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r4;

     label2:
        $r2 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object hasNextSuspend(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public java.lang.Object next()
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.IllegalStateException $r3;
        kotlinx.coroutines.channels.Closed $r4;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 = r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 != 0 goto label2;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r1 == $r2 goto label1;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r2;

        return $r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("\'hasNext\' should be called prior to \'next\' invocation");

        throw $r3;

     label2:
        $r4 = (kotlinx.coroutines.channels.Closed) $r1;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r5);

        throw $r5;
    }

    public java.lang.Object next(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r2 := @parameter0: kotlin.coroutines.Continuation;

        $r1 = staticinvoke <kotlinx.coroutines.channels.ChannelIterator$DefaultImpls: java.lang.Object next(kotlinx.coroutines.channels.ChannelIterator,kotlin.coroutines.Continuation)>(r0, $r2);

        return $r1;
    }

    public final void setResult(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: java.lang.Object;

        r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r1;

        return;
    }
}
