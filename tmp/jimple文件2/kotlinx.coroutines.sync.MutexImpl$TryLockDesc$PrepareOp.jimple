final class kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp extends kotlinx.coroutines.internal.OpDescriptor
{
    private final kotlinx.coroutines.internal.AtomicOp atomicOp;
    final kotlinx.coroutines.sync.MutexImpl$TryLockDesc this$0;

    public void <init>(kotlinx.coroutines.sync.MutexImpl$TryLockDesc, kotlinx.coroutines.internal.AtomicOp)
    {
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp r0;
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc $r1;
        kotlinx.coroutines.internal.AtomicOp $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl$TryLockDesc;

        $r2 := @parameter1: kotlinx.coroutines.internal.AtomicOp;

        r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: kotlinx.coroutines.sync.MutexImpl$TryLockDesc this$0> = $r1;

        specialinvoke r0.<kotlinx.coroutines.internal.OpDescriptor: void <init>()>();

        r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: kotlinx.coroutines.internal.AtomicOp atomicOp> = $r2;

        return;
    }

    public kotlinx.coroutines.internal.AtomicOp getAtomicOp()
    {
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp r0;
        kotlinx.coroutines.internal.AtomicOp r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp;

        r1 = r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: kotlinx.coroutines.internal.AtomicOp atomicOp>;

        return r1;
    }

    public java.lang.Object perform(java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2, $r4;
        kotlinx.coroutines.internal.AtomicOp $r3;
        boolean $z0;
        kotlinx.coroutines.sync.MutexImpl $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp;

        $r2 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.AtomicOp: boolean isDecided()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Empty access$getEMPTY_UNLOCKED$p()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

     label2:
        if $r2 == null goto label3;

        $r5 = (kotlinx.coroutines.sync.MutexImpl) $r2;

        $r1 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r5, r0, $r4);

        return null;

     label3:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.sync.MutexImpl");

        throw $r6;
    }
}
