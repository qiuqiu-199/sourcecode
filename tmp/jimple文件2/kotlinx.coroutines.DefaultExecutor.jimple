public final class kotlinx.coroutines.DefaultExecutor extends kotlinx.coroutines.EventLoopImplBase implements java.lang.Runnable
{
    private static final int ACTIVE;
    private static final long DEFAULT_KEEP_ALIVE;
    private static final int FRESH;
    public static final kotlinx.coroutines.DefaultExecutor INSTANCE;
    private static final long KEEP_ALIVE_NANOS;
    private static final int SHUTDOWN_ACK;
    private static final int SHUTDOWN_REQ;
    public static final java.lang.String THREAD_NAME;
    private static volatile java.lang.Thread _thread;
    private static volatile int debugStatus;

    static void <clinit>()
    {
        java.lang.SecurityException $r0;
        kotlinx.coroutines.DefaultExecutor $r1;
        kotlinx.coroutines.EventLoop $r2;
        java.util.concurrent.TimeUnit $r3;
        java.lang.Long $r4;
        long $l0;

        <kotlinx.coroutines.DefaultExecutor: java.lang.String THREAD_NAME> = "kotlinx.coroutines.DefaultExecutor";

        <kotlinx.coroutines.DefaultExecutor: int SHUTDOWN_REQ> = 2;

        <kotlinx.coroutines.DefaultExecutor: int SHUTDOWN_ACK> = 3;

        <kotlinx.coroutines.DefaultExecutor: int FRESH> = 0;

        <kotlinx.coroutines.DefaultExecutor: long DEFAULT_KEEP_ALIVE> = 1000L;

        <kotlinx.coroutines.DefaultExecutor: int ACTIVE> = 1;

        $r1 = new kotlinx.coroutines.DefaultExecutor;

        specialinvoke $r1.<kotlinx.coroutines.DefaultExecutor: void <init>()>();

        <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE> = $r1;

        $r2 = (kotlinx.coroutines.EventLoop) $r1;

        staticinvoke <kotlinx.coroutines.EventLoop: void incrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)>($r2, 0, 1, null);

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label1:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,long)>("kotlinx.coroutines.DefaultExecutor.keepAlive", 1000L);

     label2:
        goto label4;

     label3:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1000L);

     label4:
        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $l0 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        <kotlinx.coroutines.DefaultExecutor: long KEEP_ALIVE_NANOS> = $l0;

        return;

     label5:
        $r0 := @caughtexception;

        goto label3;

        return;

        catch java.lang.SecurityException from label1 to label2 with label5;
    }

    private void <init>()
    {
        kotlinx.coroutines.DefaultExecutor r0;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void <init>()>();

        return;
    }

    private final void acknowledgeShutdownIfNeeded()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor r0;

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

     label2:
        if $z0 != 0 goto label3;

        exitmonitor r0;

        return;

     label3:
        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 3;

        virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: void resetAll()>();

        $r1 = (java.lang.Object) r0;

        virtualinvoke $r1.<java.lang.Object: void notifyAll()>();

     label4:
        exitmonitor r0;

        return;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private final java.lang.Thread createThreadSync()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        java.lang.Thread $r1;
        java.lang.Runnable $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor r0;

     label1:
        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 != null goto label2;

        $r1 = new java.lang.Thread;

        $r2 = (java.lang.Runnable) r0;

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r2, "kotlinx.coroutines.DefaultExecutor");

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = $r1;

        virtualinvoke $r1.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void get_thread$annotations()
    {
        return;
    }

    private final boolean isShutdownRequested()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        int $i0;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $i0 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i0 == 2 goto label2;

        if $i0 != 3 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private final boolean notifyStartup()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor r0;

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

     label2:
        if $z0 == 0 goto label3;

        exitmonitor r0;

        return 0;

     label3:
        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 1;

        $r1 = (java.lang.Object) r0;

        virtualinvoke $r1.<java.lang.Object: void notifyAll()>();

     label4:
        exitmonitor r0;

        return 1;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public final void ensureStarted$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        boolean $z0, $z1;
        java.lang.Thread $r1;
        java.lang.AssertionError $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        entermonitor r0;

     label01:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label05;

        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 != null goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 == 0 goto label04;

        goto label05;

     label04:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label05:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label09;

        $i0 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i0 == 0 goto label07;

        $i0 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i0 != 3 goto label06;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        if $z1 == 0 goto label08;

        goto label09;

     label08:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label09:
        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 0;

        specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()>();

     label10:
        $i0 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i0 != 0 goto label12;

        $r3 = (java.lang.Object) r0;

        virtualinvoke $r3.<java.lang.Object: void wait()>();

     label11:
        goto label10;

     label12:
        exitmonitor r0;

        return;

     label13:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label01 to label11 with label13;
    }

    protected java.lang.Thread getThread()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        java.lang.Thread $r1;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 != null goto label1;

        $r1 = specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()>();

     label1:
        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.DefaultExecutor r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.DisposableHandle $r3;
        long $l0;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DisposableHandle scheduleInvokeOnTimeout(long,java.lang.Runnable)>($l0, $r1);

        return $r3;
    }

    public final boolean isThreadPresent$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        java.lang.Thread $r1;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void run()
    {
        kotlinx.coroutines.DefaultExecutor r0;
        kotlinx.coroutines.ThreadLocalEventLoop $r1;
        kotlinx.coroutines.EventLoop $r2;
        kotlinx.coroutines.AbstractTimeSource $r3;
        boolean $z0;
        long $l0, $l1, $l2;
        byte $b3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $r1 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r2 = (kotlinx.coroutines.EventLoop) r0;

        virtualinvoke $r1.<kotlinx.coroutines.ThreadLocalEventLoop: void setEventLoop$kotlinx_coroutines_core(kotlinx.coroutines.EventLoop)>($r2);

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label01;

        goto label02;

     label01:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void registerTimeLoopThread()>();

     label02:
        $z0 = specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean notifyStartup()>();

     label03:
        if $z0 != 0 goto label06;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label04;

        goto label05;

     label04:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label05:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label38;

        virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

        return;

     label06:
        $l0 = 9223372036854775807L;

     label07:
        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $l1 = virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: long processNextEvent()>();

     label08:
        $l2 = $l1;

        $b3 = $l1 cmp 9223372036854775807L;

        if $b3 != 0 goto label22;

     label09:
        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

     label10:
        if $r3 != null goto label13;

     label11:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label12:
        goto label14;

     label13:
        $l2 = virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label14:
        $b3 = $l0 cmp 9223372036854775807L;

        if $b3 != 0 goto label17;

     label15:
        $l0 = <kotlinx.coroutines.DefaultExecutor: long KEEP_ALIVE_NANOS>;

     label16:
        $l0 = $l0 + $l2;

     label17:
        $l2 = $l0 - $l2;

        $b3 = $l2 cmp 0L;

        if $b3 > 0 goto label20;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label18;

        goto label19;

     label18:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label19:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label38;

        virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

        return;

     label20:
        $l1 = staticinvoke <kotlin.ranges.RangesKt: long coerceAtMost(long,long)>($l1, $l2);

     label21:
        $l2 = $l1;

        goto label23;

     label22:
        $l0 = 9223372036854775807L;

     label23:
        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label07;

     label24:
        $z0 = specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

     label25:
        if $z0 == 0 goto label28;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label26;

        goto label27;

     label26:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label27:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label38;

        virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

        return;

     label28:
        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

     label29:
        if $r3 != null goto label32;

     label30:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, $l2);

     label31:
        goto label07;

     label32:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void parkNanos(java.lang.Object,long)>(r0, $l2);

     label33:
        goto label07;

     label34:
        $r4 := @caughtexception;

        <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread> = null;

        specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()>();

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label35;

        goto label36;

     label35:
        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label36:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isEmpty()>();

        if $z0 != 0 goto label37;

        virtualinvoke r0.<kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()>();

     label37:
        throw $r4;

     label38:
        return;

        catch java.lang.Throwable from label02 to label03 with label34;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.Throwable from label09 to label10 with label34;
        catch java.lang.Throwable from label11 to label12 with label34;
        catch java.lang.Throwable from label13 to label14 with label34;
        catch java.lang.Throwable from label15 to label16 with label34;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.lang.Throwable from label24 to label25 with label34;
        catch java.lang.Throwable from label28 to label29 with label34;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
    }

    public final void shutdown(long)
    {
        kotlinx.coroutines.DefaultExecutor r0;
        long $l0, $l1, $l3;
        boolean $z0;
        int $i2;
        java.lang.Thread $r1;
        kotlinx.coroutines.AbstractTimeSource $r2;
        byte $b4;
        java.lang.Object $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.DefaultExecutor;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l1 + $l0;

        $z0 = specialinvoke r0.<kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()>();

        if $z0 != 0 goto label2;

        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 2;

     label2:
        $i2 = <kotlinx.coroutines.DefaultExecutor: int debugStatus>;

        if $i2 == 3 goto label7;

        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 == null goto label7;

        $r1 = <kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread>;

        if $r1 != null goto label3;

        goto label5;

     label3:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 != null goto label4;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

        goto label5;

     label4:
        virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: void unpark(java.lang.Thread)>($r1);

     label5:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l1 - $l3;

        $b4 = $l3 cmp 0L;

        if $b4 > 0 goto label6;

        goto label7;

     label6:
        $r3 = (java.lang.Object) r0;

        virtualinvoke $r3.<java.lang.Object: void wait(long)>($l0);

        goto label2;

     label7:
        <kotlinx.coroutines.DefaultExecutor: int debugStatus> = 0;

     label8:
        exitmonitor r0;

        return;

     label9:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label8 with label9;
    }
}
