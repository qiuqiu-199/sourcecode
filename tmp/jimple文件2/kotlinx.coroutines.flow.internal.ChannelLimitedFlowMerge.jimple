public final class kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge extends kotlinx.coroutines.flow.internal.ChannelFlow
{
    private final java.lang.Iterable flows;

    public void <init>(java.lang.Iterable, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge r0;
        java.lang.Iterable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: void <init>(kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r2, $i0, $r3);

        r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: java.lang.Iterable flows> = $r1;

        return;
    }

    public void <init>(java.lang.Iterable, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge r0;
        java.lang.Iterable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        int $i0, $i1, $i2;
        kotlinx.coroutines.channels.BufferOverflow $r3;
        kotlin.jvm.internal.DefaultConstructorMarker $r4;
        kotlin.coroutines.EmptyCoroutineContext $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        $i1 := @parameter4: int;

        $r4 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r2 = (kotlin.coroutines.CoroutineContext) $r5;

     label1:
        $i2 = $i1 & 4;

        if $i2 == 0 goto label2;

        $i0 = -2;

     label2:
        $i1 = $i1 & 8;

        if $i1 == 0 goto label3;

        $r3 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

     label3:
        specialinvoke r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: void <init>(java.lang.Iterable,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $r2, $i0, $r3);

        return;
    }

    protected java.lang.Object collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge r0;
        kotlinx.coroutines.channels.ProducerScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.internal.SendingCollector $r3;
        kotlinx.coroutines.channels.SendChannel $r4;
        java.lang.Iterable $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        kotlinx.coroutines.flow.Flow $r8;
        kotlinx.coroutines.CoroutineScope $r9;
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1 $r10;
        kotlin.jvm.functions.Function2 $r11;
        kotlin.Unit r12;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        $r1 := @parameter0: kotlinx.coroutines.channels.ProducerScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new kotlinx.coroutines.flow.internal.SendingCollector;

        $r4 = (kotlinx.coroutines.channels.SendChannel) $r1;

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.SendingCollector: void <init>(kotlinx.coroutines.channels.SendChannel)>($r4);

        $r5 = r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: java.lang.Iterable flows>;

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (kotlinx.coroutines.flow.Flow) $r7;

        $r9 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r10 = new kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1;

        specialinvoke $r10.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.internal.SendingCollector,kotlin.coroutines.Continuation)>($r8, $r3, null);

        $r11 = (kotlin.jvm.functions.Function2) $r10;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r9, null, null, $r11, 3, null);

        goto label1;

     label2:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;
    }

    protected kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge r0, $r4;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        java.lang.Iterable $r3;
        kotlinx.coroutines.flow.internal.ChannelFlow $r5;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = new kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: java.lang.Iterable flows>;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: void <init>(java.lang.Iterable,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r3, $r1, $i0, $r2);

        $r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r4;

        return $r5;
    }

    public kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge r0;
        kotlin.coroutines.CoroutineContext $r1;
        int $i0;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.channels.ReceiveChannel $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 = r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: kotlin.coroutines.CoroutineContext context>;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: int capacity>;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: kotlin.jvm.functions.Function2 getCollectToFun$kotlinx_coroutines_core()>();

        $r4 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: kotlinx.coroutines.channels.ReceiveChannel flowProduce(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlin.jvm.functions.Function2)>($r2, $r1, $i0, $r3);

        return $r4;
    }
}
