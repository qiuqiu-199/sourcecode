public class kotlinx.coroutines.channels.ArrayChannel extends kotlinx.coroutines.channels.AbstractChannel
{
    private java.lang.Object[] buffer;
    private final int capacity;
    private int head;
    private final java.util.concurrent.locks.ReentrantLock lock;
    private final kotlinx.coroutines.channels.BufferOverflow onBufferOverflow;
    private volatile int size;

    public void <init>(int, kotlinx.coroutines.channels.BufferOverflow, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        kotlinx.coroutines.internal.Symbol $r1;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlin.jvm.functions.Function1 $r3;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r4;
        java.lang.Object[] $r5;
        kotlin.Unit $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.Throwable $r10;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $i0 := @parameter0: int;

        $r2 := @parameter1: kotlinx.coroutines.channels.BufferOverflow;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void <init>(kotlin.jvm.functions.Function1)>($r3);

        r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity> = $i0;

        r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow> = $r2;

        $z0 = 1;

        if $i0 < 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock> = $r4;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 8);

        $r5 = newarray (java.lang.Object)[$i0];

        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        staticinvoke <kotlin.collections.ArraysKt: void fill$default(java.lang.Object[],java.lang.Object,int,int,int,java.lang.Object)>($r5, $r1, 0, 0, 6, null);

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer> = $r5;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = 0;

        return;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ArrayChannel capacity must be at least 1, but ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was specified");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        $r10 = (java.lang.Throwable) $r9;

        throw $r10;
    }

    private final void enqueueElement(int, java.lang.Object)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object[] $r2;
        kotlinx.coroutines.channels.BufferOverflow $r3, $r4;
        java.lang.AssertionError $r5;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

        if $i0 >= $i1 goto label1;

        specialinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: void ensureCapacity(int)>($i0);

        $r2 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $i0 = $i1 + $i0;

        $i1 = lengthof $r2;

        $i0 = $i0 % $i1;

        $r2[$i0] = $r1;

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r3 = r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r4 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        if $r3 != $r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $r2 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $i2 = lengthof $r2;

        $i2 = $i1 % $i2;

        $r2[$i2] = null;

        $i0 = $i0 + $i1;

        $i2 = lengthof $r2;

        $i0 = $i0 % $i2;

        $r2[$i0] = $r1;

        $i0 = $i1 + 1;

        $i1 = lengthof $r2;

        $i0 = $i0 % $i1;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int head> = $i0;

        return;
    }

    private final void ensureCapacity(int)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r1, $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.Symbol $r4;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $i0 := @parameter0: int;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label4;

        $i1 = lengthof $r1;

        $i1 = $i1 * 2;

        $i3 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i3);

        $r1 = newarray (java.lang.Object)[$i3];

        if $i0 <= 0 goto label3;

        $i4 = 0;

     label1:
        $i1 = $i4 + 1;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i2 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $i5 = $i2 + $i4;

        $i2 = lengthof $r2;

        $i2 = $i5 % $i2;

        $r3 = $r2[$i2];

        $r1[$i4] = $r3;

        if $i1 < $i0 goto label2;

        goto label3;

     label2:
        $i4 = $i1;

        goto label1;

     label3:
        $r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, $r4, $i0, $i3);

        r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer> = $r1;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int head> = 0;

     label4:
        return;
    }

    private final kotlinx.coroutines.internal.Symbol updateBufferSize(int)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        int $i0, $i1;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        int[] $r2;
        kotlin.NoWhenBranchMatchedException $r3;
        kotlinx.coroutines.internal.Symbol r4;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $i0 := @parameter0: int;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

        if $i0 >= $i1 goto label1;

        $i0 = $i0 + 1;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        return null;

     label1:
        $r1 = r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r2 = <kotlinx.coroutines.channels.ArrayChannel$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.channels.BufferOverflow: int ordinal()>();

        $i0 = $r2[$i0];

        if $i0 == 1 goto label4;

        if $i0 == 2 goto label3;

        if $i0 != 3 goto label2;

        return null;

     label2:
        $r3 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r3.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r3;

     label3:
        r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

        return r4;

     label4:
        r4 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_FAILED>;

        return r4;
    }

    protected boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        boolean $z0;
        kotlinx.coroutines.channels.Receive $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        java.lang.Throwable $r4;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.Receive;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)>($r1);

     label2:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.Object enqueueSend(kotlinx.coroutines.channels.Send)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.Send $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        java.lang.Throwable $r5;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r2 := @parameter0: kotlinx.coroutines.channels.Send;

        $r3 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object enqueueSend(kotlinx.coroutines.channels.Send)>($r2);

     label2:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label3:
        $r5 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.String getBufferDebugString()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        int $i0;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(buffer:capacity=");

        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",size=");

        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    protected final boolean isBufferAlwaysEmpty()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        return 0;
    }

    protected final boolean isBufferAlwaysFull()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        return 0;
    }

    protected final boolean isBufferEmpty()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        int $i0;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected final boolean isBufferFull()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        int $i0, $i1;
        kotlinx.coroutines.channels.BufferOverflow $r1, $r2;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

        if $i0 != $i1 goto label1;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r2 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isClosedForReceive()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.util.concurrent.locks.Lock $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isClosedForReceive()>();

     label2:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isEmpty()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.util.concurrent.locks.Lock $r2;
        java.lang.Throwable $r3;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: boolean isEmptyImpl()>();

     label2:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.Object offerInternal(java.lang.Object)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.Object $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        int $i0;
        kotlinx.coroutines.channels.Closed $r4;
        kotlinx.coroutines.internal.Symbol $r5, $r7;
        kotlinx.coroutines.channels.ReceiveOrClosed $r6;
        boolean $z0;
        java.lang.AssertionError $r8;
        kotlin.Unit $r9;
        java.lang.Throwable $r10;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label02:
        if $r4 != null goto label25;

     label03:
        $r5 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.internal.Symbol updateBufferSize(int)>($i0);

     label04:
        if $r5 != null goto label24;

        if $i0 != 0 goto label22;

     label05:
        $r6 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()>();

     label06:
        if $r6 != null goto label07;

        goto label22;

     label07:
        $z0 = $r6 instanceof kotlinx.coroutines.channels.Closed;

     label08:
        if $z0 == 0 goto label11;

     label09:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

     label10:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label11:
        $r5 = interfaceinvoke $r6.<kotlinx.coroutines.channels.ReceiveOrClosed: kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object,kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>($r1, null);

     label12:
        if $r5 == null goto label05;

     label13:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label14:
        if $z0 == 0 goto label20;

     label15:
        $r7 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

     label16:
        if $r5 != $r7 goto label17;

        $z0 = 1;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        if $z0 == 0 goto label19;

        goto label20;

     label19:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label20:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label21:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        interfaceinvoke $r6.<kotlinx.coroutines.channels.ReceiveOrClosed: void completeResumeReceive(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r6.<kotlinx.coroutines.channels.ReceiveOrClosed: java.lang.Object getOfferResult()>();

        return $r1;

     label22:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: void enqueueElement(int,java.lang.Object)>($i0, $r1);

        $r5 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

     label23:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label24:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label25:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label26:
        $r10 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label19 to label21 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
    }

    protected java.lang.Object offerSelectInternal(java.lang.Object, kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.Object $r1, $r9, $r12;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        int $i0;
        kotlinx.coroutines.channels.Closed $r5;
        kotlinx.coroutines.internal.Symbol $r6;
        kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc $r7;
        kotlinx.coroutines.internal.AtomicDesc $r8;
        kotlin.Unit $r10;
        kotlinx.coroutines.channels.ReceiveOrClosed $r11;
        boolean $z0;
        java.lang.String $r13;
        java.lang.IllegalStateException $r14;
        java.lang.Throwable $r15;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $r3 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label02:
        if $r5 != null goto label27;

     label03:
        $r6 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.internal.Symbol updateBufferSize(int)>($i0);

     label04:
        if $r6 != null goto label26;

        if $i0 != 0 goto label20;

     label05:
        $r7 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc describeTryOffer(java.lang.Object)>($r1);

        $r8 = (kotlinx.coroutines.internal.AtomicDesc) $r7;

        $r9 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: java.lang.Object performAtomicTrySelect(kotlinx.coroutines.internal.AtomicDesc)>($r8);

     label06:
        if $r9 != null goto label09;

     label07:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r9 = virtualinvoke $r7.<kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc: java.lang.Object getResult()>();

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        $r11 = (kotlinx.coroutines.channels.ReceiveOrClosed) $r9;

        interfaceinvoke $r11.<kotlinx.coroutines.channels.ReceiveOrClosed: void completeResumeReceive(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r11.<kotlinx.coroutines.channels.ReceiveOrClosed: java.lang.Object getOfferResult()>();

        return $r1;

     label09:
        $r6 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_FAILED>;

     label10:
        if $r9 != $r6 goto label11;

        goto label20;

     label11:
        $r12 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

     label12:
        if $r9 != $r12 goto label13;

        goto label05;

     label13:
        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label14:
        if $r9 == $r1 goto label18;

     label15:
        $z0 = $r9 instanceof kotlinx.coroutines.channels.Closed;

     label16:
        if $z0 == 0 goto label17;

        goto label18;

     label17:
        $r13 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("performAtomicTrySelect(describeTryOffer) returned ", $r9);

        $r14 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r15 = (java.lang.Throwable) $r14;

        throw $r15;

     label18:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

     label19:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r9;

     label20:
        $z0 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

     label21:
        if $z0 != 0 goto label24;

     label22:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label23:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label24:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: void enqueueElement(int,java.lang.Object)>($i0, $r1);

        $r6 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

     label25:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label26:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label27:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label28:
        $r15 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label17 to label19 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
    }

    protected void onCancelIdempotent(boolean)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        int $i0, $i1, $i2, $i3;
        kotlinx.coroutines.internal.Symbol $r1;
        kotlinx.coroutines.internal.UndeliveredElementException $r2;
        boolean $z0;
        kotlin.jvm.functions.Function1 $r3;
        java.util.concurrent.locks.ReentrantLock $r4;
        java.util.concurrent.locks.Lock $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        kotlin.Unit $r8;
        java.lang.Throwable $r9;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $z0 := @parameter0: boolean;

        $r3 = r0.<kotlinx.coroutines.channels.ArrayChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        $r4 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r5 = (java.util.concurrent.locks.Lock) $r4;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

     label02:
        $r2 = null;

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label13;

     label04:
        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i2 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $r7 = $r6[$i2];

     label05:
        if $r3 == null goto label09;

     label06:
        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

     label07:
        if $r7 == $r1 goto label09;

     label08:
        $r2 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException)>($r3, $r7, $r2);

     label09:
        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i2 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY>;

        $r6[$i2] = $r1;

        $i2 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

     label10:
        $i2 = $i2 + 1;

     label11:
        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i3 = lengthof $r6;

        $i2 = $i2 % $i3;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int head> = $i2;

     label12:
        $i1 = $i1 + 1;

        goto label03;

     label13:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = 0;

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label14:
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractChannel: void onCancelIdempotent(boolean)>($z0);

        if $r2 != null goto label15;

        return;

     label15:
        throw $r2;

     label16:
        $r9 := @caughtexception;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
    }

    protected java.lang.Object pollInternal()
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.Object $r1, $r7;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        int $i0, $i1;
        kotlinx.coroutines.channels.Closed $r4;
        java.lang.Object[] $r5;
        kotlinx.coroutines.channels.Send $r6, $r8;
        boolean $z0, $z1;
        kotlinx.coroutines.internal.Symbol $r9, $r10;
        java.lang.AssertionError $r11;
        kotlin.Unit $r12;
        java.lang.Throwable $r13;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

     label02:
        if $i0 != 0 goto label07;

     label03:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label04:
        $r1 = $r4;

        if $r4 != null goto label06;

     label05:
        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label06:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label07:
        $r5 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $r1 = $r5[$i1];

     label08:
        $r6 = null;

     label09:
        $r5[$i1] = null;

     label10:
        $i1 = $i0 + -1;

     label11:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i1;

        $r7 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

     label12:
        $z0 = 0;

        if $i0 != $i1 goto label27;

        $r6 = null;

     label13:
        $r8 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.Send takeFirstSendOrPeekClosed()>();

     label14:
        if $r8 != null goto label15;

        goto label27;

     label15:
        $r9 = virtualinvoke $r8.<kotlinx.coroutines.channels.Send: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(null);

     label16:
        if $r9 == null goto label25;

     label17:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label18:
        if $z1 == 0 goto label23;

     label19:
        $r10 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

     label20:
        if $r9 != $r10 goto label21;

        $z0 = 1;

     label21:
        if $z0 == 0 goto label22;

        goto label23;

     label22:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label23:
        $r7 = virtualinvoke $r8.<kotlinx.coroutines.channels.Send: java.lang.Object getPollResult()>();

     label24:
        $z0 = 1;

        $r6 = $r8;

        goto label27;

     label25:
        virtualinvoke $r8.<kotlinx.coroutines.channels.Send: void undeliveredElement()>();

     label26:
        $r6 = $r8;

        goto label13;

     label27:
        $r9 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label28:
        if $r7 == $r9 goto label34;

     label29:
        $z1 = $r7 instanceof kotlinx.coroutines.channels.Closed;

     label30:
        if $z1 != 0 goto label34;

     label31:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r5 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

     label32:
        $i0 = $i1 + $i0;

     label33:
        $i1 = lengthof $r5;

        $i0 = $i0 % $i1;

        $r5[$i0] = $r7;

     label34:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

     label35:
        $i0 = $i0 + 1;

     label36:
        $r5 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = lengthof $r5;

        $i0 = $i0 % $i1;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int head> = $i0;

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label37:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        if $z0 == 0 goto label39;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        virtualinvoke $r6.<kotlinx.coroutines.channels.Send: void completeResumeSend()>();

        return $r1;

     label38:
        $r13 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r13;

     label39:
        return $r1;

        catch java.lang.Throwable from label01 to label02 with label38;
        catch java.lang.Throwable from label03 to label04 with label38;
        catch java.lang.Throwable from label05 to label06 with label38;
        catch java.lang.Throwable from label07 to label08 with label38;
        catch java.lang.Throwable from label09 to label10 with label38;
        catch java.lang.Throwable from label11 to label12 with label38;
        catch java.lang.Throwable from label13 to label14 with label38;
        catch java.lang.Throwable from label15 to label16 with label38;
        catch java.lang.Throwable from label17 to label18 with label38;
        catch java.lang.Throwable from label19 to label20 with label38;
        catch java.lang.Throwable from label22 to label24 with label38;
        catch java.lang.Throwable from label25 to label26 with label38;
        catch java.lang.Throwable from label27 to label28 with label38;
        catch java.lang.Throwable from label29 to label30 with label38;
        catch java.lang.Throwable from label31 to label32 with label38;
        catch java.lang.Throwable from label33 to label35 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
    }

    protected java.lang.Object pollSelectInternal(kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.ArrayChannel r0;
        java.lang.Object $r1, $r7, $r8, $r11, $r14;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        int $i0, $i1;
        kotlinx.coroutines.channels.Closed $r5;
        java.lang.Object[] $r6;
        kotlinx.coroutines.channels.AbstractChannel$TryPollDesc $r9;
        kotlinx.coroutines.internal.AtomicDesc $r10;
        kotlinx.coroutines.channels.Send $r12;
        boolean $z0, $z1;
        kotlinx.coroutines.internal.Symbol $r13;
        java.lang.String $r15;
        java.lang.IllegalStateException $r16;
        java.lang.Throwable $r17;
        kotlin.Unit $r18;

        r0 := @this: kotlinx.coroutines.channels.ArrayChannel;

        $r2 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r3 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int size>;

     label02:
        if $i0 != 0 goto label07;

     label03:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label04:
        $r1 = $r5;

        if $r5 != null goto label06;

     label05:
        $r1 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label06:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label07:
        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $r1 = $r6[$i1];

     label08:
        $r7 = null;

     label09:
        $r6[$i1] = null;

     label10:
        $i1 = $i0 + -1;

     label11:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i1;

        $r8 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int capacity>;

     label12:
        if $i0 != $i1 goto label30;

     label13:
        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.AbstractChannel$TryPollDesc describeTryPoll()>();

        $r10 = (kotlinx.coroutines.internal.AtomicDesc) $r9;

        $r11 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: java.lang.Object performAtomicTrySelect(kotlinx.coroutines.internal.AtomicDesc)>($r10);

     label14:
        if $r11 != null goto label19;

     label15:
        $r11 = virtualinvoke $r9.<kotlinx.coroutines.channels.AbstractChannel$TryPollDesc: java.lang.Object getResult()>();

     label16:
        $r7 = $r11;

     label17:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        $r12 = (kotlinx.coroutines.channels.Send) $r11;

        $r11 = virtualinvoke $r12.<kotlinx.coroutines.channels.Send: java.lang.Object getPollResult()>();

     label18:
        $r8 = $r11;

        $z0 = 1;

        goto label31;

     label19:
        $r13 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label20:
        if $r11 != $r13 goto label21;

        goto label30;

     label21:
        $r14 = <kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC>;

     label22:
        if $r11 != $r14 goto label23;

        goto label13;

     label23:
        $r7 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label24:
        if $r11 != $r7 goto label27;

     label25:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $r6[$i0] = $r1;

     label26:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r11;

     label27:
        $z0 = $r11 instanceof kotlinx.coroutines.channels.Closed;

     label28:
        if $z0 == 0 goto label29;

        $z0 = 1;

        $r8 = $r11;

        $r7 = $r11;

        goto label31;

     label29:
        $r15 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("performAtomicTrySelect(describeTryOffer) returned ", $r11);

        $r16 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        $r17 = (java.lang.Throwable) $r16;

        throw $r17;

     label30:
        $z0 = 0;

     label31:
        $r13 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

     label32:
        if $r8 == $r13 goto label39;

     label33:
        $z1 = $r8 instanceof kotlinx.coroutines.channels.Closed;

     label34:
        if $z1 != 0 goto label39;

     label35:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

     label36:
        $i0 = $i1 + $i0;

     label37:
        $i1 = lengthof $r6;

        $i0 = $i0 % $i1;

        $r6[$i0] = $r8;

     label38:
        goto label43;

     label39:
        $z1 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

     label40:
        if $z1 != 0 goto label43;

     label41:
        r0.<kotlinx.coroutines.channels.ArrayChannel: int size> = $i0;

        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

        $r6[$i0] = $r1;

        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label42:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label43:
        $i0 = r0.<kotlinx.coroutines.channels.ArrayChannel: int head>;

     label44:
        $i0 = $i0 + 1;

     label45:
        $r6 = r0.<kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer>;

        $i1 = lengthof $r6;

        $i0 = $i0 % $i1;

        r0.<kotlinx.coroutines.channels.ArrayChannel: int head> = $i0;

        $r18 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label46:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        if $z0 == 0 goto label48;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        $r12 = (kotlinx.coroutines.channels.Send) $r7;

        virtualinvoke $r12.<kotlinx.coroutines.channels.Send: void completeResumeSend()>();

        return $r1;

     label47:
        $r17 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r17;

     label48:
        return $r1;

        catch java.lang.Throwable from label01 to label02 with label47;
        catch java.lang.Throwable from label03 to label04 with label47;
        catch java.lang.Throwable from label05 to label06 with label47;
        catch java.lang.Throwable from label07 to label08 with label47;
        catch java.lang.Throwable from label09 to label10 with label47;
        catch java.lang.Throwable from label11 to label12 with label47;
        catch java.lang.Throwable from label13 to label14 with label47;
        catch java.lang.Throwable from label15 to label16 with label47;
        catch java.lang.Throwable from label17 to label18 with label47;
        catch java.lang.Throwable from label19 to label20 with label47;
        catch java.lang.Throwable from label21 to label22 with label47;
        catch java.lang.Throwable from label23 to label24 with label47;
        catch java.lang.Throwable from label25 to label26 with label47;
        catch java.lang.Throwable from label27 to label28 with label47;
        catch java.lang.Throwable from label29 to label30 with label47;
        catch java.lang.Throwable from label31 to label32 with label47;
        catch java.lang.Throwable from label33 to label34 with label47;
        catch java.lang.Throwable from label35 to label36 with label47;
        catch java.lang.Throwable from label37 to label38 with label47;
        catch java.lang.Throwable from label39 to label40 with label47;
        catch java.lang.Throwable from label41 to label42 with label47;
        catch java.lang.Throwable from label43 to label44 with label47;
        catch java.lang.Throwable from label45 to label46 with label47;
    }
}
