public abstract class kotlinx.coroutines.EventLoopImplBase extends kotlinx.coroutines.EventLoopImplPlatform implements kotlinx.coroutines.Delay
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _delayed$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU;
    private volatile java.lang.Object _delayed;
    private volatile int _isCompleted;
    private volatile java.lang.Object _queue;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/EventLoopImplBase;", class "Ljava/lang/Object;", "_queue");

        <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/EventLoopImplBase;", class "Ljava/lang/Object;", "_delayed");

        <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _delayed$FU> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.EventLoopImplBase r0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        specialinvoke r0.<kotlinx.coroutines.EventLoopImplPlatform: void <init>()>();

        r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue> = null;

        r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed> = null;

        r0.<kotlinx.coroutines.EventLoopImplBase: int _isCompleted> = 0;

        return;
    }

    public static final boolean access$isCompleted(kotlinx.coroutines.EventLoopImplBase)
    {
        boolean $z0;
        kotlinx.coroutines.EventLoopImplBase $r0;

        $r0 := @parameter0: kotlinx.coroutines.EventLoopImplBase;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.EventLoopImplBase: boolean isCompleted()>();

        return $z0;
    }

    private final void closeQueue()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        boolean $z0;
        java.lang.AssertionError $r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.internal.Symbol $r4;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore $r5;
        java.lang.Runnable $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean isCompleted()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $r2 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue>;

        if $r2 != null goto label3;

        $r3 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $r4 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, null, $r4);

        if $z0 == 0 goto label2;

        return;

     label3:
        $z0 = $r2 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        if $z0 == 0 goto label4;

        $r5 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) $r2;

        virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean close()>();

        return;

     label4:
        $r4 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>();

        if $r2 != $r4 goto label5;

        return;

     label5:
        $r5 = new kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        specialinvoke $r5.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>(8, 1);

        if $r2 == null goto label6;

        $r6 = (java.lang.Runnable) $r2;

        virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>($r6);

        $r3 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r2, $r5);

        if $z0 == 0 goto label2;

        return;

     label6:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }");

        throw $r7;
    }

    private final java.lang.Runnable dequeue()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2, $r4;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore $r3;
        java.lang.Runnable $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

     label1:
        $r2 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue>;

        if $r2 != null goto label2;

        return null;

     label2:
        $z0 = $r2 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        if $z0 == 0 goto label5;

        if $r2 == null goto label4;

        $r3 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) $r2;

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object removeFirstOrNull()>();

        $r1 = <kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.Symbol REMOVE_FROZEN>;

        if $r4 == $r1 goto label3;

        $r5 = (java.lang.Runnable) $r4;

        return $r5;

     label3:
        $r6 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $r3 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>();

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r0, $r2, $r3);

        goto label1;

     label4:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeTaskQueueCore<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }>{ kotlinx.coroutines.EventLoop_commonKt.Queue<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }> }");

        throw $r7;

     label5:
        $r1 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>();

        if $r2 != $r1 goto label6;

        return null;

     label6:
        $r6 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r0, $r2, null);

        if $z0 == 0 goto label1;

        if $r2 == null goto label7;

        $r5 = (java.lang.Runnable) $r2;

        return $r5;

     label7:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }");

        throw $r7;
    }

    private final boolean enqueueImpl(java.lang.Runnable)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        java.lang.Runnable $r1, $r7;
        java.lang.Object $r2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore $r4;
        int $i0;
        java.lang.NullPointerException $r5;
        kotlinx.coroutines.internal.Symbol $r6;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $r1 := @parameter0: java.lang.Runnable;

     label01:
        $r2 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue>;

        $z0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean isCompleted()>();

        if $z0 == 0 goto label02;

        return 0;

     label02:
        if $r2 != null goto label03;

        $r3 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, null, $r1);

        if $z0 == 0 goto label01;

        return 1;

     label03:
        $z0 = $r2 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        if $z0 == 0 goto label08;

        if $r2 == null goto label07;

        $r4 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) $r2;

        $i0 = virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>($r1);

        if $i0 == 0 goto label06;

        if $i0 == 1 goto label05;

        if $i0 == 2 goto label04;

        goto label01;

     label04:
        return 0;

     label05:
        $r3 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $r4 = virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()>();

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r2, $r4);

        goto label01;

     label06:
        return 1;

     label07:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeTaskQueueCore<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }>{ kotlinx.coroutines.EventLoop_commonKt.Queue<java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }> }");

        throw $r5;

     label08:
        $r6 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>();

        if $r2 != $r6 goto label09;

        return 0;

     label09:
        $r4 = new kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        specialinvoke $r4.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: void <init>(int,boolean)>(8, 1);

        if $r2 == null goto label10;

        $r7 = (java.lang.Runnable) $r2;

        virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>($r7);

        virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)>($r1);

        $r3 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r2, $r4);

        if $z0 == 0 goto label01;

        return 1;

     label10:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.Runnable{ kotlinx.coroutines.RunnableKt.Runnable }");

        throw $r5;
    }

    private final boolean isCompleted()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        int i0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        i0 = r0.<kotlinx.coroutines.EventLoopImplBase: int _isCompleted>;

        z0 = (boolean) i0;

        return z0;
    }

    private final void rescheduleAllDelayed()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlinx.coroutines.AbstractTimeSource $r1;
        long $l0;
        java.lang.Object $r2;
        kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue $r3;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r4;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r5;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 != null goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        goto label2;

     label1:
        $l0 = virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label2:
        $r2 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        $r3 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r2;

        if $r3 != null goto label3;

        $r4 = null;

        goto label4;

     label3:
        $r5 = virtualinvoke $r3.<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: kotlinx.coroutines.internal.ThreadSafeHeapNode removeFirstOrNull()>();

        $r4 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r5;

     label4:
        if $r4 != null goto label5;

        return;

     label5:
        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void reschedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>($l0, $r4);

        goto label2;
    }

    private final int scheduleImpl(long, kotlinx.coroutines.EventLoopImplBase$DelayedTask)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r1;
        kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue $r2;
        long $l0;
        boolean $z0;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        int $i1;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.EventLoopImplBase$DelayedTask;

        $z0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean isCompleted()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        $r2 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r3;

        if $r2 != null goto label2;

        $r4 = <kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _delayed$FU>;

        $r2 = new kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue;

        specialinvoke $r2.<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: void <init>(long)>($l0);

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, null, $r2);

        $r3 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $r2 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r3;

     label2:
        $i1 = virtualinvoke $r1.<kotlinx.coroutines.EventLoopImplBase$DelayedTask: int scheduleTask(long,kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue,kotlinx.coroutines.EventLoopImplBase)>($l0, $r2, r0);

        return $i1;
    }

    private final void setCompleted(boolean)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        boolean $z0;
        int i0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $z0 := @parameter0: boolean;

        i0 = (int) $z0;

        r0.<kotlinx.coroutines.EventLoopImplBase: int _isCompleted> = i0;

        return;
    }

    private final boolean shouldUnpark(kotlinx.coroutines.EventLoopImplBase$DelayedTask)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r1;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r2, $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue $r4;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $r2 := @parameter0: kotlinx.coroutines.EventLoopImplBase$DelayedTask;

        $r3 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        $r4 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r3;

        if $r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke $r4.<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: kotlinx.coroutines.internal.ThreadSafeHeapNode peek()>();

        $r5 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r1;

     label2:
        if $r5 != $r2 goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.lang.Object delay(long, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        long $l0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.Delay$DefaultImpls: java.lang.Object delay(kotlinx.coroutines.Delay,long,kotlin.coroutines.Continuation)>(r0, $l0, $r1);

        return $r2;
    }

    public final void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void enqueue(java.lang.Runnable)>($r2);

        return;
    }

    public final void enqueue(java.lang.Runnable)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        java.lang.Runnable $r1;
        boolean $z0;
        kotlinx.coroutines.DefaultExecutor $r2;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $r1 := @parameter0: java.lang.Runnable;

        $z0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean enqueueImpl(java.lang.Runnable)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void unpark()>();

        return;

     label1:
        $r2 = <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>;

        virtualinvoke $r2.<kotlinx.coroutines.DefaultExecutor: void enqueue(java.lang.Runnable)>($r1);

        return;
    }

    protected long getNextTime()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        long $l0, $l2;
        byte $b1;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore $r2;
        kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue $r3;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r4;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r5;
        kotlinx.coroutines.AbstractTimeSource $r6;
        kotlinx.coroutines.internal.Symbol $r7;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplPlatform: long getNextTime()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label01;

        return 0L;

     label01:
        $r1 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue>;

        if $r1 != null goto label02;

        goto label03;

     label02:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        if $z0 == 0 goto label09;

        $r2 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) $r1;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean isEmpty()>();

        if $z0 != 0 goto label03;

        return 0L;

     label03:
        $r1 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        $r3 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r1;

        if $r3 != null goto label04;

        $r4 = null;

        goto label05;

     label04:
        $r5 = virtualinvoke $r3.<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: kotlinx.coroutines.internal.ThreadSafeHeapNode peek()>();

        $r4 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r5;

     label05:
        if $r4 != null goto label06;

        return 9223372036854775807L;

     label06:
        $l0 = $r4.<kotlinx.coroutines.EventLoopImplBase$DelayedTask: long nanoTime>;

        $r6 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r6 != null goto label07;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        goto label08;

     label07:
        $l2 = virtualinvoke $r6.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label08:
        $l0 = $l0 - $l2;

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceAtLeast(long,long)>($l0, 0L);

        return $l0;

     label09:
        $r7 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>();

        if $r1 != $r7 goto label10;

        return 9223372036854775807L;

     label10:
        return 0L;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.DisposableHandle $r3;
        long $l0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r3 = staticinvoke <kotlinx.coroutines.Delay$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnTimeout(kotlinx.coroutines.Delay,long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>(r0, $l0, $r1, $r2);

        return $r3;
    }

    protected boolean isEmpty()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue $r2;
        kotlinx.coroutines.internal.LockFreeTaskQueueCore $r3;
        kotlinx.coroutines.internal.Symbol $r4;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean isUnconfinedQueueEmpty()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        $r2 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r1;

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue>;

        if $r1 != null goto label4;

     label3:
        return 1;

     label4:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore;

        if $z0 == 0 goto label5;

        $r3 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) $r1;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean isEmpty()>();

        return $z0;

     label5:
        $r4 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()>();

        if $r1 != $r4 goto label6;

        goto label3;

     label6:
        return 0;
    }

    public long processNextEvent()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue $r2;
        kotlinx.coroutines.AbstractTimeSource $r3;
        long $l0;
        kotlinx.coroutines.internal.ThreadSafeHeap $r4;
        kotlinx.coroutines.internal.ThreadSafeHeapNode $r5, $r6;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r7;
        java.lang.Runnable $r8;
        java.lang.Throwable $r9;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean processUnconfinedEvent()>();

        if $z0 == 0 goto label01;

        return 0L;

     label01:
        $r1 = r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed>;

        $r2 = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) $r1;

        if $r2 == null goto label12;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: boolean isEmpty()>();

        if $z0 != 0 goto label12;

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 != null goto label02;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        goto label03;

     label02:
        $l0 = virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label03:
        $r4 = (kotlinx.coroutines.internal.ThreadSafeHeap) $r2;

        entermonitor $r4;

     label04:
        $r5 = virtualinvoke $r4.<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode firstImpl()>();

     label05:
        $r6 = null;

        if $r5 != null goto label06;

        exitmonitor $r4;

        goto label10;

     label06:
        $r7 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r5;

        $z0 = virtualinvoke $r7.<kotlinx.coroutines.EventLoopImplBase$DelayedTask: boolean timeToExecute(long)>($l0);

        if $z0 == 0 goto label07;

        $r8 = (java.lang.Runnable) $r7;

        $z0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean enqueueImpl(java.lang.Runnable)>($r8);

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label09;

        $r6 = virtualinvoke $r4.<kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeAtImpl(int)>(0);

        goto label09;

     label09:
        exitmonitor $r4;

     label10:
        $r7 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r6;

        if $r7 != null goto label03;

        goto label12;

     label11:
        $r9 := @caughtexception;

        exitmonitor $r4;

        throw $r9;

     label12:
        $r8 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Runnable dequeue()>();

        if $r8 == null goto label13;

        interfaceinvoke $r8.<java.lang.Runnable: void run()>();

        return 0L;

     label13:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: long getNextTime()>();

        return $l0;

        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label09 with label11;
    }

    protected final void resetAll()
    {
        kotlinx.coroutines.EventLoopImplBase r0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue> = null;

        r0.<kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed> = null;

        return;
    }

    public final void schedule(long, kotlinx.coroutines.EventLoopImplBase$DelayedTask)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r1;
        long $l0;
        int $i1;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.EventLoopImplBase$DelayedTask;

        $i1 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: int scheduleImpl(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>($l0, $r1);

        if $i1 == 0 goto label3;

        if $i1 == 1 goto label2;

        if $i1 != 2 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "unexpected result";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;

     label2:
        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void reschedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>($l0, $r1);

        return;

     label3:
        $z0 = specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: boolean shouldUnpark(kotlinx.coroutines.EventLoopImplBase$DelayedTask)>($r1);

        if $z0 == 0 goto label4;

        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void unpark()>();

     label4:
        return;
    }

    protected final kotlinx.coroutines.DisposableHandle scheduleInvokeOnTimeout(long, java.lang.Runnable)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        java.lang.Runnable $r1;
        long $l0, $l2;
        byte $b1;
        kotlinx.coroutines.AbstractTimeSource $r2;
        kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask $r3;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r4;
        kotlinx.coroutines.DisposableHandle $r5;
        kotlinx.coroutines.NonDisposableHandle $r6;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $l0 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: long delayToNanos(long)>($l0);

        $b1 = $l0 cmp 4611686018427387903L;

        if $b1 >= 0 goto label3;

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 != null goto label1;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        goto label2;

     label1:
        $l2 = virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label2:
        $r3 = new kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask;

        $l0 = $l0 + $l2;

        specialinvoke $r3.<kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask: void <init>(long,java.lang.Runnable)>($l0, $r1);

        $r4 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r3;

        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void schedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>($l2, $r4);

        $r5 = (kotlinx.coroutines.DisposableHandle) $r3;

        return $r5;

     label3:
        $r6 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        $r5 = (kotlinx.coroutines.DisposableHandle) $r6;

        return $r5;
    }

    public void scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        long $l0, $l2;
        byte $b1;
        kotlinx.coroutines.AbstractTimeSource $r2;
        kotlinx.coroutines.EventLoopImplBase$DelayedResumeTask $r3;
        kotlinx.coroutines.DisposableHandle $r4;
        kotlinx.coroutines.EventLoopImplBase$DelayedTask $r5;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $l0 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: long delayToNanos(long)>($l0);

        $b1 = $l0 cmp 4611686018427387903L;

        if $b1 >= 0 goto label3;

        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r2 != null goto label1;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        goto label2;

     label1:
        $l2 = virtualinvoke $r2.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

     label2:
        $r3 = new kotlinx.coroutines.EventLoopImplBase$DelayedResumeTask;

        $l0 = $l0 + $l2;

        specialinvoke $r3.<kotlinx.coroutines.EventLoopImplBase$DelayedResumeTask: void <init>(kotlinx.coroutines.EventLoopImplBase,long,kotlinx.coroutines.CancellableContinuation)>(r0, $l0, $r1);

        $r4 = (kotlinx.coroutines.DisposableHandle) $r3;

        staticinvoke <kotlinx.coroutines.CancellableContinuationKt: void disposeOnCancellation(kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.DisposableHandle)>($r1, $r4);

        $r5 = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) $r3;

        virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void schedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)>($l2, $r5);

     label3:
        return;
    }

    protected void shutdown()
    {
        kotlinx.coroutines.EventLoopImplBase r0;
        long $l0;
        kotlinx.coroutines.ThreadLocalEventLoop $r1;
        byte $b1;

        r0 := @this: kotlinx.coroutines.EventLoopImplBase;

        $r1 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        virtualinvoke $r1.<kotlinx.coroutines.ThreadLocalEventLoop: void resetEventLoop$kotlinx_coroutines_core()>();

        specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void setCompleted(boolean)>(1);

        specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void closeQueue()>();

     label1:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.EventLoopImplBase: long processNextEvent()>();

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label2;

        goto label1;

     label2:
        specialinvoke r0.<kotlinx.coroutines.EventLoopImplBase: void rescheduleAllDelayed()>();

        return;
    }
}
