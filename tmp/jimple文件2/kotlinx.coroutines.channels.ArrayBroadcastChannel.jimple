public final class kotlinx.coroutines.channels.ArrayBroadcastChannel extends kotlinx.coroutines.channels.AbstractSendChannel implements kotlinx.coroutines.channels.BroadcastChannel
{
    private volatile long _head;
    private volatile int _size;
    private volatile long _tail;
    private final java.lang.Object[] buffer;
    private final java.util.concurrent.locks.ReentrantLock bufferLock;
    private final int capacity;
    private final java.util.List subscribers;

    public void <init>(int)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        int $i0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.lang.Object[] $r2;
        java.util.List $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Throwable $r7;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $i0 := @parameter0: int;

        specialinvoke r0.<kotlinx.coroutines.channels.AbstractSendChannel: void <init>(kotlin.jvm.functions.Function1)>(null);

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int capacity> = $i0;

        $z0 = 1;

        if $i0 < 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.concurrent.locks.ReentrantLock bufferLock> = $r1;

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer> = $r2;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long _head> = 0L;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long _tail> = 0L;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int _size> = 0;

        $r3 = staticinvoke <kotlinx.coroutines.internal.ConcurrentKt: java.util.List subscriberList()>();

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers> = $r3;

        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ArrayBroadcastChannel capacity must be at least 1, but ");

        $i0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was specified");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        $r7 = (java.lang.Throwable) $r6;

        throw $r7;
    }

    public static final java.lang.Object access$elementAt(kotlinx.coroutines.channels.ArrayBroadcastChannel, long)
    {
        long $l0;
        java.lang.Object $r0;
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r1;

        $r1 := @parameter0: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $l0 := @parameter1: long;

        $r0 = specialinvoke $r1.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object elementAt(long)>($l0);

        return $r0;
    }

    public static final long access$getTail(kotlinx.coroutines.channels.ArrayBroadcastChannel)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r0;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $l0 = specialinvoke $r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getTail()>();

        return $l0;
    }

    private final boolean cancelInternal(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.lang.Throwable $r1;
        boolean $z0, $z1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber $r5;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: boolean close(java.lang.Throwable)>($r1);

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) $r4;

        virtualinvoke $r5.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean cancelInternal$kotlinx_coroutines_core(java.lang.Throwable)>($r1);

        goto label1;

     label2:
        return $z0;
    }

    private final void checkSubOffers()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber $r4;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = $z0;

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) $r3;

        $z1 = virtualinvoke $r4.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: boolean checkOffer()>();

        if $z1 == 0 goto label3;

        $z0 = 1;

        goto label1;

     label3:
        $z1 = 1;

        goto label2;

     label4:
        if $z0 != 0 goto label5;

        if $z1 != 0 goto label6;

     label5:
        staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: void updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,int,java.lang.Object)>(r0, null, null, 3, null);

     label6:
        return;
    }

    private final long computeMinHead()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        long $l0, $l1;
        boolean $z0;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber $r4;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $l0 = 9223372036854775807L;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) $r3;

        $l1 = virtualinvoke $r4.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceAtMost(long,long)>($l0, $l1);

        goto label1;

     label2:
        return $l0;
    }

    private final java.lang.Object elementAt(long)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.lang.Object[] $r1;
        long $l0, $l2;
        int $i1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $l0 := @parameter0: long;

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer>;

        $i1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int capacity>;

        $l2 = (long) $i1;

        $l0 = $l0 % $l2;

        $i1 = (int) $l0;

        $r2 = $r1[$i1];

        return $r2;
    }

    private final long getHead()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        long l0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        l0 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long _head>;

        return l0;
    }

    private final int getSize()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        int i0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        i0 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int _size>;

        return i0;
    }

    private final long getTail()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        long l0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        l0 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long _tail>;

        return l0;
    }

    private final void setHead(long)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        long $l0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $l0 := @parameter0: long;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long _head> = $l0;

        return;
    }

    private final void setSize(int)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        int $i0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $i0 := @parameter0: int;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int _size> = $i0;

        return;
    }

    private final void setTail(long)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        long $l0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $l0 := @parameter0: long;

        r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long _tail> = $l0;

        return;
    }

    private final void updateHead(kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.util.List $r1;
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber $r2, $r3;
        java.util.concurrent.locks.ReentrantLock $r4;
        java.util.concurrent.locks.Lock $r5;
        long $l0, $l1, $l3, $l4;
        boolean $z0, $z1;
        java.lang.Throwable $r6;
        byte $b2;
        int $i5, $i6;
        java.lang.Object[] $r7;
        kotlinx.coroutines.channels.Send $r8;
        kotlinx.coroutines.internal.Symbol $r9, $r10;
        java.lang.AssertionError $r11;
        java.lang.Object $r12;
        kotlin.Unit $r13;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r2 := @parameter0: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r3 := @parameter1: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

     label01:
        $r4 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.concurrent.locks.ReentrantLock bufferLock>;

        $r5 = (java.util.concurrent.locks.Lock) $r4;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

        if $r2 == null goto label05;

     label02:
        $l0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getTail()>();

        virtualinvoke $r2.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: void setSubHead(long)>($l0);

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label03:
        if $z0 != 0 goto label05;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label04:
        $r6 := @caughtexception;

        goto label49;

     label05:
        if $r3 == null goto label08;

     label06:
        $r1 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.List subscribers>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r3);

        $l0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getHead()>();

        $l1 = virtualinvoke $r3.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: long getSubHead()>();

     label07:
        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label08;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label08:
        $l3 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long computeMinHead()>();

        $l0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getTail()>();

        $l4 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getHead()>();

     label09:
        $l1 = $l4;

     label10:
        $l3 = staticinvoke <kotlin.ranges.RangesKt: long coerceAtMost(long,long)>($l3, $l0);

     label11:
        $b2 = $l3 cmp $l4;

        if $b2 > 0 goto label12;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label12:
        $i5 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getSize()>();

     label13:
        $b2 = $l1 cmp $l3;

        if $b2 >= 0 goto label48;

     label14:
        $r7 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer>;

        $i6 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label15:
        $l4 = (long) $i6;

     label16:
        $l4 = $l1 % $l4;

     label17:
        $i6 = (int) $l4;

     label18:
        $r7[$i6] = null;

        $i6 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label19:
        $z0 = 0;

        if $i5 < $i6 goto label20;

        $z1 = 1;

        goto label21;

     label20:
        $z1 = 0;

     label21:
        $l1 = $l1 + 1L;

     label22:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setHead(long)>($l1);

     label23:
        $i5 = $i5 + -1;

     label24:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setSize(int)>($i5);

     label25:
        if $z1 == 0 goto label13;

     label26:
        $r8 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: kotlinx.coroutines.channels.Send takeFirstSendOrPeekClosed()>();

     label27:
        if $r8 != null goto label28;

        goto label13;

     label28:
        $z1 = $r8 instanceof kotlinx.coroutines.channels.Closed;

     label29:
        if $z1 == 0 goto label30;

        goto label13;

     label30:
        $r9 = virtualinvoke $r8.<kotlinx.coroutines.channels.Send: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(null);

     label31:
        if $r9 == null goto label26;

     label32:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label33:
        if $z1 == 0 goto label38;

     label34:
        $r10 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

     label35:
        if $r9 != $r10 goto label36;

        $z0 = 1;

     label36:
        if $z0 == 0 goto label37;

        goto label38;

     label37:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label38:
        $r7 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer>;

        $i6 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label39:
        $l1 = (long) $i6;

     label40:
        $l1 = $l0 % $l1;

     label41:
        $i6 = (int) $l1;

     label42:
        $r12 = virtualinvoke $r8.<kotlinx.coroutines.channels.Send: java.lang.Object getPollResult()>();

        $r7[$i6] = $r12;

     label43:
        $i5 = $i5 + 1;

     label44:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setSize(int)>($i5);

     label45:
        $l0 = $l0 + 1L;

     label46:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setTail(long)>($l0);

        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label47:
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        virtualinvoke $r8.<kotlinx.coroutines.channels.Send: void completeResumeSend()>();

        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void checkSubOffers()>();

        $r2 = null;

        $r3 = null;

        goto label01;

     label48:
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label49:
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
        catch java.lang.Throwable from label16 to label17 with label04;
        catch java.lang.Throwable from label18 to label19 with label04;
        catch java.lang.Throwable from label22 to label23 with label04;
        catch java.lang.Throwable from label24 to label25 with label04;
        catch java.lang.Throwable from label26 to label27 with label04;
        catch java.lang.Throwable from label28 to label29 with label04;
        catch java.lang.Throwable from label30 to label31 with label04;
        catch java.lang.Throwable from label32 to label33 with label04;
        catch java.lang.Throwable from label34 to label35 with label04;
        catch java.lang.Throwable from label37 to label39 with label04;
        catch java.lang.Throwable from label40 to label41 with label04;
        catch java.lang.Throwable from label42 to label43 with label04;
        catch java.lang.Throwable from label44 to label45 with label04;
        catch java.lang.Throwable from label46 to label47 with label04;
    }

    static void updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, int, java.lang.Object)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel $r0;
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        $r0 := @parameter0: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter1: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $r2 := @parameter2: kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = null;

     label1:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $r2 = null;

     label2:
        specialinvoke $r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void updateHead(kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)>($r1, $r2);

        return;
    }

    public void cancel(java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.util.concurrent.CancellationException $r1;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $r2 = (java.lang.Throwable) $r1;

        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: boolean cancelInternal(java.lang.Throwable)>($r2);

        return;
    }

    public boolean cancel(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: boolean cancelInternal(java.lang.Throwable)>($r1);

        return $z0;
    }

    public boolean close(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        boolean $z0;
        java.lang.Throwable $r1;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.AbstractSendChannel: boolean close(java.lang.Throwable)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void checkSubOffers()>();

        return 1;
    }

    protected java.lang.String getBufferDebugString()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.lang.StringBuilder $r1;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(buffer:capacity=");

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer>;

        $i0 = lengthof $r2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",size=");

        $i0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getSize()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public final int getCapacity()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        int i0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        i0 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int capacity>;

        return i0;
    }

    protected boolean isBufferAlwaysFull()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        return 0;
    }

    protected boolean isBufferFull()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        int $i0, $i1;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $i1 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getSize()>();

        $i0 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int capacity>;

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected java.lang.Object offerInternal(java.lang.Object)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.lang.Object $r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Lock $r3;
        kotlinx.coroutines.channels.Closed $r4;
        int $i0, $i1;
        long $l2, $l3;
        java.lang.Object[] $r5;
        kotlin.Unit $r6;
        java.lang.Throwable $r7;
        kotlinx.coroutines.internal.Symbol r8;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.concurrent.locks.ReentrantLock bufferLock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label02:
        if $r4 != null goto label17;

     label03:
        $i0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getSize()>();

        $i1 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label04:
        if $i0 < $i1 goto label07;

     label05:
        r8 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_FAILED>;

     label06:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return r8;

     label07:
        $l2 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getTail()>();

        $r5 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer>;

        $i1 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label08:
        $l3 = (long) $i1;

     label09:
        $l3 = $l2 % $l3;

     label10:
        $i1 = (int) $l3;

     label11:
        $r5[$i1] = $r1;

     label12:
        $i0 = $i0 + 1;

     label13:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setSize(int)>($i0);

     label14:
        $l2 = $l2 + 1L;

     label15:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setTail(long)>($l2);

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label16:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void checkSubOffers()>();

        r8 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

        return r8;

     label17:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label18:
        $r7 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
    }

    protected java.lang.Object offerSelectInternal(java.lang.Object, kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        java.lang.Object $r1;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Lock $r4;
        kotlinx.coroutines.channels.Closed $r5;
        int $i0, $i1;
        boolean $z0;
        long $l2, $l3;
        java.lang.Object[] $r6;
        kotlin.Unit $r7;
        java.lang.Throwable $r8;
        kotlinx.coroutines.internal.Symbol r9;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $r3 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.util.concurrent.locks.ReentrantLock bufferLock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

     label02:
        if $r5 != null goto label21;

     label03:
        $i0 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getSize()>();

        $i1 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label04:
        if $i0 < $i1 goto label07;

     label05:
        r9 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_FAILED>;

     label06:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return r9;

     label07:
        $z0 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect()>();

     label08:
        if $z0 != 0 goto label11;

     label09:
        $r1 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getALREADY_SELECTED()>();

     label10:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label11:
        $l2 = specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: long getTail()>();

        $r6 = r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: java.lang.Object[] buffer>;

        $i1 = virtualinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: int getCapacity()>();

     label12:
        $l3 = (long) $i1;

     label13:
        $l3 = $l2 % $l3;

     label14:
        $i1 = (int) $l3;

     label15:
        $r6[$i1] = $r1;

     label16:
        $i0 = $i0 + 1;

     label17:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setSize(int)>($i0);

     label18:
        $l2 = $l2 + 1L;

     label19:
        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void setTail(long)>($l2);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label20:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        specialinvoke r0.<kotlinx.coroutines.channels.ArrayBroadcastChannel: void checkSubOffers()>();

        r9 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS>;

        return r9;

     label21:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r5;

     label22:
        $r8 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
    }

    public kotlinx.coroutines.channels.ReceiveChannel openSubscription()
    {
        kotlinx.coroutines.channels.ArrayBroadcastChannel r0;
        kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r2;

        r0 := @this: kotlinx.coroutines.channels.ArrayBroadcastChannel;

        $r1 = new kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber;

        specialinvoke $r1.<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber: void <init>(kotlinx.coroutines.channels.ArrayBroadcastChannel)>(r0);

        staticinvoke <kotlinx.coroutines.channels.ArrayBroadcastChannel: void updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber,int,java.lang.Object)>(r0, $r1, null, 2, null);

        $r2 = (kotlinx.coroutines.channels.ReceiveChannel) $r1;

        return $r2;
    }
}
