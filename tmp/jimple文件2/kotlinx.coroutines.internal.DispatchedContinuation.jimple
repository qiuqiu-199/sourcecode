public final class kotlinx.coroutines.internal.DispatchedContinuation extends kotlinx.coroutines.DispatchedTask implements kotlin.coroutines.jvm.internal.CoroutineStackFrame, kotlin.coroutines.Continuation
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU;
    private volatile java.lang.Object _reusableCancellableContinuation;
    public java.lang.Object _state;
    public final kotlin.coroutines.Continuation continuation;
    public final java.lang.Object countOrElement;
    public final kotlinx.coroutines.CoroutineDispatcher dispatcher;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/DispatchedContinuation;", class "Ljava/lang/Object;", "_reusableCancellableContinuation");

        <kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.CoroutineDispatcher, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        kotlin.coroutines.CoroutineContext $r4;
        java.lang.Object $r5;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlinx.coroutines.DispatchedTask: void <init>(int)>(-1);

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher> = $r2;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation> = $r1;

        $r3 = staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>();

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r3;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>($r4);

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement> = $r5;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation> = null;

        return;
    }

    private final kotlinx.coroutines.CancellableContinuationImpl getReusableCancellableContinuation()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl $r2;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation>;

        $z0 = $r1 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CancellableContinuationImpl) $r1;

        return $r2;

     label1:
        return null;
    }

    public static void get_state$kotlinx_coroutines_core$annotations()
    {
        return;
    }

    public final void awaitReusability()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

     label1:
        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation>;

        $r2 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        if $r1 == $r2 goto label1;

        return;
    }

    public void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object, java.lang.Throwable)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Throwable $r1;
        boolean $z0;
        java.lang.Object $r2;
        kotlinx.coroutines.CompletedWithCancellation $r3;
        kotlin.jvm.functions.Function1 $r4;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Throwable;

        $z0 = $r2 instanceof kotlinx.coroutines.CompletedWithCancellation;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.CompletedWithCancellation) $r2;

        $r4 = $r3.<kotlinx.coroutines.CompletedWithCancellation: kotlin.jvm.functions.Function1 onCancellation>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

     label1:
        return;
    }

    public final kotlinx.coroutines.CancellableContinuationImpl claimReusableCancellableContinuation()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.CancellableContinuationImpl $r4;
        java.lang.String $r5;
        java.lang.IllegalStateException $r6;
        java.lang.Throwable $r7;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

     label1:
        $r2 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation>;

        if $r2 != null goto label2;

        $r1 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation> = $r1;

        return null;

     label2:
        $z0 = $r2 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        if $z0 == 0 goto label3;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU>;

        $r1 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r2, $r1);

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.CancellableContinuationImpl) $r2;

        return $r4;

     label3:
        $r1 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        if $r2 != $r1 goto label4;

        goto label1;

     label4:
        $z0 = $r2 instanceof java.lang.Throwable;

        if $z0 == 0 goto label5;

        goto label1;

     label5:
        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Inconsistent state ", $r2);

        $r6 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r7 = (java.lang.Throwable) $r6;

        throw $r7;
    }

    public final void dispatchYield$kotlinx_coroutines_core(kotlin.coroutines.CoroutineContext, java.lang.Object)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        java.lang.Runnable $r4;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Object;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r2;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r3 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r4 = (java.lang.Runnable) r0;

        virtualinvoke $r3.<kotlinx.coroutines.CoroutineDispatcher: void dispatchYield(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r4);

        return;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = (kotlin.coroutines.Continuation) r0;

        return $r1;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        return null;
    }

    public final boolean isReusable()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean postponeCancellation(java.lang.Throwable)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Throwable $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: java.lang.Throwable;

     label1:
        $r2 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation>;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label2;

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU>;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r3, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        $z0 = $r2 instanceof java.lang.Throwable;

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r4 = <kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, null);

        if $z0 == 0 goto label1;

        return 0;
    }

    public final void release()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlinx.coroutines.CancellableContinuationImpl $r1;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: void awaitReusability()>();

        $r1 = specialinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl getReusableCancellableContinuation()>();

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$kotlinx_coroutines_core()>();

        return;
    }

    public final void resumeCancellableWith(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Object $r1, $r3;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        kotlin.coroutines.CoroutineContext $r5;
        boolean $z0;
        java.lang.Runnable $r6;
        kotlinx.coroutines.ThreadLocalEventLoop $r7;
        kotlinx.coroutines.EventLoop $r8;
        kotlinx.coroutines.DispatchedTask $r9;
        kotlinx.coroutines.Job$Key $r10;
        kotlin.coroutines.CoroutineContext$Key $r11;
        kotlin.coroutines.CoroutineContext$Element $r12;
        kotlinx.coroutines.Job $r13;
        java.util.concurrent.CancellationException $r14;
        java.lang.Throwable $r15, $r21, $r22;
        kotlin.coroutines.Continuation $r16;
        kotlin.Result$Companion $r17;
        kotlinx.coroutines.internal.Symbol $r18;
        kotlinx.coroutines.UndispatchedCoroutine $r19;
        kotlin.Unit $r20;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlin.jvm.functions.Function1)>($r1, $r2);

        $r4 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>($r5);

        if $z0 == 0 goto label01;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r3;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r4 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r6 = (java.lang.Runnable) r0;

        virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r5, $r6);

        return;

     label01:
        staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $r7 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r8 = virtualinvoke $r7.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        $z0 = virtualinvoke $r8.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label02;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r3;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r9 = (kotlinx.coroutines.DispatchedTask) r0;

        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r9);

        return;

     label02:
        $r9 = (kotlinx.coroutines.DispatchedTask) r0;

        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label03:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r10 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r11 = (kotlin.coroutines.CoroutineContext$Key) $r10;

        $r12 = interfaceinvoke $r5.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r11);

        $r13 = (kotlinx.coroutines.Job) $r12;

     label04:
        if $r13 == null goto label09;

     label05:
        $z0 = interfaceinvoke $r13.<kotlinx.coroutines.Job: boolean isActive()>();

     label06:
        if $z0 != 0 goto label09;

     label07:
        $r14 = interfaceinvoke $r13.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        $r15 = (java.lang.Throwable) $r14;

        virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>($r3, $r15);

        $r16 = (kotlin.coroutines.Continuation) r0;

        $r17 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = (java.lang.Throwable) $r14;

        $r3 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r15);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r3);

        interfaceinvoke $r16.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r3);

     label08:
        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        if $z0 != 0 goto label31;

     label11:
        $r16 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r3 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r5 = interfaceinvoke $r16.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r5, $r3);

        $r18 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

     label12:
        if $r3 == $r18 goto label15;

     label13:
        $r19 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r16, $r5, $r3);

     label14:
        goto label16;

     label15:
        $r19 = null;

     label16:
        $r16 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        interfaceinvoke $r16.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        $r20 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label18:
        if $r19 == null goto label21;

     label19:
        $z0 = virtualinvoke $r19.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

     label20:
        if $z0 == 0 goto label22;

     label21:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r5, $r3);

     label22:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

     label23:
        goto label31;

     label24:
        $r15 := @caughtexception;

     label25:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label26:
        if $r19 == null goto label29;

     label27:
        $z0 = virtualinvoke $r19.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

     label28:
        if $z0 == 0 goto label30;

     label29:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r5, $r3);

     label30:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r15;

     label31:
        $z0 = virtualinvoke $r8.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label32:
        if $z0 != 0 goto label31;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        goto label36;

     label33:
        $r21 := @caughtexception;

     label34:
        virtualinvoke $r9.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r21, null);

     label35:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label36:
        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label37:
        $r22 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r22;

        catch java.lang.Throwable from label03 to label04 with label33;
        catch java.lang.Throwable from label05 to label06 with label33;
        catch java.lang.Throwable from label07 to label08 with label33;
        catch java.lang.Throwable from label11 to label12 with label33;
        catch java.lang.Throwable from label13 to label14 with label33;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Throwable from label19 to label20 with label33;
        catch java.lang.Throwable from label21 to label23 with label33;
        catch java.lang.Throwable from label25 to label26 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch java.lang.Throwable from label29 to label32 with label33;
        catch java.lang.Throwable from label34 to label35 with label37;
    }

    public final boolean resumeCancelled(java.lang.Object)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Object $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.Job$Key $r3;
        kotlin.coroutines.CoroutineContext$Key $r4;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlinx.coroutines.Job $r6;
        boolean $z0;
        java.util.concurrent.CancellationException $r7;
        java.lang.Throwable $r8;
        kotlin.coroutines.Continuation $r9;
        kotlin.Result$Companion $r10;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r3;

        $r5 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r4);

        $r6 = (kotlinx.coroutines.Job) $r5;

        if $r6 == null goto label1;

        $z0 = interfaceinvoke $r6.<kotlinx.coroutines.Job: boolean isActive()>();

        if $z0 != 0 goto label1;

        $r7 = interfaceinvoke $r6.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        $r8 = (java.lang.Throwable) $r7;

        virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>($r1, $r8);

        $r9 = (kotlin.coroutines.Continuation) r0;

        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        interfaceinvoke $r9.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return 1;

     label1:
        return 0;
    }

    public final void resumeUndispatchedWith(java.lang.Object)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2, $r3;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.internal.Symbol $r5;
        kotlinx.coroutines.UndispatchedCoroutine $r6;
        kotlin.Unit $r7;
        boolean $z0;
        java.lang.Throwable $r8;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r3 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r4, $r3);

        $r5 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

        if $r3 == $r5 goto label1;

        $r6 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r4, $r3);

        goto label2;

     label1:
        $r6 = null;

     label2:
        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if $r6 == null goto label4;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if $z0 == 0 goto label5;

     label4:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r4, $r3);

     label5:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label6:
        $r8 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        if $r6 == null goto label7;

        $z0 = virtualinvoke $r6.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if $z0 == 0 goto label8;

     label7:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r4, $r3);

     label8:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label6;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2, $r4;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.CoroutineDispatcher $r5;
        boolean $z0;
        java.lang.Runnable $r6;
        kotlinx.coroutines.ThreadLocalEventLoop $r7;
        kotlinx.coroutines.EventLoop $r8;
        kotlinx.coroutines.DispatchedTask $r9;
        kotlin.Unit $r10;
        java.lang.Throwable $r11, $r12, $r13;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r3 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState$default(java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, null, 1, null);

        $r5 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $z0 = virtualinvoke $r5.<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>($r3);

        if $z0 == 0 goto label01;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r4;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 0;

        $r5 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r6 = (java.lang.Runnable) r0;

        virtualinvoke $r5.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r3, $r6);

        return;

     label01:
        staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $r7 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r8 = virtualinvoke $r7.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        $z0 = virtualinvoke $r8.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label02;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r4;

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 0;

        $r9 = (kotlinx.coroutines.DispatchedTask) r0;

        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r9);

        return;

     label02:
        $r9 = (kotlinx.coroutines.DispatchedTask) r0;

        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label03:
        $r3 = virtualinvoke r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r4 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r4);

     label04:
        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r4);

     label06:
        $z0 = virtualinvoke $r8.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label07:
        if $z0 != 0 goto label06;

        goto label12;

     label08:
        $r11 := @caughtexception;

     label09:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r3, $r4);

        throw $r11;

     label10:
        $r12 := @caughtexception;

     label11:
        virtualinvoke $r9.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r12, null);

     label12:
        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        return;

     label13:
        $r13 := @caughtexception;

        virtualinvoke $r8.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        throw $r13;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public java.lang.Object takeState$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.AssertionError $r3;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r2 = staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>();

        if $r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r2 = staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()>();

        r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r2;

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        java.lang.StringBuilder $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.String $r4;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DispatchedContinuation[");

        $r2 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String toDebugString(kotlin.coroutines.Continuation)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public final java.lang.Throwable tryReleaseClaimedContinuation(kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.internal.DispatchedContinuation r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

     label1:
        $r2 = r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation>;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        if $r2 != $r3 goto label2;

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU>;

        $r3 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r3, $r1);

        if $z0 == 0 goto label1;

        return null;

     label2:
        $z0 = $r2 instanceof java.lang.Throwable;

        if $z0 == 0 goto label4;

        $r4 = <kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, null);

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Throwable) $r2;

        return $r5;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = "Failed requirement.";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        $r5 = (java.lang.Throwable) $r6;

        throw $r5;

     label4:
        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Inconsistent state ", $r2);

        $r8 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        $r5 = (java.lang.Throwable) $r8;

        throw $r5;
    }
}
