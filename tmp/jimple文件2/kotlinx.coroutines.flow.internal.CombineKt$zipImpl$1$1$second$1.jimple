final class kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final kotlinx.coroutines.flow.Flow $flow2;
    private java.lang.Object L$0;
    int label;

    void <init>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1 r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.Flow $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: kotlinx.coroutines.flow.Flow $flow2> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1 r0, $r4;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.Flow $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1;

        $r3 = r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: kotlinx.coroutines.flow.Flow $flow2>;

        specialinvoke $r4.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r3, $r2);

        $r4.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r4;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1 r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.ProducerScope $r3;
        kotlin.coroutines.Continuation $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.channels.ProducerScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: java.lang.Object invoke(kotlinx.coroutines.channels.ProducerScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1 r0;
        kotlinx.coroutines.channels.ProducerScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1;

        $r1 := @parameter0: kotlinx.coroutines.channels.ProducerScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1 r0;
        java.lang.Object $r1, $r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        kotlinx.coroutines.channels.ProducerScope $r4;
        kotlinx.coroutines.flow.Flow $r5;
        kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1$invokeSuspend$$inlined$collect$1 $r6;
        kotlinx.coroutines.flow.FlowCollector $r7;
        kotlin.coroutines.Continuation $r8;
        kotlin.Unit r9;

        r0 := @this: kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: int label>;

        if $i0 == 0 goto label2;

        if $i0 != 1 goto label1;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label3;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r1 = r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: java.lang.Object L$0>;

        $r4 = (kotlinx.coroutines.channels.ProducerScope) $r1;

        $r5 = r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: kotlinx.coroutines.flow.Flow $flow2>;

        $r6 = new kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1$invokeSuspend$$inlined$collect$1;

        specialinvoke $r6.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1$invokeSuspend$$inlined$collect$1: void <init>(kotlinx.coroutines.channels.ProducerScope)>($r4);

        $r7 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$second$1: int label> = 1;

        $r1 = interfaceinvoke $r5.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r7, $r8);

        if $r1 != $r2 goto label3;

        return $r2;

     label3:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;
    }
}
