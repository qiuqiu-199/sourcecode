public abstract class kotlinx.coroutines.CoroutineDispatcher extends kotlin.coroutines.AbstractCoroutineContextElement implements kotlin.coroutines.ContinuationInterceptor
{
    public static final kotlinx.coroutines.CoroutineDispatcher$Key Key;

    static void <clinit>()
    {
        kotlinx.coroutines.CoroutineDispatcher$Key $r0;

        $r0 = new kotlinx.coroutines.CoroutineDispatcher$Key;

        specialinvoke $r0.<kotlinx.coroutines.CoroutineDispatcher$Key: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher$Key Key> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.ContinuationInterceptor$Key $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        specialinvoke r0.<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>($r2);

        return;
    }

    public abstract void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable);

    public void dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        virtualinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlin.coroutines.ContinuationInterceptor $r3;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r3 = (kotlin.coroutines.ContinuationInterceptor) r0;

        $r1 = staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>($r3, $r2);

        return $r1;
    }

    public final kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new kotlinx.coroutines.internal.DispatchedContinuation;

        specialinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: void <init>(kotlinx.coroutines.CoroutineDispatcher,kotlin.coroutines.Continuation)>(r0, $r1);

        $r1 = (kotlin.coroutines.Continuation) $r2;

        return $r1;
    }

    public boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        return 1;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlin.coroutines.ContinuationInterceptor $r3;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r3 = (kotlin.coroutines.ContinuationInterceptor) r0;

        $r1 = staticinvoke <kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)>($r3, $r2);

        return $r1;
    }

    public final kotlinx.coroutines.CoroutineDispatcher plus(kotlinx.coroutines.CoroutineDispatcher)
    {
        kotlinx.coroutines.CoroutineDispatcher r0, $r1;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        return $r1;
    }

    public final void releaseInterceptedContinuation(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = (kotlinx.coroutines.internal.DispatchedContinuation) $r1;

        virtualinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: void release()>();

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.CoroutineDispatcher r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.CoroutineDispatcher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
