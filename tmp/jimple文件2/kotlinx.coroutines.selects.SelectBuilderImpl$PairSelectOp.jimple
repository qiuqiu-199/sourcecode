final class kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp extends kotlinx.coroutines.internal.OpDescriptor
{
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp otherOp;

    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        specialinvoke r0.<kotlinx.coroutines.internal.OpDescriptor: void <init>()>();

        r0.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp otherOp> = $r1;

        return;
    }

    public kotlinx.coroutines.internal.AtomicOp getAtomicOp()
    {
        kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp r0;
        kotlinx.coroutines.internal.AtomicOp $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp;

        $r2 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp otherOp>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        return $r1;
    }

    public java.lang.Object perform(java.lang.Object)
    {
        kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2, $r6;
        kotlinx.coroutines.selects.SelectBuilderImpl $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r4;
        kotlinx.coroutines.internal.AtomicOp $r5;
        java.lang.NullPointerException $r7;

        r0 := @this: kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp;

        $r2 := @parameter0: java.lang.Object;

        if $r2 == null goto label3;

        $r3 = (kotlinx.coroutines.selects.SelectBuilderImpl) $r2;

        $r4 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp otherOp>;

        virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: void finishPrepare()>();

        $r4 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp otherOp>;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()>();

        $r2 = virtualinvoke $r5.<kotlinx.coroutines.internal.AtomicOp: java.lang.Object decide(java.lang.Object)>(null);

        if $r2 != null goto label1;

        $r4 = r0.<kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp otherOp>;

        $r6 = $r4.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        goto label2;

     label1:
        $r6 = staticinvoke <kotlinx.coroutines.selects.SelectKt: java.lang.Object getNOT_SELECTED()>();

     label2:
        $r1 = <kotlinx.coroutines.selects.SelectBuilderImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, r0, $r6);

        return $r2;

     label3:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.selects.SelectBuilderImpl<*>");

        throw $r7;
    }
}
