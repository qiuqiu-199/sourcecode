public class kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc extends kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _affectedNode$FU;
    private volatile java.lang.Object _affectedNode;
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode node;
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode queue;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;", class "Ljava/lang/Object;", "_affectedNode");

        <kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _affectedNode$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc: void <init>()>();

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue> = $r2;

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node> = $r1;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r3 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next>;

        if $r3 != $r1 goto label1;

        $r3 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev>;

        if $r3 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: java.lang.Object _affectedNode> = null;

        return;
    }

    protected void finishOnSuccess(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node>;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: void access$finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1, $r2);

        return;
    }

    public void finishPrepare(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r1 = <kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _affectedNode$FU>;

        $r3 = $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode affected>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, r0, null, $r3);

        return;
    }

    protected final kotlinx.coroutines.internal.LockFreeLinkedListNode getAffectedNode()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: java.lang.Object _affectedNode>;

        $r2 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        return $r2;
    }

    protected final kotlinx.coroutines.internal.LockFreeLinkedListNode getOriginalNext()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        return r1;
    }

    protected boolean retry(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        if $r1 == $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected final kotlinx.coroutines.internal.LockFreeLinkedListNode takeAffectedNode(kotlinx.coroutines.internal.OpDescriptor)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.internal.OpDescriptor $r2;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r2 := @parameter0: kotlinx.coroutines.internal.OpDescriptor;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        $r1 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode access$correctPrev(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.OpDescriptor)>($r1, $r2);

        return $r1;
    }

    public java.lang.Object updatedNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, $r2, $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node>;

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r4 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r2, $r4, $r1);

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node>;

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r2 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node>;

        $r4 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode queue>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r1, $r2, $r4);

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc: kotlinx.coroutines.internal.LockFreeLinkedListNode node>;

        return $r1;
    }
}
