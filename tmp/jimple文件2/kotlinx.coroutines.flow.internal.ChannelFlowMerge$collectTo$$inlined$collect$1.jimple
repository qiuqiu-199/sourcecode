public final class kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1 extends java.lang.Object implements kotlinx.coroutines.flow.FlowCollector
{
    final kotlinx.coroutines.flow.internal.SendingCollector $collector$inlined;
    final kotlinx.coroutines.Job $job$inlined;
    final kotlinx.coroutines.channels.ProducerScope $scope$inlined;
    final kotlinx.coroutines.sync.Semaphore $semaphore$inlined;

    public void <init>(kotlinx.coroutines.Job, kotlinx.coroutines.sync.Semaphore, kotlinx.coroutines.channels.ProducerScope, kotlinx.coroutines.flow.internal.SendingCollector)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1 r0;
        kotlinx.coroutines.Job $r1;
        kotlinx.coroutines.sync.Semaphore $r2;
        kotlinx.coroutines.channels.ProducerScope $r3;
        kotlinx.coroutines.flow.internal.SendingCollector $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r2 := @parameter1: kotlinx.coroutines.sync.Semaphore;

        $r3 := @parameter2: kotlinx.coroutines.channels.ProducerScope;

        $r4 := @parameter3: kotlinx.coroutines.flow.internal.SendingCollector;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.Job $job$inlined> = $r1;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.sync.Semaphore $semaphore$inlined> = $r2;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.channels.ProducerScope $scope$inlined> = $r3;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.flow.internal.SendingCollector $collector$inlined> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1 r0;
        java.lang.Object $r1, $r4, $r5;
        kotlin.coroutines.Continuation $r2;
        boolean $z0;
        kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1 $r3;
        int $i0;
        kotlinx.coroutines.flow.Flow $r6;
        java.lang.IllegalStateException $r7;
        kotlinx.coroutines.Job $r8;
        kotlinx.coroutines.sync.Semaphore $r9;
        kotlinx.coroutines.channels.ProducerScope $r10;
        kotlinx.coroutines.CoroutineScope $r11;
        kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1 $r12;
        kotlinx.coroutines.flow.internal.SendingCollector $r13;
        kotlin.jvm.functions.Function2 $r14;
        kotlin.Unit r15;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: int label> = $i0;

        goto label2;

     label1:
        $r3 = new kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: void <init>(kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1,kotlin.coroutines.Continuation)>(r0, $r2);

     label2:
        $r4 = $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: int label>;

        if $i0 == 0 goto label4;

        if $i0 != 1 goto label3;

        $r1 = $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: java.lang.Object L$1>;

        $r6 = (kotlinx.coroutines.flow.Flow) $r1;

        $r1 = $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1) $r1;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label7;

     label3:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r2 = (kotlin.coroutines.Continuation) $r3;

        $r6 = (kotlinx.coroutines.flow.Flow) $r1;

        $r8 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.Job $job$inlined>;

        if $r8 != null goto label5;

        goto label6;

     label5:
        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)>($r8);

     label6:
        $r9 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.sync.Semaphore $semaphore$inlined>;

        $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: java.lang.Object L$1> = $r6;

        $r3.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1$1: int label> = 1;

        $r1 = interfaceinvoke $r9.<kotlinx.coroutines.sync.Semaphore: java.lang.Object acquire(kotlin.coroutines.Continuation)>($r3);

        if $r1 != $r5 goto label7;

        return $r5;

     label7:
        $r10 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.channels.ProducerScope $scope$inlined>;

        $r11 = (kotlinx.coroutines.CoroutineScope) $r10;

        $r12 = new kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1;

        $r13 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.flow.internal.SendingCollector $collector$inlined>;

        $r9 = r0.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$$inlined$collect$1: kotlinx.coroutines.sync.Semaphore $semaphore$inlined>;

        specialinvoke $r12.<kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.internal.SendingCollector,kotlinx.coroutines.sync.Semaphore,kotlin.coroutines.Continuation)>($r6, $r13, $r9, null);

        $r14 = (kotlin.jvm.functions.Function2) $r12;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r11, null, null, $r14, 3, null);

        r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r15;
    }
}
