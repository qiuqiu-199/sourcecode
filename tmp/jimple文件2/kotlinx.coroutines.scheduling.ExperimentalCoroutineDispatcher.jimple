public class kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher extends kotlinx.coroutines.ExecutorCoroutineDispatcher
{
    private final int corePoolSize;
    private kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler;
    private final long idleWorkerKeepAliveNs;
    private final int maxPoolSize;
    private final java.lang.String schedulerName;

    public void <init>(int, int)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>;

        specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,long,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i0, $i1, $l2, null, 8, null);

        return;
    }

    public void <init>(int, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i0 = <kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE>;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $i1 = <kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE>;

     label2:
        specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int)>($i0, $i1);

        return;
    }

    public void <init>(int, int, long, java.lang.String)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i2;
        long $l1;
        java.lang.String $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int corePoolSize> = $i2;

        r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int maxPoolSize> = $i0;

        r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: long idleWorkerKeepAliveNs> = $l1;

        r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: java.lang.String schedulerName> = $r1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>();

        r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler> = $r2;

        return;
    }

    public void <init>(int, int, long, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1, $i3;
        long $l2;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r2 := @parameter3: java.lang.String;

        $i3 := @parameter4: int;

        $r1 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i3 = $i3 & 8;

        if $i3 == 0 goto label1;

        $r2 = "CoroutineScheduler";

     label1:
        specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l2, $r2);

        return;
    }

    public void <init>(int, int, java.lang.String)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1;
        java.lang.String $r1;
        long $l2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $l2 = <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>;

        specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l2, $r1);

        return;
    }

    public void <init>(int, int, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i2 := @parameter3: int;

        $r2 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i0 = <kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE>;

     label1:
        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        $i1 = <kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE>;

     label2:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label3;

        $r1 = "DefaultDispatcher";

     label3:
        specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void <init>(int,int,java.lang.String)>($i0, $i1, $r1);

        return;
    }

    public static kotlinx.coroutines.CoroutineDispatcher blocking$default(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher, int, int, java.lang.Object)
    {
        java.lang.Object $r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher $r2;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r3;

        $r2 := @parameter0: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        if $r0 != null goto label2;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = <kotlinx.coroutines.scheduling.TasksKt: int BLOCKING_DEFAULT_PARALLELISM>;

     label1:
        $r1 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher blocking(int)>($i0);

        return $r1;

     label2:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: blocking");

        throw $r3;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r2 = new kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int corePoolSize>;

        $i1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int maxPoolSize>;

        $l2 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: long idleWorkerKeepAliveNs>;

        $r1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: java.lang.String schedulerName>;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l2, $r1);

        return $r2;
    }

    public final kotlinx.coroutines.CoroutineDispatcher blocking(int)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.scheduling.LimitingDispatcher $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = new kotlinx.coroutines.scheduling.LimitingDispatcher;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.LimitingDispatcher: void <init>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher,int,java.lang.String,int)>(r0, $i0, null, 1);

        $r2 = (kotlinx.coroutines.CoroutineDispatcher) $r1;

        return $r2;

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Expected positive parallelism level, but have ", $r3);

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;
    }

    public void close()
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void close()>();

        return;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        java.util.concurrent.RejectedExecutionException $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r4;
        kotlinx.coroutines.DefaultExecutor $r5;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r4 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

     label1:
        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>($r4, $r2, null, 0, 6, null);

     label2:
        return;

     label3:
        $r5 = <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>;

        virtualinvoke $r5.<kotlinx.coroutines.DefaultExecutor: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;

     label4:
        $r3 := @caughtexception;

        goto label3;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label4;
    }

    public final void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlinx.coroutines.scheduling.TaskContext $r1;
        kotlinx.coroutines.scheduling.Task $r2;
        java.util.concurrent.RejectedExecutionException $r3;
        java.lang.Runnable $r4;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r5;
        kotlinx.coroutines.DefaultExecutor $r6;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r4 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter2: boolean;

        $r5 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

     label1:
        virtualinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r4, $r1, $z0);

     label2:
        return;

     label3:
        $r6 = <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>;

        $r5 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        $r2 = virtualinvoke $r5.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>($r4, $r1);

        $r4 = (java.lang.Runnable) $r2;

        virtualinvoke $r6.<kotlinx.coroutines.DefaultExecutor: void enqueue(java.lang.Runnable)>($r4);

        return;

     label4:
        $r3 := @caughtexception;

        goto label3;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label4;
    }

    public void dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        java.util.concurrent.RejectedExecutionException $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r4;
        kotlinx.coroutines.DefaultExecutor $r5;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r4 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

     label1:
        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>($r4, $r2, null, 1, 2, null);

     label2:
        return;

     label3:
        $r5 = <kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE>;

        virtualinvoke $r5.<kotlinx.coroutines.DefaultExecutor: void dispatchYield(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;

     label4:
        $r3 := @caughtexception;

        goto label3;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label4;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        $r2 = (java.util.concurrent.Executor) $r1;

        return $r2;
    }

    public final kotlinx.coroutines.CoroutineDispatcher limited(int)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        int $i0, $i1;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.LimitingDispatcher $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6;
        java.lang.Integer $r7;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $i0 := @parameter0: int;

        $z0 = 1;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        $i1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int corePoolSize>;

        if $i0 > $i1 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r1 = new kotlinx.coroutines.scheduling.LimitingDispatcher;

        specialinvoke $r1.<kotlinx.coroutines.scheduling.LimitingDispatcher: void <init>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher,int,java.lang.String,int)>(r0, $i0, null, 0);

        $r2 = (kotlinx.coroutines.CoroutineDispatcher) $r1;

        return $r2;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected parallelism level lesser than core pool size (");

        $i1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int corePoolSize>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), but have ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;

     label6:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Expected positive parallelism level, but have ", $r7);

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        $r6 = (java.lang.Throwable) $r5;

        throw $r6;
    }

    public final void restore$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void usePrivateScheduler$kotlinx_coroutines_core()>();

        return;
    }

    public final void shutdown$kotlinx_coroutines_core(long)
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        long $l0;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcher: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[scheduler = ");

        $r3 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public final void usePrivateScheduler$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        java.lang.Throwable $r2;

        r0 := @this: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher;

        entermonitor r0;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>(1000L);

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>();

        r0.<kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
